
[CmdletBinding()]
Param
(
    [Parameter(Mandatory=$true)]
    [ValidateSet("PRD","STA","TST","DEV", "PER", "AUT")]
    [string]$ENV,

    [Parameter(Mandatory=$true,ValueFromPipeline=$true,HelpMessage='This must be the name of the Content Statistics file generated by Insight.')]
    [ValidateNotNullOrEmpty()]
    [string]$InsightFileName,

    [Parameter(Mandatory=$true,ValueFromPipeline=$true,HelpMessage='This must be the UNC path where Insight is outputting the Content Statistics file.')]
    [ValidateScript({Test-Path $_ -PathType Container})]
    [string]$InsightFileCreationDirectory,

    [Parameter(Mandatory=$true,HelpMessage='This is the where Insight Content Statistics file will be copied to.')]
    [ValidateScript({Test-Path $_ -PathType Container})]
    [string]$InsightFileCopyToDirectory,

    [Parameter(Mandatory=$true,HelpMessage='This is the root directory where article (CM1 content) files will be generated by user.')]
    [ValidateScript({Test-Path $_ -PathType Container})]
    [string]$ArticleFilesCreationRootDirectory,

    [Parameter(Mandatory=$true,HelpMessage='This is one single directory where all article files will be copied to.')]
    [ValidateScript({Test-Path $_ -PathType Container})]
    [string]$ArticleFilesCopyToDirectory,

    [Parameter(Mandatory=$true,HelpMessage='If the Content Statistics file is not found in InsightFileCreationDirectory, how long to wait for in seconds before re-trying (maximum of 3 re-tries will be performed)?')]
    [ValidateNotNullOrEmpty()]
    [int]$SecondsToWaitIfInsightFileNotFound,

    [Parameter(Mandatory=$true,HelpMessage='If at least one article file is not found in ArticleFilesCreationRootDirectory, how long to wait for in seconds before re-trying (maximum of 3 re-tries will be performed)?')]
    [ValidateNotNullOrEmpty()]
    [int]$SecondsToWaitIfArticleFileNotFound
)
begin{
    $ErrorActionPreference = "Stop";}

process {	
    try {
        . \\amsa.com\Process\Scripts\$ENV\PS\LibFileFunctions.ps1;

     
        #1A. Check Insight Content Statistics file existence. Error out if it does not exist after re-trying 3 times.
        $InsightFile = Join-Path $InsightFileCreationDirectory $InsightFileName
        $InsightFileExists = Test-Path $InsightFile -PathType Leaf
        Write-Output ("Insight Content Statistics file exists: $InsightFileExists")
        if (!$InsightFileExists){
            $TryTimes = 0;
            while ($TryTimes -lt 3) {
                Write-Output ((Get-Date).ToString() + ": Sleeping for " + $SecondsToWaitIfInsightFileNotFound.ToString() + " seconds zzz...")
                Start-Sleep -Seconds $SecondsToWaitIfInsightFileNotFound;
                $InsightFileExists = Test-Path $InsightFile -PathType Leaf
                Write-Output ("Insight Content Statistics file exists: $InsightFileExists")
                if ($InsightFileExists){break;}
                $TryTimes++;
            }
            if (!$InsightFileExists){throw ([string]::Format("Insight Content Statistics file does not exist after re-trying 3 times with {0} seconds interval!",$SecondsToWaitIfInsightFileNotFound.ToString()))}
        }

        #1B. Copy Insight Content Statistics file to target location
        Copy-SingleFile -SourceFileFullPath $InsightFile -TargetDirectory $InsightFileCopyToDirectory -OverwriteEvenIfFileIsNewerOrSameInTarget $true -DeleteSourceIfCopiedToTarget $false
        
        #2A. Check for article file (content) existence. Error out if it does not exist.
        $MinimumArticleFile = 1;
        $GetArticleFiles = Get-FileSatisfyingFilterCriteria -RootDir $ArticleFilesCreationRootDirectory -RecurseSubDir -FilterSkipDirName "Assets" -AssertMinimumNumberOfFiles $MinimumArticleFile
        $MinimumArticleFileExists = $($GetArticleFiles).AssertionMinimumNumberOfFiles.Passed;
        Write-Output ([string]::Format("At least {0} article files required, articles found: {1}",$MinimumArticleFile.ToString(), $MinimumArticleFileExists.ToString()))
        if (!$MinimumArticleFileExists) {
            $TryTimes = 0;
            while ($TryTimes -lt 3) {
                Write-Output ((Get-Date).ToString() + ": Sleeping for " + $SecondsToWaitIfArticleFileNotFound.ToString() + " seconds zzz...")
                Start-Sleep -Seconds $SecondsToWaitIfArticleFileNotFound;
                $GetArticleFiles = Get-FileSatisfyingFilterCriteria -RootDir $ArticleFilesCreationRootDirectory -RecurseSubDir -FilterSkipDirName "Assets" -AssertMinimumNumberOfFiles $MinimumArticleFile
                $MinimumArticleFileExists = $($GetArticleFiles).AssertionMinimumNumberOfFiles.Passed;
                Write-Output ([string]::Format("At least {0} article files required, articles found: {1}",$MinimumArticleFile.ToString(), $MinimumArticleFileExists.ToString()))
                if ($MinimumArticleFileExists){break;}
                $TryTimes++;
            }
            if (!$MinimumArticleFileExists){throw ([string]::Format("Not a single article file found after re-trying 3 times with {0} seconds interval!",$SecondsToWaitIfArticleFileNotFound.ToString()))}
        }
        
        #2B. Before copying, write some useful info
        if ($($GetArticleFiles).ExitCode -ne 0){throw $($GetArticleFiles).ErrorMessage}
        if ($($GetArticleFiles).FolderSkipped.Count -gt 0) {
            $Count = 0;
            Write-Output ("DIRECTORIES SKIPPED:");
            $($GetArticleFiles).FolderSkipped.Folder |
            %{
              $Count++;
              Write-Output ($Count.ToString() + ". " +  $_)
            }
        }

        #3C. Copy article files to target location
        $($GetArticleFiles).FileSatisfyingFilterCriteria.File |
        %{
            Copy-SingleFile -SourceFileFullPath $_ -TargetDirectory $ArticleFilesCopyToDirectory -OverwriteEvenIfFileIsNewerOrSameInTarget $true -DeleteSourceIfCopiedToTarget $false
        }
        
        Write-Output ((Get-FormattedDateTimeStamp) + ": Insight Content Statistics and Article files copied successfully!")
    }
    catch {
        Write-Output ("Error occurred: " + $error[0].Exception.Message);
        Write-Error ("Error occurred: " + $error[0].Exception.Message);
        exit 1;
    }
}
end{}


