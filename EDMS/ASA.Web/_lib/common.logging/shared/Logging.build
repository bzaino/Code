<?xml version="1.0" ?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd">

  <echo message="Logging.build" />

  <!-- make system environment variables available as NAnt properties -->
  <sysinfo/>

  <!-- Targets that are always executed -->
  <call target="set-build-configuration"/>

  <!-- What packages to build -->
  <call target="set-build-namespaces-all"/>

  <call target="set-framework-configuration"/>
  <call target="set-user-overrides"/>

  <!-- Targets that check settings -->
  <target name="check-package-version">
    <fail message="A package version has not been specified." if="${not property::exists('package.version')}"/>
  </target>
  <target name="check-package-dir">
    <property name="package.dir" value="build/package" overwrite="false"/>
    <mkdir dir="${package.dir}"/>
  </target>
  <target name="check-current-package-dir">
    <fail message="The current package directory has not been specified."
          if="${not property::exists('current.package.dir')}"/>
    <mkdir dir="${current.package.dir}"/>
  </target>
  <target name="check-htmlhelp-compiler">
    <if test="${not property::exists('htmlhelp.compiler')}">
      <readregistry property="htmlhelp.workshop.installroot"
                    key="SOFTWARE\Microsoft\HTML Help Workshop\InstallDir" hive="CurrentUser"
                    failonerror="false"/>
      <if test="${property::exists('htmlhelp.workshop.installroot')}">
        <property name="htmlhelp.compiler" value="${htmlhelp.workshop.installroot}/hhc.exe"/>
      </if>
    </if>
    <if test="${not property::exists('htmlhelp.compiler')}">
      <sysinfo/>
      <property name="htmlhelp.compiler" value="${sys.os.folder.programfiles}/HTML Help Worshop/hhc.exe"/>
    </if>
  </target>

  <!-- Target for cleaning up the current package directory -->
  <target name="clean-current-package-dir" depends="check-current-package-dir"
          description="Cleans the current package directory">
    <echo message="Cleaning the ${current.package.dir} package directory."/>
    <delete dir="${current.package.dir}" if="${directory::exists(current.package.dir)}"/>
    <mkdir dir="${current.package.dir}"/>
  </target>

  <target name="clean-obj">
	<delete dir="src/Common/${project::get-name()}/obj" failonerror="false"/>
	<delete dir="src/Common/${project::get-name()}/bin" failonerror="false"/>
	<delete dir="test/Common/${project::get-name()}.Tests/obj" failonerror="false"/>
	<delete dir="test/Common/${project::get-name()}.Tests/bin" failonerror="false"/>
	<delete dir="test/Common/${project::get-name()}.Integration.Tests/obj" failonerror="false"/>
	<delete dir="test/Common/${project::get-name()}.Integration.Tests/bin" failonerror="false"/>
  </target>



  <!-- Displays configuration info, usefull for working out why the project doesn't build -->
  <target name="display-setup" depends="check-htmlhelp-compiler">
    <echo message="Project Name = [${project.name}]"/>
    <!-- .NET Framework 1.0 -->
    <if test="${framework::exists('net-1.0')}">
      <property name="nant.settings.currentframework" value="net-1.0"/>
      <call target="display-target-framework"/>
    </if>
    <if test="${not framework::exists('net-1.0')}">
      <echo message=".NET Framework 1.0 runtime is not available."/>
    </if>
    <!-- .NET Framework 1.1 -->
    <if test="${framework::exists('net-1.1')}">
      <property name="nant.settings.currentframework" value="net-1.1"/>
      <call target="display-target-framework"/>
    </if>
    <if test="${not framework::exists('net-1.1')}">
      <echo message=".NET Framework 1.1 runtime is not available."/>
    </if>
    <!-- .NET Framework 2.0 -->
    <if test="${framework::exists('net-2.0')}">
      <property name="nant.settings.currentframework" value="net-2.0"/>
      <call target="display-target-framework"/>
    </if>
    <if test="${not framework::exists('net-2.0')}">
      <echo message=".NET Framework 2.0 runtime is not available."/>
    </if>
    <!-- .NET Compact Framework 1.0 -->
    <if test="${framework::exists('netcf-1.0')}">
      <property name="nant.settings.currentframework" value="netcf-1.0"/>
      <call target="display-target-framework"/>
    </if>
    <if test="${not framework::exists('netcf-1.0')}">
      <echo message=".NET Compact Framework 1.0 runtime is not available."/>
    </if>
    <!-- Mono 1.0 -->
    <if test="${framework::exists('mono-1.0')}">
      <property name="nant.settings.currentframework" value="mono-1.0"/>
      <call target="display-target-framework"/>
    </if>
    <if test="${not framework::exists('mono-1.0')}">
      <echo message="Mono 1.0 runtime is not available."/>
    </if>
    <!-- SSCLI 1.0 -->
    <if test="${framework::exists('sscli-1.0')}">
      <property name="nant.settings.currentframework" value="sscli-1.0"/>
      <call target="display-target-framework"/>
    </if>
    <if test="${not framework::exists('sscli-1.0')}">
      <echo message="SSCLI 1.0 runtime is not available."/>
    </if>
    <!-- HTML Help Compiler -->
    <echo message="htmlhelp.compiler: ${htmlhelp.compiler}"/>
  </target>


  <target name="display-target-framework">
    <echo message=""/>
    <echo message="----------------------------------------------------------"/>
    <echo message=" ${nant.settings.currentframework.description}"/>
    <echo message="----------------------------------------------------------"/>
    <echo message=""/>
    <echo message="framework : ${framework::get-target-framework()}"/>
    <echo message="description : ${framework::get-description(framework::get-target-framework())}"/>
    <if test="${framework::sdk-exists(framework::get-target-framework())}">
      <echo message="sdk directory : ${framework::get-sdk-directory(framework::get-target-framework())}"/>
    </if>
    <if test="${not framework::sdk-exists(framework::get-target-framework())}">
      <echo message="sdk directory : &lt;not configured/available>"/>
    </if>
    <echo message="framework directory : ${framework::get-framework-directory(framework::get-target-framework())}"/>
    <echo message="assembly directory : ${framework::get-assembly-directory(framework::get-target-framework())}"/>
    <echo message=""/>
  </target>


  <!-- Target for setting the package configuration -->
  <target name="set-package-configuration" depends="check-package-dir, check-package-version">
    <property name="current.package.dir" value="${package.dir}/${project::get-name()}"/>
    <property name="doc.dir" value="${current.package.dir}/doc"/>
    <property name="sdkdoc.dir" value="${doc.dir}/sdk"/>
  </target>

  <!-- Target for compiling all build configurations for all runtime configurations -->
  <target name="compile-all" description="Compile all build configurations for all runtime configurations">
    <echo message="Compiling all build configurations for all runtime configurations."/>

    <call target="set-debug-build-configuration"/>
    <call target="compile-build"/>

    <!-- make the release build, which requires Common.Net.snk, only if making an distributable release -->
    <if test="${property::exists('project.build.package') and project.build.package}">
      <if test="${file::exists(logging.basedir + '/../Common.Net.snk')}">
        <call target="set-release-build-configuration"/>
        <call target="compile-build"/>
      </if>
    </if>


  </target>

  <!-- Target for compiling all runtime configurations in the current build configuration -->
  <target name="compile-build" description="Compile current build configurations for all runtime configurations">
    <echo message="Compiling all framework versions for the ${current.build.config} build configuration."/>

    <!-- Ignore 1.0 Compact Framework
      <call target="compile-netcf-1.0"/>
    -->

		<!--
    <call target="compile-build-1.0"/>

    <call target="compile-build-1.1"/>
		-->

    <call target="compile-build-2.0"/>

    <!-- Ignore Mono
      call target="compile-mono-1.0"/>
    -->


  </target>

  <target name="compile-build-1.0" description="Builds for .NET 1.0 if available">
    <property name="compile-net-1.0" value="true" unless="${property::exists('compile-net-1.0')}"/>

    <if test="${framework::exists('net-1.0') and compile-net-1.0}">
      <call target="compile-net-1.0"/>
    </if>

    <if test="${not framework::exists('net-1.0')}">
      <if test="${property::exists('project.build.package') and project.build.package}">
        <fail message="The .NET Framework 1.0 is not available."/>
      </if>
      <if test="${not(property::exists('project.build.package') and project.build.package)}">
        <echo message="The .NET Framework 1.0 is not available. Build skipped."/>
      </if>
    </if>
  </target>

  <target name="compile-build-1.1" description="Builds for .NET 1.1 if available">>
    <property name="compile-net-1.1" value="true" unless="${property::exists('compile-net-1.1')}"/>

    <if test="${framework::exists('net-1.1') and compile-net-1.1}">
      <call target="compile-net-1.1"/>
    </if>

    <if test="${not framework::exists('net-1.1')}">
      <if test="${property::exists('project.build.package') and project.build.package}">
        <fail message="The .NET Framework 1.1 is not available."/>
      </if>
      <if test="${not(property::exists('project.build.package') and project.build.package)}">
        <echo message="The .NET Framework 1.1 is not available. Build skipped."/>
      </if>
    </if>
  </target>

  <target name="compile-build-2.0" description="Builds for .NET 2.0 if available">
    <property name="compile-net-2.0" value="true" unless="${property::exists('compile-net-2.0')}"/>

    <if test="${framework::exists('net-2.0') and compile-net-2.0}">
      <call target="compile-net-2.0"/>
    </if>

    <if test="${not framework::exists('net-2.0')}">
      <if test="${property::exists('project.build.package') and project.build.package}">
        <!-- .NET 2.0 Build Skipped for Package -->
        <fail message="The .NET Framework 2.0 is not available."/>
        <echo message="The .NET Framework 2.0 is not available. Build skipped during package."/>
      </if>
      <if test="${not(property::exists('project.build.package') and project.build.package)}">
        <echo message="The .NET Framework 2.0 is not available. Build skipped."/>
      </if>
    </if>
  </target>

  <target name="compile" description="Builds the current build configuration for the current target framework."
          depends="check-current-build-config">
    <call target="compile-${framework::get-target-framework()}"/>
  </target>

  <target name="compile-net-1.0" description="Builds .NET Framework 1.0 version"
          depends="set-net-1.0-runtime-configuration, check-logging-basedir, clean-current-bin-dir">
    <!-- initialize the temp.build.skip property to false -->
    <property name="temp.build.skip" value="false"/>
    <call target="copykeys"/>
    <if test="${not temp.build.skip}">
      <property name="common.lib.dir"
                value="../../common/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}"/>
      <property name="lib.dir"
                value="${logging.basedir}/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}"/>
      <call target="copylibs"/>
      <!-- build source -->
      <nant buildfile="src/Common/${project.name}/${project.name}.build" target="build"/>
      <!-- build examples -->
      <nant buildfile="examples/Common/${project.name}.Example.build" target="build" if="${build-examples}"/>
      <!-- build unit tests -->
      <nant buildfile="test/Common/${project.name}.Tests/${project.name}.Tests.build" target="test" if="${build-tests}"/>
      <!-- build integration tests -->
      <nant buildfile="test/Common/${project.name}.Integration.Tests/${project.name}.Integration.Tests.build" target="test" if="${build-integration-tests}"/>
    </if>
  </target>
  <target name="compile-net-1.1" description="Builds .NET Framework 1.1 version"
          depends="set-net-1.1-runtime-configuration, check-logging-basedir, clean-current-bin-dir">
    <!-- initialize the temp.build.skip property to false -->
    <property name="temp.build.skip" value="false"/>
    <call target="copykeys"/>
    <property name="common.lib.dir"
              value="../../common/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}"/>
    <if test="${not temp.build.skip}">
      <property name="lib.dir"
                value="${logging.basedir}/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}"/>
      <call target="copylibs"/>

      <!-- build source -->
      <nant buildfile="src/Common/${project.name}/${project.name}.build" target="build"/>
      <!-- build examples -->
      <nant buildfile="examples/Common/${project.name}.Example.build" target="build" if="${build-examples}"/>
      <!-- build unit tests -->
      <nant buildfile="test/Common/${project.name}.Tests/${project.name}.Tests.build" target="test" if="${build-tests}"/>
      <!-- build integration tests -->
      <nant buildfile="test/Common/${project.name}.Integration.Tests/${project.name}.Integration.Tests.build" target="test" if="${build-integration-tests}"/>

    </if>
  </target>
  <target name="compile-net-2.0" description="Builds .NET Framework 2.0 version"
          depends="set-net-2.0-runtime-configuration, check-logging-basedir, clean-current-bin-dir">
    <property name="temp.build.skip" value="false"/>
    <call target="copykeys"/>
    <property name="common.lib.dir"
              value="../../common/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}"/>
    <if test="${not temp.build.skip}">
      <property name="lib.dir"
                value="${logging.basedir}/lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}"/>
      <call target="copylibs"/>

      <!-- build source -->
      <nant buildfile="src/Common/${project.name}/${project.name}.build" target="build"/>
      <!-- build examples -->
      <nant buildfile="examples/Common/${project.name}.Example.build" target="build" if="${build-examples}"/>
      <!-- build unit tests -->
      <nant buildfile="test/Common/${project.name}.Tests/${project.name}.Tests.build" target="test" if="${build-tests}"/>
      <!-- build integration tests -->
      <nant buildfile="test/Common/${project.name}.Integration.Tests/${project.name}.Integration.Tests.build" target="test" if="${build-integration-tests}"/>
    </if>
  </target>


  <target name="copykeys">
    <if test="${current.build.config.release}">
      <if test="${not file::exists(logging.basedir + '/../Common.Net.snk')}">
        <if test="${property::exists('project.build.package') and project.build.package}">
          <fail message="Key file not found."/>
        </if>
        <if test="${not(property::exists('project.build.package') and project.build.package)}">
          <echo message="Key file not found. You can generate a key file by running 'sn -k Common.Net.snk'."/>
          <echo message="The generated key file should be stored in the Common.Net base directory."/>
          <echo message="The release build will be skipped."/>
          <property name="temp.build.skip" value="true"/>
        </if>
      </if>
      <if test="${file::exists(logging.basedir + '/../Common.Net.snk')}">
        <!-- copy the Common key file to the location where the compiler expects it to be -->
        <copy file="../Common.Net.snk" todir="${current.bin.dir}"/>
      </if>
      <!-- for release on .NET 2.0 need to provide keyfile argument to compiler -->
      <if test="${net-2.0}">
        <property name="compiler.args" value="/keyfile:..\..\..\..\Common.Net.snk"/>
      </if>
    </if>
  </target>

  <target name="copylibs">
    <echo message="Current bin dir = ${current.bin.dir}"/>
    <echo message="Current lib dir = ${lib.dir}"/>

    <!-- copy libraries to project lib directories -->
    <copy todir="${lib.dir}">
      <fileset basedir="${common.lib.dir}">
        <include name="*.dll"/>
        <include name="*.xml"/>
        <exclude name="${project.name}.???"/> <!-- don't copy lib we're building right now -->
      </fileset>
    </copy>

    <!-- copy libraries to compile time directory -->
    <copy todir="${current.bin.dir}">
      <fileset basedir="${lib.dir}">
        <include name="*.dll"/>
        <include name="*.xml"/>
        <!--<exclude name="System*"/>-->
      </fileset>
    </copy>
  </target>

  <!-- Top level targets -->
  <!-- target for developers / cruisecontrol to build and test everything in CVS -->
  <target name="test">
    <echo message="Compiling debug configuration for all runtime configurations."/>
    <property name="nant.target.root.name" value="build"/>
    <call target="build-all-function"/>
  </target>

  <target name="daily-build-1.0">
    <call target="set-build-namespaces-all"/>
    <call target="set-package-configuration"/>

    <call target="set-debug-build-configuration"/>
    <call target="compile-build-1.0"/>
    <call target="set-release-build-configuration"/>
    <call target="compile-build-1.0"/>

  </target>

  <target name="daily-build-1.1">
    <call target="set-build-namespaces-all"/>
    <call target="set-package-configuration"/>

    <call target="set-debug-build-configuration"/>
    <call target="compile-build-1.1"/>
    <call target="set-release-build-configuration"/>
    <call target="compile-build-1.1"/>

  </target>

  <target name="daily-build-2.0">
    <call target="set-build-namespaces-all"/>
    <call target="set-package-configuration"/>

    <call target="set-debug-build-configuration"/>
    <call target="compile-build-2.0"/>
    <call target="set-release-build-configuration"/>
    <call target="compile-build-2.0"/>

  </target>


  <target name="build-1.1">
    <call target="set-build-namespaces-all"/>
    <call target="set-debug-build-configuration"/>
    <call target="compile-build-1.1"/>

    <if test="${property::exists('project.build.package') and project.build.package}">
      <call target="set-release-build-configuration"/>
      <call target="compile-build-1.1"/>
    </if>
  </target>

  <target name="build-2.0">
    <call target="set-build-namespaces-all"/>
    <call target="set-debug-build-configuration"/>
    <call target="compile-build-2.0"/>

    <if test="${property::exists('project.build.package') and project.build.package}">
      <call target="set-release-build-configuration"/>
      <call target="compile-build-2.0"/>
    </if>

  </target>

  <target name="test-mono">
    <call target="set-build-namespaces-all"/>
    <call target="set-debug-build-configuration"/>
    <if test="${framework::exists('mono-1.0')}">
        <call target="test-mono-1.0"/>
    </if>
    <if test="${not framework::exists('mono-1.0')}">
        <if test="${property::exists('project.build.package') and project.build.package}">
            <fail message="Mono 1.0 is not available."/>
        </if>
        <if test="${not(property::exists('project.build.package') and project.build.package)}">
            <echo message="Mono 1.0 is not available. Build skipped."/>
        </if>
    </if>
  </target>



  <target name="clean" description="Deletes every build configuration">
    <property name="target.dir" value="${path::combine(project::get-base-directory(),'build')}"/>
    <echo message="Deleting all builds from all configurations : '${target.dir}'"/>
    <delete
            dir="${project::get-base-directory()}/build"
            if="${directory::exists(target.dir)}"
            failonerror="false"/>

    <delete dir="src/Common/${project.name}/obj" failonerror="false"/>

    <delete dir="test/Common/${project.name}.Tests/obj" failonerror="false"/>
    <delete dir="test/Common/${project.name}.Tests/bin" failonerror="false"/>
    <delete dir="test/Common/${project.name}.Integration.Tests/obj" failonerror="false"/>
    <delete dir="test/Common/${project.name}.Integration.Tests/bin" failonerror="false"/>

    <delete dir="examples/Common/${project.name}.Examples/src/obj" failonerror="false"/>
    <delete dir="examples/Common/${project.name}.Examples/src/bin" failonerror="false"/>
  </target>


  <!--
        Target to use when packaging release in combination
        with the VS.NET installer project
    -->
  <target name="package" depends="set-package-configuration" description="Build and Package distribution">
    <property name="project.build.package" value="true"/>

    <call target="clean-current-package-dir"/>

    <call target="compile-all"/>
    <echo message="TODO - create documentation targets!!!"/>
    <!--
    <call target="prepare-docs"/>
    <exec workingdir="./doc" program="cmd.exe" commandline="/c ant refdoc"/>
    -->
    <call target="set-release-build-configuration"/>
    <call target="package-release-files"/>
  </target>


  <!--
        Target to use when packaging as a standalone .zip file. VS.NET docs
        included but compressed sdk-web directory is. Intended for mono developers
    -->
  <target name="package-zip" description="Build and Package distribution as .zip file">
    <call target="package"/>
    <property name="project.zip-path" value="${package.dir}/${project.name}-${package.version}.zip"/>
    <zip zipfile="${project.zip-path}">
      <fileset basedir="${package.dir}/${project.name}-${package.version}">
        <include name="**/*"/>
        <exclude name="**/sdk-web/**"/>
        <exclude name="*.zip"/>
      </fileset>
    </zip>
  </target>

  <target name="dailysnapshot">
    <call target="download-libs"/>
    <property name="nant.target.root.name" value="daily-build"/>
    <call target="build-all-function"/>
    <call target="package-cvs"/>
    <call target="upload-cvs-release"/>
  </target>

  <target name="build-all-function" description="Build what is in cvs taking into account approrpiate clr versions and root target name">

    <exec workingdir="." program="cmd.exe" commandline="/c nant -D:project.build.package=${project.build.package} ${nant.target.root.name}-1.0" if="${compile-net-1.0}">
      <environment>
        <variable name="COMPlus_version" value="v1.0.3705"/>
      </environment>
    </exec>

    <exec workingdir="." program="cmd.exe" commandline="/c nant  -D:project.build.package=${project.build.package} ${nant.target.root.name}-1.1" if="${compile-net-1.1}">
      <environment>
        <variable name="COMPlus_version" value="v1.1.4322"/>
      </environment>
    </exec>

    <exec workingdir="." program="cmd.exe" commandline="/c nant  -D:project.build.package=${project.build.package} ${nant.target.root.name}-2.0" if="${compile-net-2.0}">
      <environment>
        <variable name="COMPlus_version" value="v2.0.50727"/>
      </environment>
    </exec>
  </target>

  <!-- Target to use when packaging everything in CVS -->
  <target name="package-cvs" description="Build and Package distribution">
    <property name="project.build.package" value="false"/>
    <tstamp/>
    <property name="package.version" value="${tstamp.date}-${tstamp.time}"/>

    <!--
    <call target="set-build-namespaces-all"/>
    <call target="set-package-configuration"/>
    <call target="clean-current-package-dir"/>

    <call target="set-debug-build-configuration"/>
    <call target="compile-build"/>
    -->

    <!-- do not build release right now...
    <call target="set-release-build-configuration"/>
    <call target="compile-build"/>
    -->

    <echo message="TODO - create documentation targets!!!"/>
    <!--
    <call target="prepare-docs"/>
    <exec workingdir="./doc" program="cmd.exe" commandline="/c ant refdoc"/>
    -->
    <call target="set-debug-build-configuration"/>


    <call target="package-release-files"/>
    <copy todir="${current.package.dir}">
      <fileset>
        <include name="${project::get-name()}.2003.sln"/>
        <include name="${project::get-name()}.2005.sln"/>
      </fileset>
    </copy>

    <property name="project.zip-path" value="${package.dir}/${project.name}-${package.version}.zip"/>
    <!-- for some reason this isn't being properly excluded in src.to.copy -->
    <delete>
      <fileset basedir="${current.package.dir}">
        <include name="**/${project.name}-SDK-HTML.zip"/>
      </fileset>
    </delete>

    <!-- Create the ZIP file -->
    <zip zipfile="${project.zip-path}">
      <fileset basedir="${current.package.dir}">
        <include name="**/*"/>
        <exclude name="**/sdk-web/**"/>
        <exclude name="*.zip"/>
      </fileset>
    </zip>
  </target>


  <target name="test-zip">
    <property name="project.build.package" value="false"/>
    <tstamp/>
    <property name="package.version" value="${tstamp.date}-${tstamp.time}"/>


    <call target="set-build-namespaces-all"/>
    <call target="set-package-configuration"/>
    <call target="set-debug-build-configuration"/>

    <property name="project.zip-path" value="${package.dir}/${project.name}-${package.version}.zip"/>

    <echo message="project.zip-path = ${project.zip-path}"/>

    <delete>
      <fileset basedir="${current.package.dir}">
        <include name="**/${project.name}-SDK-HTML.zip"/>
      </fileset>
    </delete>

    <zip zipfile="${project.zip-path}">
      <fileset basedir="${current.package.dir}">
        <include name="**/*"/>
        <exclude name="**/sdk-web/**"/>
      </fileset>
    </zip>
  </target>

  <target name="package-release-files" depends="set-package-configuration">
    <echo message="Current package directory = ${current.package.dir}"/>
    <echo message="build.allnamespaces = ${build.allnamespaces}"/>
    <copy todir="${current.package.dir}">
      <fileset>
        <include name="${project::get-name()}.2008.sln"/>
        <include name="readme.txt"/>
        <include name="changelog.txt"/>
        <include name="license.txt"/>
        <!-- exclude VS.Net stuff -->
        <exclude name="**/sdk-web/**"/>
        <exclude name="**/*.suo"/>
        <exclude name="**/*.user"/>
        <exclude name="**/bin/**"/>
        <exclude name="**/obj/**"/>
      </fileset>
    </copy>

    <!-- copy built assemblies -->
    <mkdir dir="${current.package.dir}/bin/net"/>

    <if test="${property::exists('build.allnamespaces') and not build.allnamespaces}">
      <copy todir="${current.package.dir}/bin/net">
        <fileset basedir="./build/net">
          <include name="**/*.dll"/>
          <include name="**/*.xml"/>
          <include name="**/*.pdb"/>
          <exclude name="**/examples/**"/>
          <exclude name="**/results/**"/>
        </fileset>
      </copy>
    </if>

    <if test="${property::exists('build.allnamespaces') and build.allnamespaces}">
      <copy todir="${current.package.dir}/bin/net">
        <fileset basedir="./build/net">
          <include name="**/*.dll"/>
          <include name="**/*.xml"/>
          <include name="**/*.pdb"/>
        </fileset>
      </copy>
    </if>

    <if test="${property::exists('build.allnamespaces') and build.allnamespaces}">
      <copy todir="${current.package.dir}/bin/net/1.1/debug">
        <fileset basedir="./lib/net/1.1">
          <include name="**/*.pdb"/>
        </fileset>
      </copy>
      <copy todir="${current.package.dir}/bin/net/2.0/debug">
        <fileset basedir="./lib/net/2.0">
          <include name="**/*.pdb"/>
        </fileset>
      </copy>
    </if>

    <delete>
      <fileset basedir="${current.package.dir}/bin/net">
        <include name="**/*.Tests.dll"/>
        <include name="**/*.Tests.pdb"/>
        <include name="**/*.Tests.xml"/>
        <include name="**/DotNetMock*.dll"/>
        <include name="**/nunit.framework.dll"/>
        <include name="**/es/**"/>
        <include name="**/PT-BR/**"/>
        <include name="**/pt-BR/**"/>
        <include name="**/sr/**"/>
        <include name="**/sr-SP-Cyrl/**"/>
        <include name="**/results/**"/>
      </fileset>
    </delete>

    <!-- copy user reference documentation -->
    <mkdir dir="${current.package.dir}/doc/reference"/>
    <copy todir="${current.package.dir}/doc/reference">
      <fileset basedir="doc/output/reference">
        <include name="html/**/*"/>
        <include name="pdf/**/*"/>
        <include name="htmlhelp/**/*"/>
        <include name="styles/**/*"/>
        <include name="images/**/*"/>
      </fileset>
    </copy>

    <!-- copy third-party libraries -->
    <mkdir dir="${current.package.dir}/lib/Net"/>

    <if test="${property::exists('build.allnamespaces') and not build.allnamespaces}">
      <copy todir="${current.package.dir}/lib/Net">
        <fileset basedir="lib/Net">
          <include name="**/DotNetMock*.dll"/>
          <include name="**/Common*.dll"/>
          <include name="**/antlr.runtime.dll"/>
          <include name="**/nunit.framework.dll"/>
        </fileset>
      </copy>
    </if>

    <if test="${property::exists('build.allnamespaces') and build.allnamespaces}">
      <copy todir="${current.package.dir}/lib">
        <fileset basedir="lib">
          <include name="**/*.dll"/>
          <include name="**/*.pdb"/>
          <include name="**/*.xml"/>
        </fileset>
      </copy>
    </if>

    <!-- copy third-party icons -->
    <mkdir dir="${current.package.dir}/icons"/>
    <copy todir="${current.package.dir}/icons">
      <fileset basedir="icons">
        <include name="*.ico"/>
        <include name="*.pal"/>
      </fileset>
    </copy>

    <!-- copy schema and dtd -->
    <mkdir dir="${current.package.dir}/doc/schema"/>

    <echo message="copying source code..."/>
    <!-- copy source code -->
    <copy todir="${current.package.dir}">
      <fileset refid="src.to.copy"/>
    </copy>

  </target>

  <target name="package-sdkdocs" depends="set-package-configuration">
    <if test="${property::exists('docx.generated')}">
      <echo message="copying SDK docs..."/>
      <call target="copy-sdkdoc-logging-1.0"/>
    </if>
  </target>

  <!-- Copy over the SDK documentation generated by Document X -->
  <target name="copy-sdkdoc-logging-1.0" depends="set-package-configuration">
    <call target="set-release-build-configuration"/>
    <delete dir="${current.package.dir}/doc/sdk/1.1/htmlhelp"/>
    <delete dir="${current.package.dir}/doc/sdk/1.1/vsnet2003"/>
    <delete dir="${current.package.dir}/doc/sdk/2.0/htmlhelp"/>
    <delete dir="${current.package.dir}/doc/sdk/2.0/vsnet2005"/>

    <mkdir dir="${current.package.dir}/doc/sdk/1.1/htmlhelp"/>
    <mkdir dir="${current.package.dir}/doc/sdk/1.1/vsnet2003"/>
    <mkdir dir="${current.package.dir}/doc/sdk/2.0/htmlhelp"/>
    <mkdir dir="${current.package.dir}/doc/sdk/2.0/vsnet2005"/>

    <!-- Copy htmlhelp 1.0 files for .NET 1.1 and 2.0 assemblies -->
    <copy todir="${current.package.dir}/doc/sdk/1.1/htmlhelp"
          file="doc/sdk/${project.name}-1.0/net-1.1/htmlhelp1and2/${project.name}.chm"/>

    <copy todir="${current.package.dir}/doc/sdk/2.0/htmlhelp"
          file="doc/sdk/${project.name}-1.0/net-2.0/htmlhelp1and2/${project.name}.chm"/>

    <!-- Copy generated htmlhelp 2.x files, install scripts, -->
    <!-- and install utility for .NET 1.1 assemblies         -->
    <copy todir="${current.package.dir}/doc/sdk/1.1/vsnet2003">
      <fileset basedir="doc/sdk/${project.name}-1.0/net-1.1/web">
        <include name="COL_*.*"/>
      </fileset>
    </copy>
    <copy todir="${current.package.dir}/doc/sdk/1.1/vsnet2003"
          file="doc/sdk/${project.name}-1.0/net-1.1/htmlhelp1and2/${project.name}.hxs"/>
    <copy todir="${current.package.dir}/doc/sdk/1.1/vsnet2003"
          file="doc/InnovaHxReg.exe"/>
    <copy todir="${current.package.dir}/doc/sdk/1.1/vsnet2003"
          file="doc\docx\${project.name}-1.0\net-1.1\RegisterHelp2.bat"/>
    <copy todir="${current.package.dir}/doc/sdk/1.1/vsnet2003"
          file="doc\docx\${project.name}-1.0\net-1.1\UnRegisterHelp2.bat"/>

    <!-- Copy generated htmlhelp 2.x files, install scripts, -->
    <!-- and install utility for .NET 2.0 assemblies         -->
    <copy todir="${current.package.dir}/doc/sdk/2.0/vsnet2005">
      <fileset basedir="doc/sdk/${project.name}-1.0/net-2.0/web">
        <include name="COL_*.*"/>
        <include name="*.hxs"/>
      </fileset>
    </copy>
    <copy todir="${current.package.dir}/doc/sdk/2.0/vsnet2005"
          file="doc/InnovaHxReg.exe"/>
    <copy todir="${current.package.dir}/doc/sdk/2.0/vsnet2005"
          file="doc\docx\${project.name}-1.0\net-2.0\RegisterHelp2.bat"/>
    <copy todir="${current.package.dir}/doc/sdk/2.0/vsnet2005"
          file="doc\docx\${project.name}-1.0\net-2.0\UnRegisterHelp2.bat"/>

  </target>

  <target name="set-user-overrides" unless="${target::has-executed('set-user-overrides')}">
    <!--
             Per-user custom properties; we load any custom properties and / or
             property overrides here... for instance, if a developer has installed
             their Clover.NET executable into 'D:\dev_utils\Cenqua\Clover.NET', he or
             she would use the following custom properties file...

             <project name="MyCustomCommon.NETProperties">
                <property name="Clover.home" value="D:\dev_utils\Cenqua\Clover.NET"/>
             </project>

             These custom properties are loaded from a single file named
             'Common.NET.xml' that must be placed in the ${sys.os.folder.applicationdata}
             directory. NAnt expands this property to the 'home' folder of the
             currently logged in user (on WinX boxes); for example...

             C:\Documents and Settings\Rick Evans\Application Data
        -->
    <!-- has this user specified any custom properties / property overrides? -->
    <property name="user.overrides.file" value="${sys.os.folder.applicationdata}\${project.name}.xml"/>
    <if test="${file::exists(user.overrides.file)}">
      <property name="user.overrides.present" value="true"/>
    </if>
    <if test="${not file::exists(user.overrides.file)}">
      <property name="user.overrides.present" value="false"/>
    </if>
    <!-- if so, then include all of those custom properties / property overrides -->
    <if test="${user.overrides.present}">
      <echo message="Using overrides properties file '${user.overrides.file}'."/>
      <include buildfile="${user.overrides.file}"/>
    </if>
  </target>
  <target name="set-build-namespaces-all">
    <property name="build.allnamespaces" value="true"/>

    <fileset id="src.to.copy">
      <include name="*.sln"/>
      <include name="src/**"/>
      <include name="examples/**"/>
      <include name="test/**"/>
      <!-- exclude VS.Net stuff -->
      <exclude name="**/*.suo"/>
      <exclude name="**/*.user"/>
      <exclude name="**/bin/**"/>
      <exclude name="**/obj/**"/>
      <exclude name="**/_ReSharper*/**"/>
      <exclude name="**/sdk-web/**"/>
      <exclude name="**/sdk/net/1.1/${project.name}-SDK-HTML.zip"/>
      <include name="installer/**"/>

    </fileset>
  </target>


  <!-- Clover.NET code coverage targets... -->
  <target name="CloverInit">
    <!-- initializes the Clover environment -->
    <echo message="Building with Clover.NET..."/>
    <if test="${not property::exists('Clover.home')}">
      <property name="Clover.home" value="C:\Program Files\Cenqua\Clover.NET 2.0 for .NET 1.1\"/>
    </if>
    <!-- 1595 - (Clover.NET workaround) 'type' is defined in multiple places; using definition from 'assembly' -->
    <property name="nowarn.numbers" value="${nowarn.numbers},1595"/>
    <copy todir="${Clover.home}" failonerror="false" overwrite="true">
      <fileset basedir=".">
        <include name="clovernet.license"/>
      </fileset>
    </copy>
    <!-- Note: Using custom build CloverNant tasks -->
    <loadtasks assembly="${Clover.home}\CloverNAnt-0.85.dll"/>
    <clover-setup initstring="CloverBuild\clover.cdb" builddir="CloverBuild" enabled="true" flatten="false">
      <fileset basedir=".">
        <include name="src/**/*"/>
        <exclude name="examples/**/*"/>
        <exclude name="test/**/*"/>
        <exclude name="src/Common/CommonAssemblyInfo.cs"/>
      </fileset>
    </clover-setup>
  </target>

  <target name="CloverClean">
    <delete dir="CloverBuild" failonerror="false"/>
    <!-- delete any Cloverised output lying around from previous Cloverisings -->
    <property name="target.dir"
              value="${project::get-base-directory()}/build/${nant.settings.currentframework}.${nant.platform.name}"/>
    <delete
            dir="${project::get-base-directory()}/build/${nant.settings.currentframework}.${nant.platform.name}/bin"
            if="${directory::exists(target.dir)}"
            failonerror="false"/>
  </target>

  <target name="CloverTest" depends="CloverInit">
    <!-- let Clover instrument a debug build -->
    <property name="using-clover" value="true"/>
    <call target="set-build-namespaces-all"/>
    <call target="set-debug-build-configuration"/>

    <!-- just run clover for 1.1 -->
    <if test="${framework::exists('net-1.1')}">
      <call target="compile-net-1.1"/>
    </if>
  </target>
  <target name="CloverReport" depends="CloverTest, CloverInit">
    <clover-report>
      <current title="${project.name} Code Coverage" output="report">
        <format type="html"/>
      </current>
    </clover-report>
  </target>
  <target name="CloverAll" depends="CloverClean, CloverReport, CloverClean"
          description="Convenience target to execute the full Clover build cycle.">
  </target>
  <target name="clovercruise" depends="CloverAll"
          description="Convenience target to execute the full Clover build cycle with reporting for cruise control.">
  </target>

</project>