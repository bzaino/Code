<?php
require_once('../config.php');
/**
 * @author Joseph Magly
 * @package moodle multiauth
 *
 * Authentication Plugin: ASA Auth
 *
 * Takes a validation key and username generated by other supporting scripts to authorize a user
 * coming from ASA.org
 *
 * 2006-08-31  File created.
 */

if (!defined('MOODLE_INTERNAL')) {
    die('Direct access to this script is forbidden.');    ///  It must be included from a Moodle page
}

require_once($CFG->libdir.'/authlib.php');

/**
 * Plugin for ASA authentication.
 */

class auth_plugin_asa extends auth_plugin_base {



    function auth_plugin_asa() {
        $this->authtype = 'asa';
        $this->config = get_config('auth/asa');
    }

    /**
     * Hook for overriding behavior of login page.
     * This method is called from login/index.php page for all enabled auth plugins.
     */
    function loginpage_hook() {

        return;
    }

    /**
     * Returns true if the password matches a valid token in table asa_sso
     * @param string $username The username - supplied for correct user context creation
     * @param string $password The password
     * @return bool Authentication success or failure.
     */
    function user_login ($username, $password) {
        global $CFG;

		$ticket =  get_record('asa_sso', 'username', $username, 'token', $password);

		if ($ticket)
		{

			$timeWindow = strtotime("-". $this->config->tokenExpiration ." minutes");


			if (strtotime($ticket->issued) > $timeWindow)
			{
				return true;
			}

		}
		return false;

    }


    function update_user_record($username, $updatekeys=false) {
        global $CFG;

		return;
	}


    /**
     * Read user information from external database and returns it as array().
     * Function should return all information available. If you are saving
     * this information to moodle user-table you should honor syncronization flags
     *
     * @param string $username username (with system magic quotes)
     *
     * @return mixed array with no magic quotes or false on error
     */
    function get_userinfo($username) {

		$password = required_param("password", PARAM_CLEAN);
        $ticket =  get_record('asa_sso', 'username', $username, 'token', $password);

		$userData->firstname = $ticket->firstname;
		$userData->lastname = $ticket->lastname;
		$userData->username = $ticket->username;
		$userData->email = 'asa_sso@asa.org';

        return $userData;
    }


    /**
     * Post authentication hook.
     * This method is called from authenticate_user_login() for all enabled auth plugins.
     *
     * @param object $user user object, later used for $USER
     * @param string $username (with system magic quotes)
     * @param string $password plain text password (with system magic quotes)
     */
    function user_authenticated_hook(&$user, $username, $password) {
        $ticket =  get_record('asa_sso', 'username', $username, 'token', $password);

		if ($ticket)
		{
			profile_load_data($user);
			$user->profile_field_logo =  $ticket->schoolname;
			$user->profile_field_collegename =  $ticket->schoolname;
			$user->profile_field_schoolcode =  $ticket->oecode;
			$user->profile_field_branchcode =  $ticket->branch;

			profile_save_data($user);

			$roleid = $this->config->studentRoleId;

			$courses = explode(',', $ticket->courses);
			foreach ($courses as $courseId)
			{
				$courseContext = get_context_instance(CONTEXT_COURSE, $courseId);
				role_assign($roleid, $user->id, 0, $courseContext->id, 0, 0, 0, 'manual');
			}


		}
    }


    /**
     * Updates the user's password.
     *
	     * called when the user password is updated. not supported with ASA auth.
     *
     * @param  object  $user        User table object  (with system magic quotes)
     * @param  string  $newpassword Plaintext password (with system magic quotes)
     * @return boolean result
     *
     */
    function user_update_password($user, $newpassword) {
        //$user = get_complete_user_data('id', $user->id);
        //return update_internal_user_password($user, $newpassword);
		return false;
    }

    function prevent_local_passwords() {
        return true;
    }

    /**
     * Returns true if this authentication plugin is 'internal'.
     *
     * @return bool
     */
    function is_internal() {
        return false;
    }

    /**
     * Returns true if this authentication plugin can change the user's
     * password.
     *
     * @return bool
     */
    function can_change_password() {
        return false;
    }

    /**
     * Returns the URL for changing the user's pw, or empty if the default can
     * be used.
     *
     * @return string
     */
    function change_password_url() {
        return;
    }

    /**
     * Returns true if plugin allows resetting of internal password.
     *
     * @return bool
     */
    function can_reset_password() {
        return false;
    }

    /**
     * Prints a form for configuring this authentication plugin.
     *
     * This function is called from admin/auth.php, and outputs a full page with
     * a form for configuring this plugin.
     *
     * @param array $page An object containing all the data for this page.
     */
    function config_form($config, $err, $user_fields) {
        include "config.html";
    }

    /**
     * Processes and stores configuration data for this authentication plugin.
     */
    function process_config($config) {
        global $CFG;

        // set to defaults if undefined
		if (!isset($config->tokenExpiration)) {
			$config->tokenExpiration  = '60';
		}
		if (!isset($config->LogoutRedirectURI)) {
			$config->LogoutRedirectURI = 'http://asa.org';
		}
		if (!isset($config->studentRoleId)) {
			$config->studentRoleId = $CFG->defaultcourseroleid;
		}

        // save settings
        set_config('tokenExpiration', $config->tokenExpiration, 'auth/asa');
        set_config('LogoutRedirectURI', $config->LogoutRedirectURI, 'auth/asa');
		set_config('studentRoleId', $config->studentRoleId, 'auth/asa');
        return true;
    }

    /**
     * Hook for overriding behavior of logout page.
     * This method is called from login/logout.php page for all enabled auth plugins.
     */
    function logoutpage_hook() {
        global $USER;     // use $USER->auth to find the plugin used for login
        global $redirect; // can be used to override redirect after logout

		$redirect = $this->config->LogoutRedirectURI ."?oe=". $USER->profile_field_schoolcode ."&br=". $USER->profile_field_branchcode;
        //override if needed
    }

}
?>