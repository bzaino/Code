<?xml version="1.0" encoding="utf-8"?>
<definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:qas="http://www.qas.com/web-2010-04" xmlns:xs="http://www.w3.org/2001/XMLSchema" name="QAS" targetNamespace="http://www.qas.com/web-2010-04" xmlns="http://schemas.xmlsoap.org/wsdl/">
  <types>
    <xs:schema xmlns="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.qas.com/web-2010-04">
      <xs:annotation>
        <xs:documentation>QASearch defines a search request</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>Country  : The country data set to use</xs:documentation>
        <xs:documentation>Engine   : The search engine to use, and any engine specific configuration settings</xs:documentation>
        <xs:documentation>Layout   : The layout to use when creating a formatted address (required by verification engine only)</xs:documentation>
        <xs:documentation>QAConfig : The server side configuration file and section to use</xs:documentation>
        <xs:documentation>Search   : The actual search string</xs:documentation>
        <xs:documentation>FormattedAddressInPicklist: Whether or not to include formatted addresses in picklist returned by the search</xs:documentation>
      </xs:annotation>
      <xs:element name="QASearch">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Country" type="qas:DataIDType" />
            <xs:element name="Engine" type="qas:EngineType" />
            <xs:element minOccurs="0" name="Layout" type="xs:string" />
            <xs:element minOccurs="0" name="QAConfig" type="qas:QAConfigType" />
            <xs:element name="Search" type="xs:string" />
            <xs:element minOccurs="0" default="false" name="FormattedAddressInPicklist" type="xs:boolean" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QABulkSearch defines a bulk search request</xs:documentation>
        <xs:documentation>Note that the bulk search will only use the verification engine.</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>Country    : The country data set to use</xs:documentation>
        <xs:documentation>Engine     : Only verification engine specific configuration settings are honoured.</xs:documentation>
        <xs:documentation>Layout     : The layout to use when creating a formatted address (required by verification engine only)</xs:documentation>
        <xs:documentation>QAConfig     : The server side configuration file and section to use</xs:documentation>
        <xs:documentation>BulkSearch : Element containing the actual search strings within multiple:</xs:documentation>
        <xs:documentation>Search     : The actual search string to verify</xs:documentation>
      </xs:annotation>
      <xs:element name="QABulkSearch">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Country" type="qas:DataIDType" />
            <xs:element name="Engine" type="qas:EngineType" />
            <xs:element minOccurs="0" name="Layout" type="xs:string" />
            <xs:element minOccurs="0" name="QAConfig" type="qas:QAConfigType" />
            <xs:element minOccurs="0" name="BulkSearchTerm" type="qas:QASearchType" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:complexType name="QASearchType">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="Search" type="xs:string" />
        </xs:sequence>
        <xs:attribute default="None" name="Count" type="xs:string" />
      </xs:complexType>
      <xs:simpleType name="ISOType">
        <xs:restriction base="xs:string">
          <xs:pattern value="[A-Za-z][A-Za-z][A-Za-z]" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="DataIDType">
        <xs:restriction base="xs:string">
          <xs:pattern value="[A-Za-z0-9][A-Za-z0-9][A-Za-z0-9]" />
        </xs:restriction>
      </xs:simpleType>
      <xs:annotation>
        <xs:documentation>EngineType specifies the engine to use for a search, and any engine options</xs:documentation>
        <xs:documentation>The various attributes are as follows:</xs:documentation>
        <xs:documentation>Flatten       : Whether or not to flatten the picklist returned by the search</xs:documentation>
        <xs:documentation>Intensity     : How hard the search engine will search to get a match</xs:documentation>
        <xs:documentation>PromptSet     : The prompt set to apply to the search string</xs:documentation>
        <xs:documentation>Threshold     : The typedown threshold (typedown engine only)</xs:documentation>
        <xs:documentation>Timeout       : The time out period in milliseconds</xs:documentation>
      </xs:annotation>
      <xs:complexType name="EngineType">
        <xs:simpleContent>
          <xs:extension base="qas:EngineEnumType">
            <xs:attribute name="Flatten" type="xs:boolean" />
            <xs:attribute name="Intensity" type="qas:EngineIntensityType" />
            <xs:attribute name="PromptSet" type="qas:PromptSetType" />
            <xs:attribute name="Threshold" type="qas:ThresholdType" />
            <xs:attribute name="Timeout" type="qas:TimeoutType" />
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:annotation>
        <xs:documentation>The available engines</xs:documentation>
      </xs:annotation>
      <xs:simpleType name="EngineEnumType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="Singleline" />
          <xs:enumeration value="Typedown" />
          <xs:enumeration value="Verification" />
          <xs:enumeration value="Keyfinder" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ThresholdType">
        <xs:restriction base="xs:positiveInteger">
          <xs:minInclusive value="5" />
          <xs:maxInclusive value="750" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="EngineIntensityType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="Exact" />
          <xs:enumeration value="Close" />
          <xs:enumeration value="Extensive" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="TimeoutType">
        <xs:restriction base="xs:nonNegativeInteger">
          <xs:minInclusive value="0" />
          <xs:maxInclusive value="600000" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="PromptSetType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="OneLine" />
          <xs:enumeration value="Default" />
          <xs:enumeration value="Generic" />
          <xs:enumeration value="Optimal" />
          <xs:enumeration value="Alternate" />
          <xs:enumeration value="Alternate2" />
          <xs:enumeration value="Alternate3" />
        </xs:restriction>
      </xs:simpleType>
      <xs:annotation>
        <xs:documentation>QASearchResult describes the results of a search</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>QAPicklist  : The picklist produced by the search</xs:documentation>
        <xs:documentation>QAAddress   : A formatted address produced by the search.
                        Note that only the verification engine will ever produce a formatted address.
                        Other engines will only ever produce a picklist.</xs:documentation>
        <xs:documentation>The VerifyLevel attribute specifies the level to which the verification engine has 
                verified the input address. It can be ignored when using all other engines.</xs:documentation>
      </xs:annotation>
      <xs:element name="QASearchResult">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="QAPicklist" type="qas:QAPicklistType" />
            <xs:element minOccurs="0" name="QAAddress" type="qas:QAAddressType" />
            <xs:element minOccurs="0" name="VerificationFlags" type="qas:VerificationFlagsType" />
          </xs:sequence>
          <xs:attribute default="None" name="VerifyLevel" type="qas:VerifyLevelType" />
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QABulkSearchResult describes the results of a bulk search</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>BulkAddress        : one element for each search string from the original search</xs:documentation>
      </xs:annotation>
      <xs:element name="QABulkSearchResult">
        <xs:complexType>
          <xs:sequence>
            <xs:element maxOccurs="unbounded" name="BulkAddress" type="qas:QABulkSearchItemType" />
            <xs:element minOccurs="0" name="BulkError" type="xs:string" />
            <xs:element minOccurs="0" name="ErrorCode" type="xs:string" />
          </xs:sequence>
          <xs:attribute default="None" name="Count" type="xs:string" />
          <xs:attribute default="None" name="SearchCount" type="xs:string" />
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QABulkSearchItemType describes a bulk search result item</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>Address        : a formatted address item</xs:documentation>
        <xs:documentation>InputAddress    : the original address as input</xs:documentation>
        <xs:documentation>The attributes are as follows:</xs:documentation>
        <xs:documentation>VerifyLevel   : The VerifyLevel attribute specifies the level to which the verification engine has 
                verified the input address.</xs:documentation>
      </xs:annotation>
      <xs:complexType name="QABulkSearchItemType">
        <xs:sequence>
          <xs:element name="QAAddress" type="qas:QAAddressType" />
          <xs:element name="InputAddress" type="xs:string" />
          <xs:element minOccurs="0" name="VerificationFlags" type="qas:VerificationFlagsType" />
        </xs:sequence>
        <xs:attribute name="VerifyLevel" type="qas:VerifyLevelType" />
      </xs:complexType>
      <xs:simpleType name="VerifyLevelType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="None" />
          <xs:enumeration value="Verified" />
          <xs:enumeration value="InteractionRequired" />
          <xs:enumeration value="PremisesPartial" />
          <xs:enumeration value="StreetPartial" />
          <xs:enumeration value="Multiple" />
          <xs:enumeration value="VerifiedPlace" />
          <xs:enumeration value="VerifiedStreet" />
        </xs:restriction>
      </xs:simpleType>
      <xs:annotation>
        <xs:documentation>VerificationFlagsType describes the match flags associated with the verification engine.
                Please refer to the country specific data guide for further details</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>BldgFirmNameChanged  : Building or Firm name has been added or changed</xs:documentation>
        <xs:documentation>PrimaryNumberChanged  : Primary Number has been added or changed</xs:documentation>
        <xs:documentation>StreetCorrected  : Street has been (non-trivially) corrected</xs:documentation>
        <xs:documentation>RuralRteHighwayContractMatched  : Rural Route or Highway Contract has been matched</xs:documentation>
        <xs:documentation>CityNameChanged  : City name has been added or changed</xs:documentation>
        <xs:documentation>CityAliasMatched  : City name has been alias matched</xs:documentation>
        <xs:documentation>StateProvinceChanged  : State or Province has been added or changed</xs:documentation>
        <xs:documentation>PostCodeCorrected  : Post code has been added or corrected</xs:documentation>
        <xs:documentation>SecondaryNumRetained  : Secondary number has been retained</xs:documentation>
        <xs:documentation>IdenPreStInfoRetained  : Identifiable pre-street information has been retained</xs:documentation>
        <xs:documentation>GenPreStInfoRetained  : General pre-street information has been retained</xs:documentation>
        <xs:documentation>PostStInfoRetained  : Post-street information has been retained</xs:documentation>
      </xs:annotation>
      <xs:complexType name="VerificationFlagsType">
        <xs:sequence>
          <xs:element minOccurs="0" default="false" name="BldgFirmNameChanged" type="xs:boolean" />
          <xs:element minOccurs="0" default="false" name="PrimaryNumberChanged" type="xs:boolean" />
          <xs:element minOccurs="0" default="false" name="StreetCorrected" type="xs:boolean" />
          <xs:element minOccurs="0" default="false" name="RuralRteHighwayContractMatched" type="xs:boolean" />
          <xs:element minOccurs="0" default="false" name="CityNameChanged" type="xs:boolean" />
          <xs:element minOccurs="0" default="false" name="CityAliasMatched" type="xs:boolean" />
          <xs:element minOccurs="0" default="false" name="StateProvinceChanged" type="xs:boolean" />
          <xs:element minOccurs="0" default="false" name="PostCodeCorrected" type="xs:boolean" />
          <xs:element minOccurs="0" default="false" name="SecondaryNumRetained" type="xs:boolean" />
          <xs:element minOccurs="0" default="false" name="IdenPreStInfoRetained" type="xs:boolean" />
          <xs:element minOccurs="0" default="false" name="GenPreStInfoRetained" type="xs:boolean" />
          <xs:element minOccurs="0" default="false" name="PostStInfoRetained" type="xs:boolean" />
        </xs:sequence>
      </xs:complexType>
      <xs:annotation>
        <xs:documentation>QARefine defines a refinement request</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>Moniker    : The Search Point Moniker to refine</xs:documentation>
        <xs:documentation>Refinement : The refinement text</xs:documentation>
        <xs:documentation>QAConfig   : The server side configuration file and section to use</xs:documentation>
        <xs:documentation>Layout     : The layout to use when creating a formatted address (required by verification engine only)</xs:documentation>
        <xs:documentation>FormattedAddressInPicklist: Whether or not to include formatted addresses in the picklist</xs:documentation>
        <xs:documentation>The attributes are as follows:</xs:documentation>
        <xs:documentation>Threshold  : The picklist threshold (i.e. the maximum size of the picklist)</xs:documentation>
        <xs:documentation>Timeout    : The timeout period in milliseconds</xs:documentation>
      </xs:annotation>
      <xs:element name="QARefine">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Moniker" type="xs:string" />
            <xs:element minOccurs="0" name="Refinement" type="xs:string" />
            <xs:element minOccurs="0" name="QAConfig" type="qas:QAConfigType" />
            <xs:element minOccurs="0" name="Layout" type="xs:string" />
            <xs:element minOccurs="0" default="false" name="FormattedAddressInPicklist" type="xs:boolean" />
          </xs:sequence>
          <xs:attribute name="Threshold" type="qas:ThresholdType" />
          <xs:attribute name="Timeout" type="qas:TimeoutType" />
        </xs:complexType>
      </xs:element>
      <xs:element name="Picklist">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="QAPicklist" type="qas:QAPicklistType" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAPicklistType describes a picklist</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>FullPicklistMoniker : The Search Point Moniker that describes the entire picklist</xs:documentation>
        <xs:documentation>PicklistEntry       : The actual picklist entries</xs:documentation>
        <xs:documentation>Prompt              : The prompt to display to the user, indicating what information they should enter next</xs:documentation>
        <xs:documentation>Total               : The total number of available results</xs:documentation>
        <xs:documentation>The attributes are as follows:</xs:documentation>
        <xs:documentation>AutoFormatSafe      : It is suggested that you immediately format the first picklist item</xs:documentation>
        <xs:documentation>AutoFormatPastClose : There is only one exact match, so you may want immediately to format the first picklist item</xs:documentation>
        <xs:documentation>AutoStepInSafe      : It is suggested that you immediately step-in to the first picklist item</xs:documentation>
        <xs:documentation>AutoStepInPastClose : There is only one exact match, so you may want immediately to step-in to the first picklist item</xs:documentation>
        <xs:documentation>LargePotential      : Potentially, there are too many results to display</xs:documentation>
        <xs:documentation>MaxMatches          : The number of results exceeded the maximum allowed</xs:documentation>
        <xs:documentation>MoreOtherMatches    : There are additional matches that can be displayed</xs:documentation>
        <xs:documentation>OverThreshold       : There are more picklist items than the threshold value</xs:documentation>
        <xs:documentation>Timeout             : The search/refinement timed out</xs:documentation>
      </xs:annotation>
      <xs:complexType name="QAPicklistType">
        <xs:sequence>
          <xs:element name="FullPicklistMoniker" type="xs:string" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="PicklistEntry" type="qas:PicklistEntryType" />
          <xs:element name="Prompt" type="xs:string" />
          <xs:element name="Total" type="xs:nonNegativeInteger" />
        </xs:sequence>
        <xs:attribute default="false" name="AutoFormatSafe" type="xs:boolean" />
        <xs:attribute default="false" name="AutoFormatPastClose" type="xs:boolean" />
        <xs:attribute default="false" name="AutoStepinSafe" type="xs:boolean" />
        <xs:attribute default="false" name="AutoStepinPastClose" type="xs:boolean" />
        <xs:attribute default="false" name="LargePotential" type="xs:boolean" />
        <xs:attribute default="false" name="MaxMatches" type="xs:boolean" />
        <xs:attribute default="false" name="MoreOtherMatches" type="xs:boolean" />
        <xs:attribute default="false" name="OverThreshold" type="xs:boolean" />
        <xs:attribute default="false" name="Timeout" type="xs:boolean" />
      </xs:complexType>
      <xs:annotation>
        <xs:documentation>PicklistEntryType describes an entry in a picklist</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>Moniker        : The Search Point Moniker that represents this picklist entry</xs:documentation>
        <xs:documentation>PartialAddress : The full details of the address captured so far</xs:documentation>
        <xs:documentation>Picklist       : The picklist text to display</xs:documentation>
        <xs:documentation>Postcode       : The postcode to display</xs:documentation>
        <xs:documentation>Score          : The percentage score assigned to the match</xs:documentation>
        <xs:documentation>QAAddress      : The Full Address for the moniker</xs:documentation>
        <xs:documentation>The attributes are as follows:</xs:documentation>
        <xs:documentation>FullAddress         : This picklist entry is a full deliverable address</xs:documentation>
        <xs:documentation>Multiples           : This entry represents multiple address lines</xs:documentation>
        <xs:documentation>CanStep             : This entry can be stepped into</xs:documentation>
        <xs:documentation>AliasMatch          : This match is an alias</xs:documentation>
        <xs:documentation>PostcodeRecoded     : This entry has a recoded postcode</xs:documentation>
        <xs:documentation>CrossBorderMatch    : This entry represents a nearby area, outside the strict initial boundaries of the search</xs:documentation>
        <xs:documentation>DummyPOBox          : This entry is the dummy PO Box entry</xs:documentation>
        <xs:documentation>Name                : This entry is a Names result</xs:documentation>
        <xs:documentation>Information         : This entry is an informational prompt</xs:documentation>
        <xs:documentation>WarnInformation     : This entry is a warning informational prompt</xs:documentation>
        <xs:documentation>IncompleteAddr      : This entry is the dummy item (for premise-less countries)</xs:documentation>
        <xs:documentation>UnresolvableRange   : This entry is a static range item that cannot be expanded</xs:documentation>
        <xs:documentation>PhantomPrimaryPoint : This entry is a Phantom Primary Point (AUS only)</xs:documentation>
        <xs:documentation>SubsidiaryData      : This entry is from the subsidiary rather than the base data set</xs:documentation>
        <xs:documentation>ExtendedData        : This entry is from the base data set but extended by the subsidary data set</xs:documentation>
        <xs:documentation>EnhancedData        : This entry is from the base data set but enhanced by the subsidary data set</xs:documentation>
      </xs:annotation>
      <xs:complexType name="PicklistEntryType">
        <xs:sequence>
          <xs:element name="Moniker" type="xs:string" />
          <xs:element name="PartialAddress" type="xs:string" />
          <xs:element name="Picklist" type="xs:string" />
          <xs:element name="Postcode" type="xs:string" />
          <xs:element name="Score" type="xs:nonNegativeInteger" />
          <xs:element minOccurs="0" name="QAAddress" type="qas:QAAddressType" />
        </xs:sequence>
        <xs:attribute default="false" name="FullAddress" type="xs:boolean" />
        <xs:attribute default="false" name="Multiples" type="xs:boolean" />
        <xs:attribute default="false" name="CanStep" type="xs:boolean" />
        <xs:attribute default="false" name="AliasMatch" type="xs:boolean" />
        <xs:attribute default="false" name="PostcodeRecoded" type="xs:boolean" />
        <xs:attribute default="false" name="CrossBorderMatch" type="xs:boolean" />
        <xs:attribute default="false" name="DummyPOBox" type="xs:boolean" />
        <xs:attribute default="false" name="Name" type="xs:boolean" />
        <xs:attribute default="false" name="Information" type="xs:boolean" />
        <xs:attribute default="false" name="WarnInformation" type="xs:boolean" />
        <xs:attribute default="false" name="IncompleteAddr" type="xs:boolean" />
        <xs:attribute default="false" name="UnresolvableRange" type="xs:boolean" />
        <xs:attribute default="false" name="PhantomPrimaryPoint" type="xs:boolean" />
        <xs:attribute default="false" name="SubsidiaryData" type="xs:boolean" />
        <xs:attribute default="false" name="ExtendedData" type="xs:boolean" />
        <xs:attribute default="false" name="EnhancedData" type="xs:boolean" />
      </xs:complexType>
      <xs:annotation>
        <xs:documentation>QAGetAddress defines a request for a formatted address</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>Layout   : The layout to use</xs:documentation>
        <xs:documentation>Moniker  : The Search Point Moniker of the picklist entry to format</xs:documentation>
        <xs:documentation>QAConfig : The server side configuration file and section to use</xs:documentation>
      </xs:annotation>
      <xs:element name="QAGetAddress">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Layout" type="xs:string" />
            <xs:element name="Moniker" type="xs:string" />
            <xs:element minOccurs="0" name="QAConfig" type="qas:QAConfigType" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Address">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="QAAddress" type="qas:QAAddressType" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAAddressType describes a formatted address</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>AddressLine  : The individual lines of the address</xs:documentation>
        <xs:documentation>The attributes are as follows:</xs:documentation>
        <xs:documentation>Overflow   : There are not enough address lines configured to display the whole address</xs:documentation>
        <xs:documentation>Truncated  : Truncation has occurred on one or more address lines</xs:documentation>
        <xs:documentation>DPVStatus  : DPV  Status for the Address  </xs:documentation>
        <xs:documentation>MissingSubPremise : The missing subpremise attribute specifies if the address is missing a subpremise
                when using the verification engine. It can be ignored when using all other engines.</xs:documentation>
      </xs:annotation>
      <xs:complexType name="QAAddressType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="AddressLine" type="qas:AddressLineType" />
        </xs:sequence>
        <xs:attribute default="false" name="Overflow" type="xs:boolean" />
        <xs:attribute default="false" name="Truncated" type="xs:boolean" />
        <xs:attribute name="DPVStatus" type="qas:DPVStatusType" />
        <xs:attribute default="false" name="MissingSubPremise" type="xs:boolean" />
      </xs:complexType>
      <xs:annotation>
        <xs:documentation>DPVStatusType specifies the DPVStatus for an Address </xs:documentation>
        <xs:documentation>The various attributes are as follows:</xs:documentation>
        <xs:documentation>DPVNotConfigured       : The DPV has not been configured in the Layout</xs:documentation>
        <xs:documentation>DPVConfigured          : The DPV has been configured in the Layout</xs:documentation>
        <xs:documentation>DPVConfirmed           : The Address is DPV Confirmed </xs:documentation>
        <xs:documentation>DPVConfirmedMissingSec : The Address is DPV Confirmed but Missing or Incorrect secondary </xs:documentation>
        <xs:documentation>DPVNotConfirmed        : The Address is DPV NOT Confirmed</xs:documentation>
        <xs:documentation>DPVLocked              : The Address Retrieval is Locked </xs:documentation>
        <xs:documentation>DPVSeedHit             : The Address is a DPV Seed</xs:documentation>
      </xs:annotation>
      <xs:simpleType name="DPVStatusType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="DPVNotConfigured" />
          <xs:enumeration value="DPVConfigured" />
          <xs:enumeration value="DPVConfirmed" />
          <xs:enumeration value="DPVConfirmedMissingSec" />
          <xs:enumeration value="DPVNotConfirmed" />
          <xs:enumeration value="DPVLocked" />
          <xs:enumeration value="DPVSeedHit" />
        </xs:restriction>
      </xs:simpleType>
      <xs:annotation>
        <xs:documentation>QADPVLockDetailsType contains the DPV detail of the locked server </xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>DPVLockDate      : Date server was locked</xs:documentation>
        <xs:documentation>DPVLockTime      : Time server was locked</xs:documentation>
        <xs:documentation>DPVSeedAddress   : Seed address which locked the server</xs:documentation>
        <xs:documentation>DPVLockCode      : DPV Lock code</xs:documentation>
      </xs:annotation>
      <xs:complexType name="QADPVLockDetailsType">
        <xs:sequence>
          <xs:element minOccurs="0" name="DPVLockDate" type="xs:string" />
          <xs:element minOccurs="0" name="DPVLockTime" type="xs:string" />
          <xs:element minOccurs="0" name="DPVSeedAddress" type="xs:string" />
          <xs:element minOccurs="0" name="DPVLockCode" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:annotation>
        <xs:documentation>AddressLineType describes one line of a formatted address</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>Label  : The name of any address element fixed to this line</xs:documentation>
        <xs:documentation>Line   : The formatted address line</xs:documentation>
        <xs:documentation>DataplusGroup: Dataplus groups associated with this line</xs:documentation>
        <xs:documentation>The attributes are as follows:</xs:documentation>
        <xs:documentation>LineContent      : The type of data on this line</xs:documentation>
        <xs:documentation>Overflow         : Some address elements were lost from this line</xs:documentation>
        <xs:documentation>Truncated        : Truncation occurred on this line</xs:documentation>
      </xs:annotation>
      <xs:complexType name="AddressLineType">
        <xs:sequence>
          <xs:element minOccurs="0" name="Label" type="xs:string" />
          <xs:element minOccurs="0" name="Line" type="xs:string" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="DataplusGroup" type="qas:DataplusGroupType" />
        </xs:sequence>
        <xs:attribute default="Address" name="LineContent" type="qas:LineContentType" />
        <xs:attribute default="false" name="Overflow" type="xs:boolean" />
        <xs:attribute default="false" name="Truncated" type="xs:boolean" />
      </xs:complexType>
      <xs:complexType name="DataplusGroupType">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="DataplusGroupItem" type="xs:string" />
        </xs:sequence>
        <xs:attribute name="GroupName" type="xs:string" />
      </xs:complexType>
      <xs:simpleType name="LineContentType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="None" />
          <xs:enumeration value="Address" />
          <xs:enumeration value="Name" />
          <xs:enumeration value="Ancillary" />
          <xs:enumeration value="DataPlus" />
        </xs:restriction>
      </xs:simpleType>
      <xs:annotation>
        <xs:documentation>QAData describes all of the data sets that are available</xs:documentation>
        <xs:documentation>DataSet : details of a data set</xs:documentation>
      </xs:annotation>
      <xs:element name="QAData">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="DataSet" type="qas:QADataSet" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QADataSet describes a data set</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>ID    : Three letter data set ID</xs:documentation>
        <xs:documentation>Name  : Full name of data set</xs:documentation>
      </xs:annotation>
      <xs:complexType name="QADataSet">
        <xs:sequence>
          <xs:element name="ID" type="qas:DataIDType" />
          <xs:element name="Name" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:annotation>
        <xs:documentation>QAGetData is an empty element for the GetData message</xs:documentation>
      </xs:annotation>
      <xs:element name="QAGetData">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAGetLicenseInfo is an empty element for the GetLicenseInfo message</xs:documentation>
      </xs:annotation>
      <xs:element name="QAGetLicenseInfo">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAGetDataHashCode is an empty element for the GetDataHashCode message</xs:documentation>
      </xs:annotation>
      <xs:element name="QAGetDataHashCode">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAGetSystemInfo is an empty element for the GetSystemInfo message</xs:documentation>
      </xs:annotation>
      <xs:element name="QAGetSystemInfo">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAGetDataMapDetail describes a request for data map detail information</xs:documentation>
      </xs:annotation>
      <xs:element name="QAGetDataMapDetail">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DataMap" type="qas:DataIDType" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAGetDPVStatus is an empty element for the GetDPVStatus message</xs:documentation>
      </xs:annotation>
      <xs:element name="QAGetDPVStatus">
        <xs:complexType>
          <xs:sequence />
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QADataMapDetail contains details of all datasets in a given data map</xs:documentation>
      </xs:annotation>
      <xs:element name="QADataMapDetail">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="WarningLevel" type="qas:LicenceWarningLevel" />
            <xs:element minOccurs="0" maxOccurs="unbounded" name="LicensedSet" type="qas:QALicensedSet" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QALicenceInfo describes all of the licence information for each data set</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>WarningLevel  : Warning level for the set of licensed data</xs:documentation>
        <xs:documentation>LicensedSet   : Details of a licensed data set</xs:documentation>
      </xs:annotation>
      <xs:element name="QALicenceInfo">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="WarningLevel" type="qas:LicenceWarningLevel" />
            <xs:element minOccurs="0" maxOccurs="unbounded" name="LicensedSet" type="qas:QALicensedSet" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QADPVStatus lists the current DPV Status of the server and relevant seed information</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>QADPVLockDetails : DPV details of the locked server</xs:documentation>
        <xs:documentation>The DPVReturnedStatus attribute specifies the overall DPV Status of the server</xs:documentation>
      </xs:annotation>
      <xs:element name="QADPVStatus">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" name="QADPVLockDetails" type="qas:QADPVLockDetailsType" />
          </xs:sequence>
          <xs:attribute name="DPVReturnedStatus" type="qas:DPVStatusType" />
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAUnlockDPV defines a DPV unlock request</xs:documentation>
        <xs:documentation>The child elements are as follows:</xs:documentation>
        <xs:documentation>UnlockCode  : The DPV unlock code</xs:documentation>
      </xs:annotation>
      <xs:element name="QAUnlockDPV">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="UnlockCode" type="xs:string" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAUnlockDPVOk is the response from a QAUnlockDPV operation.</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>UnlockCodeOk : Boolean stating whether unlock was successful</xs:documentation>
        <xs:documentation>ErrorCode    : The QAS error code returned</xs:documentation>
        <xs:documentation>ErrorMesage  : A textual description of the error</xs:documentation>
      </xs:annotation>
      <xs:element name="QAUnlockDPVOk">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="UnlockCodeOk" type="xs:boolean" />
            <xs:element minOccurs="0" name="ErrorCode" type="xs:string" />
            <xs:element minOccurs="0" name="ErrorMessage" type="xs:string" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QADataHashCode describes the hash code of the server</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>DataHashCode     : Hash code for the server</xs:documentation>
      </xs:annotation>
      <xs:element name="QADataHashCode">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DataHashCode" type="xs:string" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:simpleType name="LicenceWarningLevel">
        <xs:restriction base="xs:string">
          <xs:enumeration value="None" />
          <xs:enumeration value="DataExpiring" />
          <xs:enumeration value="LicenceExpiring" />
          <xs:enumeration value="ClicksLow" />
          <xs:enumeration value="Evaluation" />
          <xs:enumeration value="NoClicks" />
          <xs:enumeration value="DataExpired" />
          <xs:enumeration value="EvalLicenceExpired" />
          <xs:enumeration value="FullLicenceExpired" />
          <xs:enumeration value="LicenceNotFound" />
          <xs:enumeration value="DataUnreadable" />
        </xs:restriction>
      </xs:simpleType>
      <xs:annotation>
        <xs:documentation>QALicensedSet describes a licensed data set</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>ID              : Data set ID</xs:documentation>
        <xs:documentation>Description     : Full description of data set</xs:documentation>
        <xs:documentation>Copyright       : Copyright information</xs:documentation>
        <xs:documentation>Version         : Version of the data</xs:documentation>
        <xs:documentation>BaseCountry     : Data ID of the country to which this data set is an extension</xs:documentation>
        <xs:documentation>Status          : A string describing the state of the data</xs:documentation>
        <xs:documentation>Server          : The name of the server where the data set is being used</xs:documentation>
        <xs:documentation>WarningLevel    : The warning level for the data set</xs:documentation>
        <xs:documentation>DaysLeft        : The number of days before the data set is unusable</xs:documentation>
        <xs:documentation>DataDaysLeft    : The number of days before the data expires</xs:documentation>
        <xs:documentation>LicenceDaysLeft : The number of days before the licence expires</xs:documentation>
      </xs:annotation>
      <xs:complexType name="QALicensedSet">
        <xs:sequence>
          <xs:element name="ID" type="xs:string" />
          <xs:element name="Description" type="xs:string" />
          <xs:element name="Copyright" type="xs:string" />
          <xs:element name="Version" type="xs:string" />
          <xs:element name="BaseCountry" type="xs:string" />
          <xs:element name="Status" type="xs:string" />
          <xs:element name="Server" type="xs:string" />
          <xs:element name="WarningLevel" type="qas:LicenceWarningLevel" />
          <xs:element name="DaysLeft" type="xs:nonNegativeInteger" />
          <xs:element name="DataDaysLeft" type="xs:nonNegativeInteger" />
          <xs:element name="LicenceDaysLeft" type="xs:nonNegativeInteger" />
        </xs:sequence>
      </xs:complexType>
      <xs:annotation>
        <xs:documentation>QASystemInfo describes the current state of the system</xs:documentation>
      </xs:annotation>
      <xs:element name="QASystemInfo">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="SystemInfo" type="xs:string" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAGetExampleAddresses defines a request for the example addresses for a given data set</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>Country  : The country data set to get example addresses for</xs:documentation>
        <xs:documentation>Layout   : The layout to use to format the example addresses</xs:documentation>
        <xs:documentation>QAConfig : The server side configuration file and section to use</xs:documentation>
      </xs:annotation>
      <xs:element name="QAGetExampleAddresses">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Country" type="qas:DataIDType" />
            <xs:element name="Layout" type="xs:string" />
            <xs:element minOccurs="0" name="QAConfig" type="qas:QAConfigType" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAExampleAddresses describes all of the example addresses for a data set</xs:documentation>
      </xs:annotation>
      <xs:element name="QAExampleAddresses">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="ExampleAddress" type="qas:QAExampleAddress" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAExampleAddress describes an example address</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>Address  : The formatted example address</xs:documentation>
        <xs:documentation>Comment  : A comment describing the address</xs:documentation>
      </xs:annotation>
      <xs:complexType name="QAExampleAddress">
        <xs:sequence>
          <xs:element name="Address" type="qas:QAAddressType" />
          <xs:element name="Comment" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:annotation>
        <xs:documentation>QAGetLayouts defines a request for a list of all the available layouts</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>Country   : The country data set to get layouts for</xs:documentation>
        <xs:documentation>QAConfig  : The server side configuration file and section to use</xs:documentation>
      </xs:annotation>
      <xs:element name="QAGetLayouts">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Country" type="qas:DataIDType" />
            <xs:element minOccurs="0" name="QAConfig" type="qas:QAConfigType" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QALayouts describes all the available layouts for a data set</xs:documentation>
      </xs:annotation>
      <xs:element name="QALayouts">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="Layout" type="qas:QALayout" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QALayout describes a layout</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>Name     : The name of the layout</xs:documentation>
        <xs:documentation>Comment  : A comment describing the layout</xs:documentation>
      </xs:annotation>
      <xs:complexType name="QALayout">
        <xs:sequence>
          <xs:element name="Name" type="xs:string" />
          <xs:element name="Comment" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:annotation>
        <xs:documentation>QAGetPromptSet defines a request for details of a prompt set</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>Country   : The country data set</xs:documentation>
        <xs:documentation>PromptSet : The prompt set to get details of</xs:documentation>
        <xs:documentation>QAConfig  : The server side configuration file and section to use</xs:documentation>
      </xs:annotation>
      <xs:element name="QAGetPromptSet">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Country" type="qas:DataIDType" />
            <xs:element minOccurs="0" name="Engine" type="qas:EngineType" />
            <xs:element name="PromptSet" type="qas:PromptSetType" />
            <xs:element minOccurs="0" name="QAConfig" type="qas:QAConfigType" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAPromptSet describes a prompt set</xs:documentation>
        <xs:documentation>Child element:</xs:documentation>
        <xs:documentation>Line : Describes one line of the prompt set</xs:documentation>
      </xs:annotation>
      <xs:element name="QAPromptSet">
        <xs:complexType>
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" name="Line" type="qas:PromptLine" />
          </xs:sequence>
          <xs:attribute default="false" name="Dynamic" type="xs:boolean" />
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>PromptLine describes a line of a prompt set</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>Prompt               : The prompt to display to the user</xs:documentation>
        <xs:documentation>SuggestedInputLength : The suggested length of the input buffer</xs:documentation>
        <xs:documentation>Example              : An example of possible input</xs:documentation>
      </xs:annotation>
      <xs:complexType name="PromptLine">
        <xs:sequence>
          <xs:element name="Prompt" type="xs:string" />
          <xs:element name="SuggestedInputLength" type="xs:nonNegativeInteger" />
          <xs:element name="Example" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:annotation>
        <xs:documentation>QAConfigType specifies the server side configuration file and section to use</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>IniFile     : The name of the server side configuration file to read settings from</xs:documentation>
        <xs:documentation>IniSection  : The section of the server side configuration file to read settings from</xs:documentation>
      </xs:annotation>
      <xs:complexType name="QAConfigType">
        <xs:sequence>
          <xs:element minOccurs="0" name="IniFile" type="xs:string" />
          <xs:element minOccurs="0" name="IniSection" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:annotation>
        <xs:documentation>QACanSearch returns a boolean specifying whether a search is possible for a</xs:documentation>
        <xs:documentation>specific country, engine and layout</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>Country  : The country data set</xs:documentation>
        <xs:documentation>Engine   : The search engine to use, and any engine specific configuration settings</xs:documentation>
        <xs:documentation>Layout   : The layout with which to format the address</xs:documentation>
        <xs:documentation>QAConfig : The server side configuration file and section to use</xs:documentation>
        <xs:documentation />
      </xs:annotation>
      <xs:element name="QACanSearch">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Country" type="qas:DataIDType" />
            <xs:element name="Engine" type="qas:EngineType" />
            <xs:element minOccurs="0" name="Layout" type="xs:string" />
            <xs:element minOccurs="0" name="QAConfig" type="qas:QAConfigType" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QASearchOK is the response from a CanSearch operation.</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>IsOk        : Boolean stating whether searching is available</xs:documentation>
        <xs:documentation>ErrorCode   : The QAS error code returned</xs:documentation>
        <xs:documentation>ErrorMesage : A textual description of the error</xs:documentation>
        <xs:documentation>ErrorDetail : Detailed error history</xs:documentation>
      </xs:annotation>
      <xs:element name="QASearchOk">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="IsOk" type="xs:boolean" />
            <xs:element minOccurs="0" name="ErrorCode" type="xs:string" />
            <xs:element minOccurs="0" name="ErrorMessage" type="xs:string" />
            <xs:element minOccurs="0" maxOccurs="unbounded" name="ErrorDetail" type="xs:string" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:annotation>
        <xs:documentation>QAFault : describes an error</xs:documentation>
        <xs:documentation>Child elements are as follows:</xs:documentation>
        <xs:documentation>ErrorCode     : The QAS error number</xs:documentation>
        <xs:documentation>ErrorMessage  : The corresponding QAS error message</xs:documentation>
        <xs:documentation>ErrorDetail : Detailed error history</xs:documentation>
      </xs:annotation>
      <xs:element name="QAFault">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="ErrorCode" type="xs:string" />
            <xs:element name="ErrorMessage" type="xs:string" />
            <xs:element minOccurs="0" maxOccurs="unbounded" name="ErrorDetail" type="xs:string" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:schema>
  </types>
  <message name="Search">
    <part name="body" element="qas:QASearch" />
  </message>
  <message name="BulkSearch">
    <part name="body" element="qas:QABulkSearch" />
  </message>
  <message name="SearchResult">
    <part name="body" element="qas:QASearchResult" />
  </message>
  <message name="BulkSearchResult">
    <part name="body" element="qas:QABulkSearchResult" />
  </message>
  <message name="Refine">
    <part name="body" element="qas:QARefine" />
  </message>
  <message name="Picklist">
    <part name="body" element="qas:Picklist" />
  </message>
  <message name="GetAddress">
    <part name="body" element="qas:QAGetAddress" />
  </message>
  <message name="Address">
    <part name="body" element="qas:Address" />
  </message>
  <message name="GetData">
    <part name="body" element="qas:QAGetData" />
  </message>
  <message name="Data">
    <part name="body" element="qas:QAData" />
  </message>
  <message name="GetDataMapDetail">
    <part name="body" element="qas:QAGetDataMapDetail" />
  </message>
  <message name="DataMapDetail">
    <part name="body" element="qas:QADataMapDetail" />
  </message>
  <message name="GetLicenseInfo">
    <part name="body" element="qas:QAGetLicenseInfo" />
  </message>
  <message name="LicenseInfo">
    <part name="body" element="qas:QALicenceInfo" />
  </message>
  <message name="GetDataHashCode">
    <part name="body" element="qas:QAGetDataHashCode" />
  </message>
  <message name="DataHashCode">
    <part name="body" element="qas:QADataHashCode" />
  </message>
  <message name="GetSystemInfo">
    <part name="body" element="qas:QAGetSystemInfo" />
  </message>
  <message name="SystemInfo">
    <part name="body" element="qas:QASystemInfo" />
  </message>
  <message name="GetDPVStatus">
    <part name="body" element="qas:QAGetDPVStatus" />
  </message>
  <message name="DPVStatus">
    <part name="body" element="qas:QADPVStatus" />
  </message>
  <message name="UnlockDPV">
    <part name="body" element="qas:QAUnlockDPV" />
  </message>
  <message name="UnlockDPVOk">
    <part name="body" element="qas:QAUnlockDPVOk" />
  </message>
  <message name="GetExampleAddresses">
    <part name="body" element="qas:QAGetExampleAddresses" />
  </message>
  <message name="ExampleAddresses">
    <part name="body" element="qas:QAExampleAddresses" />
  </message>
  <message name="GetLayouts">
    <part name="body" element="qas:QAGetLayouts" />
  </message>
  <message name="Layouts">
    <part name="body" element="qas:QALayouts" />
  </message>
  <message name="GetPromptSet">
    <part name="body" element="qas:QAGetPromptSet" />
  </message>
  <message name="PromptSet">
    <part name="body" element="qas:QAPromptSet" />
  </message>
  <message name="CanSearch">
    <part name="body" element="qas:QACanSearch" />
  </message>
  <message name="SearchOk">
    <part name="body" element="qas:QASearchOk" />
  </message>
  <message name="Fault">
    <part name="body" element="qas:QAFault" />
  </message>
  <portType name="QAPortType">
    <operation name="DoSearch">
      <input message="qas:Search" />
      <output message="qas:SearchResult" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoBulkSearch">
      <input message="qas:BulkSearch" />
      <output message="qas:BulkSearchResult" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoRefine">
      <input message="qas:Refine" />
      <output message="qas:Picklist" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoGetAddress">
      <input message="qas:GetAddress" />
      <output message="qas:Address" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoGetData">
      <input message="qas:GetData" />
      <output message="qas:Data" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoGetDataMapDetail">
      <input message="qas:GetDataMapDetail" />
      <output message="qas:DataMapDetail" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoGetLicenseInfo">
      <input message="qas:GetLicenseInfo" />
      <output message="qas:LicenseInfo" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoGetDataHashCode">
      <input message="qas:GetDataHashCode" />
      <output message="qas:DataHashCode" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoGetDPVStatus">
      <input message="qas:GetDPVStatus" />
      <output message="qas:DPVStatus" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoUnlockDPV">
      <input message="qas:UnlockDPV" />
      <output message="qas:UnlockDPVOk" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoGetSystemInfo">
      <input message="qas:GetSystemInfo" />
      <output message="qas:SystemInfo" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoGetExampleAddresses">
      <input message="qas:GetExampleAddresses" />
      <output message="qas:ExampleAddresses" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoGetLayouts">
      <input message="qas:GetLayouts" />
      <output message="qas:Layouts" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoGetPromptSet">
      <input message="qas:GetPromptSet" />
      <output message="qas:PromptSet" />
      <fault name="fault" message="qas:Fault" />
    </operation>
    <operation name="DoCanSearch">
      <input message="qas:CanSearch" />
      <output message="qas:SearchOk" />
      <fault name="fault" message="qas:Fault" />
    </operation>
  </portType>
  <binding name="QASoapBinding" type="qas:QAPortType">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" />
    <operation name="DoSearch">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoSearch" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoRefine">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoRefine" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoGetAddress">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoGetAddress" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoGetData">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoGetData" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoGetDataMapDetail">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoGetDataMapDetail" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoGetLicenseInfo">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoGetLicenseInfo" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoGetSystemInfo">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoGetSystemInfo" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoGetDataHashCode">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoGetDataHashCode" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoGetDPVStatus">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoGetDPVStatus" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoUnlockDPV">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoUnlockDPV" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoGetExampleAddresses">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoGetExampleAddresses" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoGetLayouts">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoGetLayouts" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoGetPromptSet">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoGetPromptSet" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoCanSearch">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoCanSearch" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
    <operation name="DoBulkSearch">
      <soap:operation soapAction="http://www.qas.com/web-2010-04/DoBulkSearch" />
      <input>
        <soap:body use="literal" />
      </input>
      <output>
        <soap:body use="literal" />
      </output>
      <fault name="fault">
        <soap:fault use="literal" name="fault" namespace="" />
      </fault>
    </operation>
  </binding>
  <service name="ProWeb">
    <port name="QAPortType" binding="qas:QASoapBinding">
      <soap:address location="http://adevdbs007:2021/" />
    </port>
  </service>
</definitions>