{
  "type" : "Coverity Issue Type Definitions",
  "format_version" : 1,
  "issue_type" : [
    {
      "type" : "BAD_CHECK_OF_WAIT_COND",
      "subtype" : "dead_wait",
      "code-language" : "c#",
      "name" : {
        "en" : "Indefinite wait"
      },
      "description" : {
        "en" : "A thread waits for a thread-shared condition which may have already been satisfied, causing a hang."
      },
      "local_effect" : {
        "en" : "This thread can wait after its wait condition has been satisfied, causing it to wait needlessly, perhaps forever."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : null,
        "impact" : "High",
        "subcategory" : "dead_wait",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "BAD_CHECK_OF_WAIT_COND",
      "subtype" : "spurious_wakeup",
      "code-language" : "c#",
      "name" : {
        "en" : "Data race condition"
      },
      "description" : {
        "en" : "A thread does not re-check its wait condition after waking up from a wait."
      },
      "local_effect" : {
        "en" : "This thread does not re-check the wait condition upon wakeup, which may cause it to continue prematurely."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "spurious_wakeup",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "CONSTANT_EXPRESSION_RESULT",
      "subtype" : null,
      "code-language" : "swift",
      "name" : {
        "en" : "Constant expression result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "CONSTANT_EXPRESSION_RESULT",
      "subtype" : null,
      "code-language" : "text",
      "name" : {
        "en" : "Constant expression result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "CONSTANT_EXPRESSION_RESULT",
      "subtype" : "bit_and_with_zero",
      "code-language" : "text",
      "name" : {
        "en" : "Bitwise-and with zero"
      },
      "description" : {
        "en" : "Bitwise-and ('&amp;') operation applied to zero always produces zero"
      },
      "local_effect" : {
        "en" : "The expression's value is always zero; construct may indicate an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "bit_and_with_zero",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "CONSTANT_EXPRESSION_RESULT",
      "subtype" : "logical_vs_bitwise",
      "code-language" : "text",
      "name" : {
        "en" : "Logical vs. bitwise operator"
      },
      "description" : {
        "en" : "Logical operator used in place of bitwise operator or vice versa"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; inadvertent use of the wrong operator is a likely logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "logical_vs_bitwise",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "CONSTANT_EXPRESSION_RESULT",
      "subtype" : "missing_parentheses",
      "code-language" : "text",
      "name" : {
        "en" : "Missing parentheses"
      },
      "description" : {
        "en" : "Missing parentheses caused unintended operator precedence"
      },
      "local_effect" : {
        "en" : "This is a result of a common misunderstanding of operator precedence. The incorrect expression can result in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 783,
        "impact" : "Medium",
        "subcategory" : "missing_parentheses",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "CONSTANT_EXPRESSION_RESULT",
      "subtype" : "operator_confusion",
      "code-language" : "text",
      "name" : {
        "en" : "Wrong operator used"
      },
      "description" : {
        "en" : "Wrong operator used in expression"
      },
      "local_effect" : {
        "en" : "Inadvertent use of the wrong operator results in a likely logic error. Common interchanges include bit-or and bit-and, left-shift and right-shift."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "operator_confusion",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "CONSTANT_EXPRESSION_RESULT",
      "subtype" : "result_independent_of_operands",
      "code-language" : "text",
      "name" : {
        "en" : "Operands don't affect result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "result_independent_of_operands",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "CONSTANT_EXPRESSION_RESULT",
      "subtype" : "same_on_both_sides",
      "code-language" : "text",
      "name" : {
        "en" : "Same on both sides"
      },
      "description" : {
        "en" : "The same expression occurs on both sides of an operator."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  It may result in the operator always evaluating to the same result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "same_on_both_sides",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "CONSTANT_EXPRESSION_RESULT",
      "subtype" : "unnecessary_op_assign",
      "code-language" : "text",
      "name" : {
        "en" : "Suspicious &= or |="
      },
      "description" : {
        "en" : "Using a bitwise assignment operator to assign a constant value"
      },
      "local_effect" : {
        "en" : "A simple assignment would have the same effect; may indicate a logic error, or only be a minor inefficiency."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "unnecessary_op_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "DEFAULT_ISSUE_TYPE",
      "subtype" : null,
      "code-language" : null,
      "name" : {
        "en" : "Other violation"
      },
      "description" : {
        "en" : "Unclassified violation"
      },
      "local_effect" : {
        "en" : "This violation is found by an unclassified checker, such as a Coverity SDK checker that implements a custom detection algorithm to uncover additional defects in source code."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "DEFAULT_ISSUE_TYPE",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Other violation"
      },
      "description" : {
        "en" : "Unclassified violation"
      },
      "local_effect" : {
        "en" : "This violation is found by an unclassified checker, such as a Coverity SDK checker that implements a custom detection algorithm to uncover additional defects in source code."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "DEFAULT_ISSUE_TYPE",
      "subtype" : null,
      "code-language" : "java",
      "name" : {
        "en" : "Other violation"
      },
      "description" : {
        "en" : "Unclassified violation"
      },
      "local_effect" : {
        "en" : "This violation is found by an unclassified checker, such as a Coverity SDK checker that implements a custom detection algorithm to uncover additional defects in source code."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "DEFAULT_ISSUE_TYPE",
      "subtype" : null,
      "code-language" : "c#",
      "name" : {
        "en" : "Other violation"
      },
      "description" : {
        "en" : "Unclassified violation"
      },
      "local_effect" : {
        "en" : "This violation is found by an unclassified checker, such as a Coverity SDK checker that implements a custom detection algorithm to uncover additional defects in source code."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "DEFAULT_ISSUE_TYPE",
      "subtype" : null,
      "code-language" : "javascript",
      "name" : {
        "en" : "Other violation"
      },
      "description" : {
        "en" : "Unclassified violation"
      },
      "local_effect" : {
        "en" : "This violation is found by an unclassified checker, such as a Coverity SDK checker that implements a custom detection algorithm to uncover additional defects in source code."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "DEFAULT_ISSUE_TYPE",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Other violation"
      },
      "description" : {
        "en" : "Unclassified violation"
      },
      "local_effect" : {
        "en" : "This violation is found by an unclassified checker, such as a Coverity SDK checker that implements a custom detection algorithm to uncover additional defects in source code."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "DEFAULT_ISSUE_TYPE",
      "subtype" : null,
      "code-language" : "php",
      "name" : {
        "en" : "Other violation"
      },
      "description" : {
        "en" : "Unclassified violation"
      },
      "local_effect" : {
        "en" : "This violation is found by an unclassified checker, such as a Coverity SDK checker that implements a custom detection algorithm to uncover additional defects in source code."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "DEFAULT_ISSUE_TYPE",
      "subtype" : null,
      "code-language" : "python",
      "name" : {
        "en" : "Other violation"
      },
      "description" : {
        "en" : "Unclassified violation"
      },
      "local_effect" : {
        "en" : "This violation is found by an unclassified checker, such as a Coverity SDK checker that implements a custom detection algorithm to uncover additional defects in source code."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "DEFAULT_ISSUE_TYPE",
      "subtype" : null,
      "code-language" : "ruby",
      "name" : {
        "en" : "Other violation"
      },
      "description" : {
        "en" : "Unclassified violation"
      },
      "local_effect" : {
        "en" : "This violation is found by an unclassified checker, such as a Coverity SDK checker that implements a custom detection algorithm to uncover additional defects in source code."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "DEFAULT_ISSUE_TYPE",
      "subtype" : null,
      "code-language" : "swift",
      "name" : {
        "en" : "Other violation"
      },
      "description" : {
        "en" : "Unclassified violation"
      },
      "local_effect" : {
        "en" : "This violation is found by an unclassified checker, such as a Coverity SDK checker that implements a custom detection algorithm to uncover additional defects in source code."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "DEFAULT_ISSUE_TYPE",
      "subtype" : null,
      "code-language" : "text",
      "name" : {
        "en" : "Other violation"
      },
      "description" : {
        "en" : "Unclassified violation"
      },
      "local_effect" : {
        "en" : "This violation is found by an unclassified checker, such as a Coverity SDK checker that implements a custom detection algorithm to uncover additional defects in source code."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "IDENTICAL_BRANCHES",
      "subtype" : "case",
      "code-language" : "swift",
      "name" : {
        "en" : "Identical code for different cases"
      },
      "description" : {
        "en" : "The same code is executed for two cases in the same switch statement"
      },
      "local_effect" : {
        "en" : "The case is redundant or can be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "case",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "IDENTICAL_BRANCHES",
      "subtype" : "chain",
      "code-language" : "swift",
      "name" : {
        "en" : "Identical code for different branches of an else-if chain"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The conditions could be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "chain",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "IDENTICAL_BRANCHES",
      "subtype" : "if",
      "code-language" : "swift",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "if",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "IDENTICAL_BRANCHES",
      "subtype" : "ternary",
      "code-language" : "swift",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "ternary",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "MISRA_C_2004_Rule_14.1",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Coding standard violation"
      },
      "description" : {
        "en" : "There shall be no unreachable code."
      },
      "local_effect" : {
        "en" : "MISRA Violation"
      },
      "origin" : "MISRA C-2004",
      "cim_checker_properties" : {
        "category" : "Coding standard violation",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false,
        "ruleStrength" : "Required"
      }
    },
    {
      "type" : "MISRA_Cpp_2008_Rule_15_1_1",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Coding standard violation"
      },
      "description" : {
        "en" : "The assignment-expression of a throw statement shall not itself cause an exception to be thrown."
      },
      "local_effect" : {
        "en" : "MISRA Violation"
      },
      "origin" : "MISRA C++-2008",
      "cim_checker_properties" : {
        "category" : "Coding standard violation",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false,
        "ruleStrength" : "Required"
      }
    },
    {
      "type" : "MISRA_Cpp_2008_Rule_15_3_1",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Coding standard violation"
      },
      "description" : {
        "en" : "Exceptions shall be raised only after start-up and before termination of the program."
      },
      "local_effect" : {
        "en" : "MISRA Violation"
      },
      "origin" : "MISRA C++-2008",
      "cim_checker_properties" : {
        "category" : "Coding standard violation",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false,
        "ruleStrength" : "Required"
      }
    },
    {
      "type" : "MISRA_Cpp_2008_Rule_15_3_2",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Coding standard violation"
      },
      "description" : {
        "en" : "There should be at least one exception handler to catch all otherwise unhandled exceptions."
      },
      "local_effect" : {
        "en" : "MISRA Violation"
      },
      "origin" : "MISRA C++-2008",
      "cim_checker_properties" : {
        "category" : "Coding standard violation",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false,
        "ruleStrength" : "Advisory"
      }
    },
    {
      "type" : "MISRA_Cpp_2008_Rule_15_3_4",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Coding standard violation"
      },
      "description" : {
        "en" : "Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point."
      },
      "local_effect" : {
        "en" : "MISRA Violation"
      },
      "origin" : "MISRA C++-2008",
      "cim_checker_properties" : {
        "category" : "Coding standard violation",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false,
        "ruleStrength" : "Required"
      }
    },
    {
      "type" : "MISRA_Cpp_2008_Rule_15_5_1",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Coding standard violation"
      },
      "description" : {
        "en" : "A class destructor shall not exit with an exception."
      },
      "local_effect" : {
        "en" : "MISRA Violation"
      },
      "origin" : "MISRA C++-2008",
      "cim_checker_properties" : {
        "category" : "Coding standard violation",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false,
        "ruleStrength" : "Required"
      }
    },
    {
      "type" : "MISRA_Cpp_2008_Rule_15_5_2",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Coding standard violation"
      },
      "description" : {
        "en" : "Where a function's declaration includes an exception specification, the function shall only be capable of throwing exceptions of the indicated type(s)."
      },
      "local_effect" : {
        "en" : "MISRA Violation"
      },
      "origin" : "MISRA C++-2008",
      "cim_checker_properties" : {
        "category" : "Coding standard violation",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false,
        "ruleStrength" : "Required"
      }
    },
    {
      "type" : "MISRA_Cpp_2008_Rule_15_5_3",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Coding standard violation"
      },
      "description" : {
        "en" : "The terminate() function shall not be called implicitly."
      },
      "local_effect" : {
        "en" : "MISRA Violation"
      },
      "origin" : "MISRA C++-2008",
      "cim_checker_properties" : {
        "category" : "Coding standard violation",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false,
        "ruleStrength" : "Required"
      }
    },
    {
      "type" : "NO_EFFECT",
      "subtype" : null,
      "code-language" : "python",
      "name" : {
        "en" : "Expression with no effect"
      },
      "description" : {
        "en" : "An expression is useless because it has no side effects and its result is ignored."
      },
      "local_effect" : {
        "en" : "Perhaps the code was intended to affect the behavior of the program, but it does not."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "NO_EFFECT",
      "subtype" : null,
      "code-language" : "swift",
      "name" : {
        "en" : "Expression with no effect"
      },
      "description" : {
        "en" : "An expression is useless because it has no side effects and its result is ignored."
      },
      "local_effect" : {
        "en" : "Perhaps the code was intended to affect the behavior of the program, but it does not."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "NO_EFFECT",
      "subtype" : "bool_switch",
      "code-language" : "python",
      "name" : {
        "en" : "Switch test assignment"
      },
      "description" : {
        "en" : "A boolean test within a switch condition is likely an intended assignment"
      },
      "local_effect" : {
        "en" : "The switch condition will evaluate to either 0 or 1, which is more easily written with an if statement."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 482,
        "impact" : "Medium",
        "subcategory" : "bool_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "NO_EFFECT",
      "subtype" : "self_assign",
      "code-language" : "python",
      "name" : {
        "en" : "Self assignment"
      },
      "description" : {
        "en" : "Assignment of a variable or expression to itself has no effect"
      },
      "local_effect" : {
        "en" : "The variable's value will not change, so the assignment has no effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 665,
        "impact" : "Medium",
        "subcategory" : "self_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "NO_EFFECT",
      "subtype" : "self_assign",
      "code-language" : "swift",
      "name" : {
        "en" : "Self assignment"
      },
      "description" : {
        "en" : "Assignment of a variable or expression to itself has no effect"
      },
      "local_effect" : {
        "en" : "The variable's value will not change, so the assignment has no effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 665,
        "impact" : "Medium",
        "subcategory" : "self_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PARSE_ERROR",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unrecoverable parse warning"
      },
      "description" : {
        "en" : "A parse error caused an entire compilation unit to be skipped by Coverity Static Analysis"
      },
      "local_effect" : {
        "en" : "The functions in the compilation unit will not be analyzed for other defects; any callers of these functions will not be able to use the summary of the skipped functions."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Parse warnings",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PARSE_ERROR",
      "subtype" : null,
      "code-language" : "swift",
      "name" : {
        "en" : "Unrecoverable parse warning"
      },
      "description" : {
        "en" : "A parse error caused an entire compilation unit to be skipped by Coverity Static Analysis"
      },
      "local_effect" : {
        "en" : "The functions in the compilation unit will not be analyzed for other defects; any callers of these functions will not be able to use the summary of the skipped functions."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Parse warnings",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.ASSIGN_WHERE_COMPARE_MEANT",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Assign instead of compare"
      },
      "description" : {
        "en" : "An assignment (=) occurs where compare (==) is probably intended"
      },
      "local_effect" : {
        "en" : "The variable will be assigned the value that it was intended to compare against, causing the result to always be true."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 481,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.BAD_CAST",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Lossy integer to pointer"
      },
      "description" : {
        "en" : "A cast from an integer to a pointer of narrower precision"
      },
      "local_effect" : {
        "en" : "Some bits of the integer value will be lost in the conversion, possibly producing a corrupt pointer value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 704,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.BAD_PRINTF_FORMAT_STRING",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Printf format string issue"
      },
      "description" : {
        "en" : "A printf format string contains an unrecognized format specifier"
      },
      "local_effect" : {
        "en" : "The format string may be interpreted incorrectly by printf, causing undefined behavior."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 628,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.BRANCH_PAST_INITIALIZATION",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Branch past initialization"
      },
      "description" : {
        "en" : "A goto jumps past the initialization of a variable"
      },
      "local_effect" : {
        "en" : "If the variable is used after the target, it will be uninitialized."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 457,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.CONVERSION_TO_POINTER_LOSES_BITS",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Lossy integer to pointer"
      },
      "description" : {
        "en" : "A cast from an integer to a pointer of narrower precision"
      },
      "local_effect" : {
        "en" : "Some bits of the integer value will be lost in the conversion, possibly producing a corrupt pointer value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 704,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.DIVIDE_BY_ZERO",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Divide by zero"
      },
      "description" : {
        "en" : "Divide by zero"
      },
      "local_effect" : {
        "en" : "The program will have undefined behavior, likely a crash."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 369,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.EXPR_HAS_NO_EFFECT",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Expression with no effect"
      },
      "description" : {
        "en" : "An expression with no side-effect or unintended effect indicates a possible logic flaw"
      },
      "local_effect" : {
        "en" : "The expression will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.INCLUDE_RECURSION",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Recursion in included headers"
      },
      "description" : {
        "en" : "Recursion in included header files"
      },
      "local_effect" : {
        "en" : "Compilation errors or even run-time errors (in the presence of function overloading) can result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Build system issues",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.INTEGER_OVERFLOW",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Integer overflow warning"
      },
      "description" : {
        "en" : "An integer overflow occurs at compile time when parsing this expression"
      },
      "local_effect" : {
        "en" : "The value of the constant expression may be an unexpected very small or negative value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 190,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.INTEGER_TOO_LARGE",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Integer overflow warning"
      },
      "description" : {
        "en" : "An integer overflow occurs at compile time when parsing this expression"
      },
      "local_effect" : {
        "en" : "The value of the constant expression may be an unexpected very small or negative value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 190,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.NON_CONST_PRINTF_FORMAT_STRING",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Non-constant format string"
      },
      "description" : {
        "en" : "A non-constant printf format string may be susceptible to format string attacks"
      },
      "local_effect" : {
        "en" : "If an attacker can affect the format string, they may leverage it to corrupt the stack and take over execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Security best practices violations",
        "cweCategory" : 134,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.PRINTF_ARG_MISMATCH",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Printf arg type mismatch"
      },
      "description" : {
        "en" : "A printf format string does not match the types of one of the arguments"
      },
      "local_effect" : {
        "en" : "The value will be misinterpreted by printf, causing incorrect output and possibly out-of-bounds memory access."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 686,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.RETURN_PTR_TO_LOCAL_TEMP",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Returning pointer to temp"
      },
      "description" : {
        "en" : "Returning a pointer to a temporary variable, which will be destroyed on function exit"
      },
      "local_effect" : {
        "en" : "The pointer will reference freed memory, causing a use-after-free in the caller if the pointer is ever used."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 562,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.SHIFT_COUNT_TOO_LARGE",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Integer overflow warning"
      },
      "description" : {
        "en" : "An integer overflow occurs at compile time when parsing this expression"
      },
      "local_effect" : {
        "en" : "The value of the constant expression may be an unexpected very small or negative value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 190,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.TOO_FEW_PRINTF_ARGS",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Printf arg count mismatch"
      },
      "description" : {
        "en" : "The number of arguments to printf does not match the format string"
      },
      "local_effect" : {
        "en" : "If there are too many arguments, some values will be ignored; if there are too few, undefined behavior may result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 685,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.TOO_MANY_PRINTF_ARGS",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Printf arg count mismatch"
      },
      "description" : {
        "en" : "The number of arguments to printf does not match the format string"
      },
      "local_effect" : {
        "en" : "If there are too many arguments, some values will be ignored; if there are too few, undefined behavior may result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 685,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "PW.UNSIGNED_COMPARE_WITH_NEGATIVE",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unsigned compared with neg"
      },
      "description" : {
        "en" : "An unsigned value, which can never be less than 0, is compared with a negative value"
      },
      "local_effect" : {
        "en" : "The condition will not ensure a constraint on the value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 570,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "array_compared_against_null",
      "subtype" : "no_effect",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Array compared against 0"
      },
      "description" : {
        "en" : "Array compared against NULL pointer"
      },
      "local_effect" : {
        "en" : "The address of an array is never NULL, so the comparison will always evaluate the same way."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "array_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "array_compared_against_null",
      "subtype" : "no_effect",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Array compared against 0"
      },
      "description" : {
        "en" : "Array compared against NULL pointer"
      },
      "local_effect" : {
        "en" : "The address of an array is never NULL, so the comparison will always evaluate the same way."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "array_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_compare",
      "subtype" : "address_of_function_with_zero",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Function address comparison"
      },
      "description" : {
        "en" : "Address of function compared to zero"
      },
      "local_effect" : {
        "en" : "The function is not called.  This may indicate missing function call arguments."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 628,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_compare",
      "subtype" : "address_of_function_with_zero",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Function address comparison"
      },
      "description" : {
        "en" : "Address of function compared to zero"
      },
      "local_effect" : {
        "en" : "The function is not called.  This may indicate missing function call arguments."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 628,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_compare",
      "subtype" : "comparator_misuse",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Misuse of memcmp-style function"
      },
      "description" : {
        "en" : "A memcmp-style function is used assuming that it returns -1, 0, or 1."
      },
      "local_effect" : {
        "en" : "The return value may be misinterpreted if the function returns an unexpected value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 253,
        "impact" : "Medium",
        "subcategory" : "comparator_misuse",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_compare",
      "subtype" : "comparator_misuse",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Misuse of memcmp-style function"
      },
      "description" : {
        "en" : "A memcmp-style function is used assuming that it returns -1, 0, or 1."
      },
      "local_effect" : {
        "en" : "The return value may be misinterpreted if the function returns an unexpected value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 253,
        "impact" : "Medium",
        "subcategory" : "comparator_misuse",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_compare",
      "subtype" : "inequality_against_null",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Inequality comparison against NULL"
      },
      "description" : {
        "en" : "Comparing a pointer against NULL using an operator such as < or >=."
      },
      "local_effect" : {
        "en" : "The expression will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "null_misuse",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_compare",
      "subtype" : "inequality_against_null",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Inequality comparison against NULL"
      },
      "description" : {
        "en" : "Comparing a pointer against NULL using an operator such as < or >=."
      },
      "local_effect" : {
        "en" : "The expression will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "null_misuse",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_compare",
      "subtype" : "misuse_of_not",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unintended comparison to logical negation"
      },
      "description" : {
        "en" : "Logical negation is applied to a comparison operand instead of the comparison result."
      },
      "local_effect" : {
        "en" : "The comparison may evaluate to an incorrect value, because the logical negation is applied to the left hand operand, not the comparison result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 783,
        "impact" : "Medium",
        "subcategory" : "misuse_of_not",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_compare",
      "subtype" : "misuse_of_not",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unintended comparison to logical negation"
      },
      "description" : {
        "en" : "Logical negation is applied to a comparison operand instead of the comparison result."
      },
      "local_effect" : {
        "en" : "The comparison may evaluate to an incorrect value, because the logical negation is applied to the left hand operand, not the comparison result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 783,
        "impact" : "Medium",
        "subcategory" : "misuse_of_not",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_compare",
      "subtype" : "pointer_with_string_literal",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Pointer comparison with string literal"
      },
      "description" : {
        "en" : "Comparing against the address of a string literal."
      },
      "local_effect" : {
        "en" : "The comparison evaluates to an incorrect value, because the strings' contents are ignored."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 597,
        "impact" : "Medium",
        "subcategory" : "string_lit_comparison",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_compare",
      "subtype" : "pointer_with_string_literal",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Pointer comparison with string literal"
      },
      "description" : {
        "en" : "Comparing against the address of a string literal."
      },
      "local_effect" : {
        "en" : "The comparison evaluates to an incorrect value, because the strings' contents are ignored."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 597,
        "impact" : "Medium",
        "subcategory" : "string_lit_comparison",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_free",
      "subtype" : "address_of_expression",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Free of address-of expression"
      },
      "description" : {
        "en" : "Free of an address-of expression, which can never be heap allocated"
      },
      "local_effect" : {
        "en" : "A non-heap pointer is placed on the free list, likely causing a crash later."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 590,
        "impact" : "High",
        "subcategory" : "address",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_free",
      "subtype" : "address_of_expression",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Free of address-of expression"
      },
      "description" : {
        "en" : "Free of an address-of expression, which can never be heap allocated"
      },
      "local_effect" : {
        "en" : "A non-heap pointer is placed on the free list, likely causing a crash later."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 590,
        "impact" : "High",
        "subcategory" : "address",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_free",
      "subtype" : "array",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Free of array-typed value"
      },
      "description" : {
        "en" : "Free of array-typed value"
      },
      "local_effect" : {
        "en" : "A pointer to the array is placed on the free list, likely causing a crash later; an array is not heap allocated by the program and, hence, cannot be freed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 590,
        "impact" : "High",
        "subcategory" : "array",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_free",
      "subtype" : "array",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Free of array-typed value"
      },
      "description" : {
        "en" : "Free of array-typed value"
      },
      "local_effect" : {
        "en" : "A pointer to the array is placed on the free list, likely causing a crash later; an array is not heap allocated by the program and, hence, cannot be freed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 590,
        "impact" : "High",
        "subcategory" : "array",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_free",
      "subtype" : "first_field_address",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Free of address-of first field"
      },
      "description" : {
        "en" : "Free of an address-of the first field of a struct"
      },
      "local_effect" : {
        "en" : "A non-heap pointer is placed on the free list, likely causing a crash later; on some platforms, this could be used deliberately since it is equivalent to freeing the struct itself."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 590,
        "impact" : "High",
        "subcategory" : "first_field_address",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_free",
      "subtype" : "first_field_address",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Free of address-of first field"
      },
      "description" : {
        "en" : "Free of an address-of the first field of a struct"
      },
      "local_effect" : {
        "en" : "A non-heap pointer is placed on the free list, likely causing a crash later; on some platforms, this could be used deliberately since it is equivalent to freeing the struct itself."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 590,
        "impact" : "High",
        "subcategory" : "first_field_address",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_free",
      "subtype" : "function_pointer",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Free of function pointer"
      },
      "description" : {
        "en" : "Free of function pointer"
      },
      "local_effect" : {
        "en" : "A pointer to the function's executable code is placed on the free list, likely causing a crash later; functions are not heap allocated and, hence, cannot be freed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 590,
        "impact" : "High",
        "subcategory" : "function_pointer",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_free",
      "subtype" : "function_pointer",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Free of function pointer"
      },
      "description" : {
        "en" : "Free of function pointer"
      },
      "local_effect" : {
        "en" : "A pointer to the function's executable code is placed on the free list, likely causing a crash later; functions are not heap allocated and, hence, cannot be freed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 590,
        "impact" : "High",
        "subcategory" : "function_pointer",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_free",
      "subtype" : "not_from_alloc",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Free of invalid pointer value"
      },
      "description" : {
        "en" : "Free of an pointer that was not returned from an allocation function"
      },
      "local_effect" : {
        "en" : "A pointer is erroneously placed on the system allocator's free list, likely causing a crash later."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 590,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_free",
      "subtype" : "not_from_alloc",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Free of invalid pointer value"
      },
      "description" : {
        "en" : "Free of an pointer that was not returned from an allocation function"
      },
      "local_effect" : {
        "en" : "A pointer is erroneously placed on the system allocator's free list, likely causing a crash later."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 590,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_free",
      "subtype" : "stack_allocated",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Free of stack-allocated memory"
      },
      "description" : {
        "en" : "Free of stack-allocated buffer"
      },
      "local_effect" : {
        "en" : "A non-heap pointer is placed on the free list, likely causing a crash later."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 590,
        "impact" : "High",
        "subcategory" : "alloca",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_free",
      "subtype" : "stack_allocated",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Free of stack-allocated memory"
      },
      "description" : {
        "en" : "Free of stack-allocated buffer"
      },
      "local_effect" : {
        "en" : "A non-heap pointer is placed on the free list, likely causing a crash later."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 590,
        "impact" : "High",
        "subcategory" : "alloca",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_lock_object",
      "subtype" : null,
      "code-language" : "java",
      "name" : {
        "en" : "Bad choice of lock object"
      },
      "description" : {
        "en" : "Locking upon an object which is a poor choice due to too broad, too narrow, or too unpredictable aliasing behavior."
      },
      "local_effect" : {
        "en" : "Data race condition"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 543,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_lock_object",
      "subtype" : null,
      "code-language" : "c#",
      "name" : {
        "en" : "Bad choice of lock object"
      },
      "description" : {
        "en" : "Locking upon an object which is a poor choice due to too broad, too narrow, or too unpredictable aliasing behavior."
      },
      "local_effect" : {
        "en" : "Data race condition"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 543,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_lock_object",
      "subtype" : "boxed_object",
      "code-language" : "java",
      "name" : {
        "en" : "Bad choice of lock object"
      },
      "description" : {
        "en" : "Using a boxed primitive as a lock may cause different locking behavior in different versions of the Java VM. locking behavior. It can also cause deadlocks or performance problems if a library also uses the boxed primitive as a lock."
      },
      "local_effect" : {
        "en" : "Potential system-dependent lock collisions"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Unreliable locking behavior",
        "cweCategory" : 543,
        "impact" : "High",
        "subcategory" : "boxed_lock",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_lock_object",
      "subtype" : "boxed_object",
      "code-language" : "c#",
      "name" : {
        "en" : "Bad choice of lock object"
      },
      "description" : {
        "en" : "Using a boxed primitive as a lock may cause different locking behavior in different versions of the Java VM. locking behavior. It can also cause deadlocks or performance problems if a library also uses the boxed primitive as a lock."
      },
      "local_effect" : {
        "en" : "Potential system-dependent lock collisions"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Unreliable locking behavior",
        "cweCategory" : 543,
        "impact" : "High",
        "subcategory" : "boxed_lock",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_lock_object",
      "subtype" : "interned_string",
      "code-language" : "java",
      "name" : {
        "en" : "Bad choice of lock object"
      },
      "description" : {
        "en" : "Using an interned string as a lock may cause deadlocks or performance problems if a library also uses the interned string as a lock."
      },
      "local_effect" : {
        "en" : "Potential lock collisions"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 543,
        "impact" : "Medium",
        "subcategory" : "interned_string_lock",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_lock_object",
      "subtype" : "interned_string",
      "code-language" : "c#",
      "name" : {
        "en" : "Bad choice of lock object"
      },
      "description" : {
        "en" : "Using an interned string as a lock may cause deadlocks or performance problems if a library also uses the interned string as a lock."
      },
      "local_effect" : {
        "en" : "Potential lock collisions"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 543,
        "impact" : "Medium",
        "subcategory" : "interned_string_lock",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_lock_object",
      "subtype" : "non_thread_shared_object",
      "code-language" : "java",
      "name" : {
        "en" : "Bad choice of lock object"
      },
      "description" : {
        "en" : "Using an object which is only accessible to a single thread as a lock provides no protection against race conditions."
      },
      "local_effect" : {
        "en" : "Lock provides no protection"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Unreliable locking behavior",
        "cweCategory" : 543,
        "impact" : "High",
        "subcategory" : "single_thread_lock",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_lock_object",
      "subtype" : "non_thread_shared_object",
      "code-language" : "c#",
      "name" : {
        "en" : "Bad choice of lock object"
      },
      "description" : {
        "en" : "Using an object which is only accessible to a single thread as a lock provides no protection against race conditions."
      },
      "local_effect" : {
        "en" : "Lock provides no protection"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Unreliable locking behavior",
        "cweCategory" : 543,
        "impact" : "High",
        "subcategory" : "single_thread_lock",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_override",
      "subtype" : "virtual_method_type_mismatch",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Failed to override method"
      },
      "description" : {
        "en" : "Virtual function does not override parent method because of type signature mismatch, usually due to const"
      },
      "local_effect" : {
        "en" : "The method will not be called when virtual dispatch is used, this may cause the class to not perform as expected."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Class hierarchy inconsistencies",
        "cweCategory" : 710,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_override",
      "subtype" : "virtual_method_type_mismatch",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Failed to override method"
      },
      "description" : {
        "en" : "Virtual function does not override parent method because of type signature mismatch, usually due to const"
      },
      "local_effect" : {
        "en" : "The method will not be called when virtual dispatch is used, this may cause the class to not perform as expected."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Class hierarchy inconsistencies",
        "cweCategory" : 710,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "bad_sizeof",
      "subtype" : "logic_error",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Incorrect sizeof expression"
      },
      "description" : {
        "en" : "The sizeof operator was applied to an unintended variable or expression, such as a pointer variable instead of its target"
      },
      "local_effect" : {
        "en" : "This is usually caused by a typo or a misunderstanding of the sizeof operator, which should be applied to the actual type whose size is desired. An incorrect sizeof value is used in further computation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 467,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_sizeof",
      "subtype" : "logic_error",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Incorrect sizeof expression"
      },
      "description" : {
        "en" : "The sizeof operator was applied to an unintended variable or expression, such as a pointer variable instead of its target"
      },
      "local_effect" : {
        "en" : "This is usually caused by a typo or a misunderstanding of the sizeof operator, which should be applied to the actual type whose size is desired. An incorrect sizeof value is used in further computation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 467,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_sizeof",
      "subtype" : "sizeof_ptr_expr",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Sizeof pointer expression"
      },
      "description" : {
        "en" : "The sizeof operator was applied to a pointer expression, which may not be intended"
      },
      "local_effect" : {
        "en" : "This is a suspicious usage that may be due to a typo or a misunderstanding of the sizeof operator, which should be applied to the target of the pointer. However, sometimes this usage is intentional."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 467,
        "impact" : "Medium",
        "subcategory" : "sizeof_ptr_expr",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "bad_sizeof",
      "subtype" : "sizeof_ptr_expr",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Sizeof pointer expression"
      },
      "description" : {
        "en" : "The sizeof operator was applied to a pointer expression, which may not be intended"
      },
      "local_effect" : {
        "en" : "This is a suspicious usage that may be due to a typo or a misunderstanding of the sizeof operator, which should be applied to the target of the pointer. However, sometimes this usage is intentional."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 467,
        "impact" : "Medium",
        "subcategory" : "sizeof_ptr_expr",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "call_super",
      "subtype" : "clone",
      "code-language" : "java",
      "name" : {
        "en" : "Failure to call super.clone()"
      },
      "description" : {
        "en" : "All implementations of Object.clone are required to call super.clone to allocate the new object"
      },
      "local_effect" : {
        "en" : "Failure to call super.clone may result in the wrong object type being created when cloning subclasses."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Class hierarchy inconsistencies",
        "cweCategory" : 580,
        "impact" : "Medium",
        "subcategory" : "clone",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "call_super",
      "subtype" : "finalize",
      "code-language" : "java",
      "name" : {
        "en" : "Failure to call super.finalize()"
      },
      "description" : {
        "en" : "It is good practice to call super.finalize in finalize methods"
      },
      "local_effect" : {
        "en" : "The superclass may not get a chance to finalize, possibly leaking resources."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Class hierarchy inconsistencies",
        "cweCategory" : 568,
        "impact" : "Medium",
        "subcategory" : "finalize",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "call_super",
      "subtype" : "inferred",
      "code-language" : "java",
      "name" : {
        "en" : "Missing call to superclass"
      },
      "description" : {
        "en" : "Overrider does not call the superclass method, even though most other overriders do"
      },
      "local_effect" : {
        "en" : "Whatever action the superclass method implements will not occur, if the superclass call is actually required."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Class hierarchy inconsistencies",
        "cweCategory" : 573,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "call_super",
      "subtype" : "inferred",
      "code-language" : "c#",
      "name" : {
        "en" : "Missing call to base class"
      },
      "description" : {
        "en" : "Overrider does not call the base class method, even though most other overriders do"
      },
      "local_effect" : {
        "en" : "Whatever action the base class method implements will not occur, if the base class call is actually required."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Class hierarchy inconsistencies",
        "cweCategory" : 573,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "char_io",
      "subtype" : "truncated",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Truncated stdio return value"
      },
      "description" : {
        "en" : "Stdio character-oriented I/O functions return int values such as EOF not representable by char variables"
      },
      "local_effect" : {
        "en" : "It will not be possible to distinguish between EOF and a valid character."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 197,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "char_io",
      "subtype" : "truncated",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Truncated stdio return value"
      },
      "description" : {
        "en" : "Stdio character-oriented I/O functions return int values such as EOF not representable by char variables"
      },
      "local_effect" : {
        "en" : "It will not be possible to distinguish between EOF and a valid character."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 197,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "com.bstr.conv",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "COM bad conversion to BSTR"
      },
      "description" : {
        "en" : "A wide character string cannot be converted to a BSTR because it lacks the hidden length field"
      },
      "local_effect" : {
        "en" : "Accessing a wchar_t as if it were a BSTR may read out of bounds memory or cause memory corruption."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "bit_and_with_zero",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Bitwise-and with zero"
      },
      "description" : {
        "en" : "Bitwise-and ('&amp;') operation applied to zero always produces zero"
      },
      "local_effect" : {
        "en" : "The expression's value is always zero; construct may indicate an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "bit_and_with_zero",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "bit_and_with_zero",
      "code-language" : "java",
      "name" : {
        "en" : "Bitwise-and with zero"
      },
      "description" : {
        "en" : "Bitwise-and ('&amp;') operation applied to zero always produces zero"
      },
      "local_effect" : {
        "en" : "The expression's value is always zero; construct may indicate an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "bit_and_with_zero",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "bit_and_with_zero",
      "code-language" : "c#",
      "name" : {
        "en" : "Bitwise-and with zero"
      },
      "description" : {
        "en" : "Bitwise-and ('&amp;') operation applied to zero always produces zero"
      },
      "local_effect" : {
        "en" : "The expression's value is always zero; construct may indicate an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "bit_and_with_zero",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "bit_and_with_zero",
      "code-language" : "javascript",
      "name" : {
        "en" : "Bitwise-and with zero"
      },
      "description" : {
        "en" : "Bitwise-and ('&amp;') operation applied to zero always produces zero"
      },
      "local_effect" : {
        "en" : "The expression's value is always zero; construct may indicate an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "bit_and_with_zero",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "bit_and_with_zero",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Bitwise-and with zero"
      },
      "description" : {
        "en" : "Bitwise-and ('&amp;') operation applied to zero always produces zero"
      },
      "local_effect" : {
        "en" : "The expression's value is always zero; construct may indicate an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "bit_and_with_zero",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "bit_and_with_zero",
      "code-language" : "php",
      "name" : {
        "en" : "Bitwise-and with zero"
      },
      "description" : {
        "en" : "Bitwise-and ('&amp;') operation applied to zero always produces zero"
      },
      "local_effect" : {
        "en" : "The expression's value is always zero; construct may indicate an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "bit_and_with_zero",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "bit_and_with_zero",
      "code-language" : "python",
      "name" : {
        "en" : "Bitwise-and with zero"
      },
      "description" : {
        "en" : "Bitwise-and ('&amp;') operation applied to zero always produces zero"
      },
      "local_effect" : {
        "en" : "The expression's value is always zero; construct may indicate an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "bit_and_with_zero",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "bit_and_with_zero",
      "code-language" : "ruby",
      "name" : {
        "en" : "Bitwise-and with zero"
      },
      "description" : {
        "en" : "Bitwise-and ('&amp;') operation applied to zero always produces zero"
      },
      "local_effect" : {
        "en" : "The expression's value is always zero; construct may indicate an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "bit_and_with_zero",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "bit_and_with_zero",
      "code-language" : "swift",
      "name" : {
        "en" : "Bitwise-and with zero"
      },
      "description" : {
        "en" : "Bitwise-and ('&amp;') operation applied to zero always produces zero"
      },
      "local_effect" : {
        "en" : "The expression's value is always zero; construct may indicate an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "bit_and_with_zero",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "extra_high_bits",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Extra high-order bits"
      },
      "description" : {
        "en" : "In an operation, the high-order bits of wider operand do not affect the narrower operand"
      },
      "local_effect" : {
        "en" : "An operation that disregards the high-order bits may lead to incorrect value to be used in a logical computation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "extra_high_bits",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "extra_high_bits",
      "code-language" : "java",
      "name" : {
        "en" : "Extra high-order bits"
      },
      "description" : {
        "en" : "In an operation, the high-order bits of wider operand do not affect the narrower operand"
      },
      "local_effect" : {
        "en" : "An operation that disregards the high-order bits may lead to incorrect value to be used in a logical computation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "extra_high_bits",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "extra_high_bits",
      "code-language" : "c#",
      "name" : {
        "en" : "Extra high-order bits"
      },
      "description" : {
        "en" : "In an operation, the high-order bits of wider operand do not affect the narrower operand"
      },
      "local_effect" : {
        "en" : "An operation that disregards the high-order bits may lead to incorrect value to be used in a logical computation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "extra_high_bits",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "extra_high_bits",
      "code-language" : "javascript",
      "name" : {
        "en" : "Extra high-order bits"
      },
      "description" : {
        "en" : "In an operation, the high-order bits of wider operand do not affect the narrower operand"
      },
      "local_effect" : {
        "en" : "An operation that disregards the high-order bits may lead to incorrect value to be used in a logical computation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "extra_high_bits",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "extra_high_bits",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Extra high-order bits"
      },
      "description" : {
        "en" : "In an operation, the high-order bits of wider operand do not affect the narrower operand"
      },
      "local_effect" : {
        "en" : "An operation that disregards the high-order bits may lead to incorrect value to be used in a logical computation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "extra_high_bits",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "extra_high_bits",
      "code-language" : "php",
      "name" : {
        "en" : "Extra high-order bits"
      },
      "description" : {
        "en" : "In an operation, the high-order bits of wider operand do not affect the narrower operand"
      },
      "local_effect" : {
        "en" : "An operation that disregards the high-order bits may lead to incorrect value to be used in a logical computation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "extra_high_bits",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "extra_high_bits",
      "code-language" : "python",
      "name" : {
        "en" : "Extra high-order bits"
      },
      "description" : {
        "en" : "In an operation, the high-order bits of wider operand do not affect the narrower operand"
      },
      "local_effect" : {
        "en" : "An operation that disregards the high-order bits may lead to incorrect value to be used in a logical computation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "extra_high_bits",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "extra_high_bits",
      "code-language" : "ruby",
      "name" : {
        "en" : "Extra high-order bits"
      },
      "description" : {
        "en" : "In an operation, the high-order bits of wider operand do not affect the narrower operand"
      },
      "local_effect" : {
        "en" : "An operation that disregards the high-order bits may lead to incorrect value to be used in a logical computation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "extra_high_bits",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logic_error",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Constant expression result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logic_error",
      "code-language" : "java",
      "name" : {
        "en" : "Constant expression result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logic_error",
      "code-language" : "c#",
      "name" : {
        "en" : "Constant expression result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logic_error",
      "code-language" : "javascript",
      "name" : {
        "en" : "Constant expression result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logic_error",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Constant expression result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logic_error",
      "code-language" : "php",
      "name" : {
        "en" : "Constant expression result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logic_error",
      "code-language" : "python",
      "name" : {
        "en" : "Constant expression result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logic_error",
      "code-language" : "ruby",
      "name" : {
        "en" : "Constant expression result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logical_vs_bitwise",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Logical vs. bitwise operator"
      },
      "description" : {
        "en" : "Logical operator used in place of bitwise operator or vice versa"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; inadvertent use of the wrong operator is a likely logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "logical_vs_bitwise",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logical_vs_bitwise",
      "code-language" : "java",
      "name" : {
        "en" : "Logical vs. bitwise operator"
      },
      "description" : {
        "en" : "Logical operator used in place of bitwise operator or vice versa"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; inadvertent use of the wrong operator is a likely logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "logical_vs_bitwise",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logical_vs_bitwise",
      "code-language" : "c#",
      "name" : {
        "en" : "Logical vs. bitwise operator"
      },
      "description" : {
        "en" : "Logical operator used in place of bitwise operator or vice versa"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; inadvertent use of the wrong operator is a likely logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "logical_vs_bitwise",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logical_vs_bitwise",
      "code-language" : "javascript",
      "name" : {
        "en" : "Logical vs. bitwise operator"
      },
      "description" : {
        "en" : "Logical operator used in place of bitwise operator or vice versa"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; inadvertent use of the wrong operator is a likely logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "logical_vs_bitwise",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logical_vs_bitwise",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Logical vs. bitwise operator"
      },
      "description" : {
        "en" : "Logical operator used in place of bitwise operator or vice versa"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; inadvertent use of the wrong operator is a likely logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "logical_vs_bitwise",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logical_vs_bitwise",
      "code-language" : "php",
      "name" : {
        "en" : "Logical vs. bitwise operator"
      },
      "description" : {
        "en" : "Logical operator used in place of bitwise operator or vice versa"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; inadvertent use of the wrong operator is a likely logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "logical_vs_bitwise",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logical_vs_bitwise",
      "code-language" : "python",
      "name" : {
        "en" : "Logical vs. bitwise operator"
      },
      "description" : {
        "en" : "Logical operator used in place of bitwise operator or vice versa"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; inadvertent use of the wrong operator is a likely logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "logical_vs_bitwise",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "logical_vs_bitwise",
      "code-language" : "ruby",
      "name" : {
        "en" : "Logical vs. bitwise operator"
      },
      "description" : {
        "en" : "Logical operator used in place of bitwise operator or vice versa"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; inadvertent use of the wrong operator is a likely logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "logical_vs_bitwise",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "missing_parentheses",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Missing parentheses"
      },
      "description" : {
        "en" : "Missing parentheses caused unintended operator precedence"
      },
      "local_effect" : {
        "en" : "This is a result of a common misunderstanding of operator precedence. The incorrect expression can result in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 783,
        "impact" : "Medium",
        "subcategory" : "missing_parentheses",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "missing_parentheses",
      "code-language" : "java",
      "name" : {
        "en" : "Missing parentheses"
      },
      "description" : {
        "en" : "Missing parentheses caused unintended operator precedence"
      },
      "local_effect" : {
        "en" : "This is a result of a common misunderstanding of operator precedence. The incorrect expression can result in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 783,
        "impact" : "Medium",
        "subcategory" : "missing_parentheses",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "missing_parentheses",
      "code-language" : "c#",
      "name" : {
        "en" : "Missing parentheses"
      },
      "description" : {
        "en" : "Missing parentheses caused unintended operator precedence"
      },
      "local_effect" : {
        "en" : "This is a result of a common misunderstanding of operator precedence. The incorrect expression can result in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 783,
        "impact" : "Medium",
        "subcategory" : "missing_parentheses",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "missing_parentheses",
      "code-language" : "javascript",
      "name" : {
        "en" : "Missing parentheses"
      },
      "description" : {
        "en" : "Missing parentheses caused unintended operator precedence"
      },
      "local_effect" : {
        "en" : "This is a result of a common misunderstanding of operator precedence. The incorrect expression can result in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 783,
        "impact" : "Medium",
        "subcategory" : "missing_parentheses",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "missing_parentheses",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Missing parentheses"
      },
      "description" : {
        "en" : "Missing parentheses caused unintended operator precedence"
      },
      "local_effect" : {
        "en" : "This is a result of a common misunderstanding of operator precedence. The incorrect expression can result in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 783,
        "impact" : "Medium",
        "subcategory" : "missing_parentheses",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "missing_parentheses",
      "code-language" : "php",
      "name" : {
        "en" : "Missing parentheses"
      },
      "description" : {
        "en" : "Missing parentheses caused unintended operator precedence"
      },
      "local_effect" : {
        "en" : "This is a result of a common misunderstanding of operator precedence. The incorrect expression can result in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 783,
        "impact" : "Medium",
        "subcategory" : "missing_parentheses",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "missing_parentheses",
      "code-language" : "python",
      "name" : {
        "en" : "Missing parentheses"
      },
      "description" : {
        "en" : "Missing parentheses caused unintended operator precedence"
      },
      "local_effect" : {
        "en" : "This is a result of a common misunderstanding of operator precedence. The incorrect expression can result in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 783,
        "impact" : "Medium",
        "subcategory" : "missing_parentheses",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "missing_parentheses",
      "code-language" : "ruby",
      "name" : {
        "en" : "Missing parentheses"
      },
      "description" : {
        "en" : "Missing parentheses caused unintended operator precedence"
      },
      "local_effect" : {
        "en" : "This is a result of a common misunderstanding of operator precedence. The incorrect expression can result in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 783,
        "impact" : "Medium",
        "subcategory" : "missing_parentheses",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "number_as_truth_value",
      "code-language" : "ruby",
      "name" : {
        "en" : "Number used as truth value"
      },
      "description" : {
        "en" : "A numerical value is used where a Boolean value is expected, and it will always evaluate to true."
      },
      "local_effect" : {
        "en" : "In the source language, a numerical expression used as a truth value always evaluates to true; either a comparison operation is missing or the conditional can be removed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "number_as_truth_value",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "operator_confusion",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Wrong operator used"
      },
      "description" : {
        "en" : "Wrong operator used in expression"
      },
      "local_effect" : {
        "en" : "Inadvertent use of the wrong operator results in a likely logic error. Common interchanges include bit-or and bit-and, left-shift and right-shift."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "operator_confusion",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "operator_confusion",
      "code-language" : "java",
      "name" : {
        "en" : "Wrong operator used"
      },
      "description" : {
        "en" : "Wrong operator used in expression"
      },
      "local_effect" : {
        "en" : "Inadvertent use of the wrong operator results in a likely logic error. Common interchanges include bit-or and bit-and, left-shift and right-shift."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "operator_confusion",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "operator_confusion",
      "code-language" : "c#",
      "name" : {
        "en" : "Wrong operator used"
      },
      "description" : {
        "en" : "Wrong operator used in expression"
      },
      "local_effect" : {
        "en" : "Inadvertent use of the wrong operator results in a likely logic error. Common interchanges include bit-or and bit-and, left-shift and right-shift."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "operator_confusion",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "operator_confusion",
      "code-language" : "javascript",
      "name" : {
        "en" : "Wrong operator used"
      },
      "description" : {
        "en" : "Wrong operator used in expression"
      },
      "local_effect" : {
        "en" : "Inadvertent use of the wrong operator results in a likely logic error. Common interchanges include bit-or and bit-and, left-shift and right-shift."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "operator_confusion",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "operator_confusion",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Wrong operator used"
      },
      "description" : {
        "en" : "Wrong operator used in expression"
      },
      "local_effect" : {
        "en" : "Inadvertent use of the wrong operator results in a likely logic error. Common interchanges include bit-or and bit-and, left-shift and right-shift."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "operator_confusion",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "operator_confusion",
      "code-language" : "php",
      "name" : {
        "en" : "Wrong operator used"
      },
      "description" : {
        "en" : "Wrong operator used in expression"
      },
      "local_effect" : {
        "en" : "Inadvertent use of the wrong operator results in a likely logic error. Common interchanges include bit-or and bit-and, left-shift and right-shift."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "operator_confusion",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "operator_confusion",
      "code-language" : "python",
      "name" : {
        "en" : "Wrong operator used"
      },
      "description" : {
        "en" : "Wrong operator used in expression"
      },
      "local_effect" : {
        "en" : "Inadvertent use of the wrong operator results in a likely logic error. Common interchanges include bit-or and bit-and, left-shift and right-shift."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "operator_confusion",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "operator_confusion",
      "code-language" : "ruby",
      "name" : {
        "en" : "Wrong operator used"
      },
      "description" : {
        "en" : "Wrong operator used in expression"
      },
      "local_effect" : {
        "en" : "Inadvertent use of the wrong operator results in a likely logic error. Common interchanges include bit-or and bit-and, left-shift and right-shift."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "operator_confusion",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "operator_confusion",
      "code-language" : "swift",
      "name" : {
        "en" : "Wrong operator used"
      },
      "description" : {
        "en" : "Wrong operator used in expression"
      },
      "local_effect" : {
        "en" : "Inadvertent use of the wrong operator results in a likely logic error. Common interchanges include bit-or and bit-and, left-shift and right-shift."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "operator_confusion",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "pointless_string_compare",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Pointless string comparison"
      },
      "description" : {
        "en" : "A string is compared against itself with strcmp or strncmp."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  The comparison will always return zero."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "pointless_string_compare",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "pointless_string_compare",
      "code-language" : "javascript",
      "name" : {
        "en" : "Pointless string comparison"
      },
      "description" : {
        "en" : "A string is compared against itself with strcmp or strncmp."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  The comparison will always return zero."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "pointless_string_compare",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "pointless_string_compare",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Pointless string comparison"
      },
      "description" : {
        "en" : "A string is compared against itself with strcmp or strncmp."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  The comparison will always return zero."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "pointless_string_compare",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "pointless_string_compare",
      "code-language" : "php",
      "name" : {
        "en" : "Pointless string comparison"
      },
      "description" : {
        "en" : "A string is compared against itself with strcmp or strncmp."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  The comparison will always return zero."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "pointless_string_compare",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "pointless_string_compare",
      "code-language" : "python",
      "name" : {
        "en" : "Pointless string comparison"
      },
      "description" : {
        "en" : "A string is compared against itself with strcmp or strncmp."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  The comparison will always return zero."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "pointless_string_compare",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "pointless_string_compare",
      "code-language" : "ruby",
      "name" : {
        "en" : "Pointless string comparison"
      },
      "description" : {
        "en" : "A string is compared against itself with strcmp or strncmp."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  The comparison will always return zero."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "pointless_string_compare",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "result_independent_of_operands",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Operands don't affect result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "result_independent_of_operands",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "result_independent_of_operands",
      "code-language" : "java",
      "name" : {
        "en" : "Operands don't affect result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "result_independent_of_operands",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "result_independent_of_operands",
      "code-language" : "c#",
      "name" : {
        "en" : "Operands don't affect result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "result_independent_of_operands",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "result_independent_of_operands",
      "code-language" : "javascript",
      "name" : {
        "en" : "Operands don't affect result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "result_independent_of_operands",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "result_independent_of_operands",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Operands don't affect result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "result_independent_of_operands",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "result_independent_of_operands",
      "code-language" : "php",
      "name" : {
        "en" : "Operands don't affect result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "result_independent_of_operands",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "result_independent_of_operands",
      "code-language" : "python",
      "name" : {
        "en" : "Operands don't affect result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "result_independent_of_operands",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "result_independent_of_operands",
      "code-language" : "ruby",
      "name" : {
        "en" : "Operands don't affect result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "result_independent_of_operands",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "result_independent_of_operands",
      "code-language" : "swift",
      "name" : {
        "en" : "Operands don't affect result"
      },
      "description" : {
        "en" : "An operation with non-constant operands that computes a result with constant value"
      },
      "local_effect" : {
        "en" : "The expression's value does not depend on the operands; often, this represents an inadvertent logic error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "result_independent_of_operands",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "same_on_both_sides",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Same on both sides"
      },
      "description" : {
        "en" : "The same expression occurs on both sides of an operator."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  It may result in the operator always evaluating to the same result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "same_on_both_sides",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "same_on_both_sides",
      "code-language" : "java",
      "name" : {
        "en" : "Same on both sides"
      },
      "description" : {
        "en" : "The same expression occurs on both sides of an operator."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  It may result in the operator always evaluating to the same result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "same_on_both_sides",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "same_on_both_sides",
      "code-language" : "c#",
      "name" : {
        "en" : "Same on both sides"
      },
      "description" : {
        "en" : "The same expression occurs on both sides of an operator."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  It may result in the operator always evaluating to the same result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "same_on_both_sides",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "same_on_both_sides",
      "code-language" : "javascript",
      "name" : {
        "en" : "Same on both sides"
      },
      "description" : {
        "en" : "The same expression occurs on both sides of an operator."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  It may result in the operator always evaluating to the same result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "same_on_both_sides",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "same_on_both_sides",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Same on both sides"
      },
      "description" : {
        "en" : "The same expression occurs on both sides of an operator."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  It may result in the operator always evaluating to the same result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "same_on_both_sides",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "same_on_both_sides",
      "code-language" : "php",
      "name" : {
        "en" : "Same on both sides"
      },
      "description" : {
        "en" : "The same expression occurs on both sides of an operator."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  It may result in the operator always evaluating to the same result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "same_on_both_sides",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "same_on_both_sides",
      "code-language" : "python",
      "name" : {
        "en" : "Same on both sides"
      },
      "description" : {
        "en" : "The same expression occurs on both sides of an operator."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  It may result in the operator always evaluating to the same result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "same_on_both_sides",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "same_on_both_sides",
      "code-language" : "ruby",
      "name" : {
        "en" : "Same on both sides"
      },
      "description" : {
        "en" : "The same expression occurs on both sides of an operator."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  It may result in the operator always evaluating to the same result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "same_on_both_sides",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "same_on_both_sides",
      "code-language" : "swift",
      "name" : {
        "en" : "Same on both sides"
      },
      "description" : {
        "en" : "The same expression occurs on both sides of an operator."
      },
      "local_effect" : {
        "en" : "This is often the result of a copy and paste error.  It may result in the operator always evaluating to the same result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "same_on_both_sides",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "typeof_misuse",
      "code-language" : "javascript",
      "name" : {
        "en" : "Misuse of typeof"
      },
      "description" : {
        "en" : "Meaningless check against the result of a typeof operation"
      },
      "local_effect" : {
        "en" : "The code's behavior is not affected by the operand of typeof, so the code might not work as intended."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "typeof_misuse",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "unnecessary_op_assign",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Suspicious &= or |="
      },
      "description" : {
        "en" : "Using a bitwise assignment operator to assign a constant value"
      },
      "local_effect" : {
        "en" : "A simple assignment would have the same effect; may indicate a logic error, or only be a minor inefficiency."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "unnecessary_op_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "unnecessary_op_assign",
      "code-language" : "java",
      "name" : {
        "en" : "Suspicious &= or |="
      },
      "description" : {
        "en" : "Using a bitwise assignment operator to assign a constant value"
      },
      "local_effect" : {
        "en" : "A simple assignment would have the same effect; may indicate a logic error, or only be a minor inefficiency."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "unnecessary_op_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "unnecessary_op_assign",
      "code-language" : "c#",
      "name" : {
        "en" : "Suspicious &= or |="
      },
      "description" : {
        "en" : "Using a bitwise assignment operator to assign a constant value"
      },
      "local_effect" : {
        "en" : "A simple assignment would have the same effect; may indicate a logic error, or only be a minor inefficiency."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "unnecessary_op_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "unnecessary_op_assign",
      "code-language" : "javascript",
      "name" : {
        "en" : "Suspicious &= or |="
      },
      "description" : {
        "en" : "Using a bitwise assignment operator to assign a constant value"
      },
      "local_effect" : {
        "en" : "A simple assignment would have the same effect; may indicate a logic error, or only be a minor inefficiency."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "unnecessary_op_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "unnecessary_op_assign",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Suspicious &= or |="
      },
      "description" : {
        "en" : "Using a bitwise assignment operator to assign a constant value"
      },
      "local_effect" : {
        "en" : "A simple assignment would have the same effect; may indicate a logic error, or only be a minor inefficiency."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "unnecessary_op_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "unnecessary_op_assign",
      "code-language" : "php",
      "name" : {
        "en" : "Suspicious &= or |="
      },
      "description" : {
        "en" : "Using a bitwise assignment operator to assign a constant value"
      },
      "local_effect" : {
        "en" : "A simple assignment would have the same effect; may indicate a logic error, or only be a minor inefficiency."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "unnecessary_op_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "unnecessary_op_assign",
      "code-language" : "python",
      "name" : {
        "en" : "Suspicious &= or |="
      },
      "description" : {
        "en" : "Using a bitwise assignment operator to assign a constant value"
      },
      "local_effect" : {
        "en" : "A simple assignment would have the same effect; may indicate a logic error, or only be a minor inefficiency."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "unnecessary_op_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "unnecessary_op_assign",
      "code-language" : "ruby",
      "name" : {
        "en" : "Suspicious &= or |="
      },
      "description" : {
        "en" : "Using a bitwise assignment operator to assign a constant value"
      },
      "local_effect" : {
        "en" : "A simple assignment would have the same effect; may indicate a logic error, or only be a minor inefficiency."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "unnecessary_op_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "constant_expression_result",
      "subtype" : "unnecessary_op_assign",
      "code-language" : "swift",
      "name" : {
        "en" : "Suspicious &= or |="
      },
      "description" : {
        "en" : "Using a bitwise assignment operator to assign a constant value"
      },
      "local_effect" : {
        "en" : "A simple assignment would have the same effect; may indicate a logic error, or only be a minor inefficiency."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "unnecessary_op_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "copy_paste_error",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Copy-paste error"
      },
      "description" : {
        "en" : "A copied piece of code is inconsistent with the original"
      },
      "local_effect" : {
        "en" : "The copied code will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "copy_paste_error",
      "subtype" : null,
      "code-language" : "java",
      "name" : {
        "en" : "Copy-paste error"
      },
      "description" : {
        "en" : "A copied piece of code is inconsistent with the original"
      },
      "local_effect" : {
        "en" : "The copied code will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "copy_paste_error",
      "subtype" : null,
      "code-language" : "c#",
      "name" : {
        "en" : "Copy-paste error"
      },
      "description" : {
        "en" : "A copied piece of code is inconsistent with the original"
      },
      "local_effect" : {
        "en" : "The copied code will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "copy_paste_error",
      "subtype" : null,
      "code-language" : "javascript",
      "name" : {
        "en" : "Copy-paste error"
      },
      "description" : {
        "en" : "A copied piece of code is inconsistent with the original"
      },
      "local_effect" : {
        "en" : "The copied code will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "copy_paste_error",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Copy-paste error"
      },
      "description" : {
        "en" : "A copied piece of code is inconsistent with the original"
      },
      "local_effect" : {
        "en" : "The copied code will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "copy_paste_error",
      "subtype" : null,
      "code-language" : "php",
      "name" : {
        "en" : "Copy-paste error"
      },
      "description" : {
        "en" : "A copied piece of code is inconsistent with the original"
      },
      "local_effect" : {
        "en" : "The copied code will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "copy_paste_error",
      "subtype" : null,
      "code-language" : "python",
      "name" : {
        "en" : "Copy-paste error"
      },
      "description" : {
        "en" : "A copied piece of code is inconsistent with the original"
      },
      "local_effect" : {
        "en" : "The copied code will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "copy_paste_error",
      "subtype" : null,
      "code-language" : "ruby",
      "name" : {
        "en" : "Copy-paste error"
      },
      "description" : {
        "en" : "A copied piece of code is inconsistent with the original"
      },
      "local_effect" : {
        "en" : "The copied code will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "copy_paste_error",
      "subtype" : null,
      "code-language" : "swift",
      "name" : {
        "en" : "Copy-paste error"
      },
      "description" : {
        "en" : "A copied piece of code is inconsistent with the original"
      },
      "local_effect" : {
        "en" : "The copied code will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "dead_wait",
      "subtype" : "bad_check_of_wait_condition",
      "code-language" : "java",
      "name" : {
        "en" : "Indefinite wait"
      },
      "description" : {
        "en" : "A thread waits for a thread-shared condition which may have already been satisfied, causing a hang."
      },
      "local_effect" : {
        "en" : "This thread can wait after its wait condition has been satisfied, causing it to wait needlessly, perhaps forever."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : null,
        "impact" : "High",
        "subcategory" : "dead_wait",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_case_in_switch",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Dead case in switch"
      },
      "description" : {
        "en" : "Switch never goes directly to this case"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches this switch statement, the value cannot be equal to the given case. The code at the case is not dead, because it can be reached by falling through from a previous case."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_case_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_case_in_switch",
      "code-language" : "java",
      "name" : {
        "en" : "Dead case in switch"
      },
      "description" : {
        "en" : "Switch never goes directly to this case"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches this switch statement, the value cannot be equal to the given case. The code at the case is not dead, because it can be reached by falling through from a previous case."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_case_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_case_in_switch",
      "code-language" : "c#",
      "name" : {
        "en" : "Dead case in switch"
      },
      "description" : {
        "en" : "Switch never goes directly to this case"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches this switch statement, the value cannot be equal to the given case. The code at the case is not dead, because it can be reached by falling through from a previous case."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_case_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_case_in_switch",
      "code-language" : "javascript",
      "name" : {
        "en" : "Dead case in switch"
      },
      "description" : {
        "en" : "Switch never goes directly to this case"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches this switch statement, the value cannot be equal to the given case. The code at the case is not dead, because it can be reached by falling through from a previous case."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_case_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_case_in_switch",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Dead case in switch"
      },
      "description" : {
        "en" : "Switch never goes directly to this case"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches this switch statement, the value cannot be equal to the given case. The code at the case is not dead, because it can be reached by falling through from a previous case."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_case_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_case_in_switch",
      "code-language" : "php",
      "name" : {
        "en" : "Dead case in switch"
      },
      "description" : {
        "en" : "Switch never goes directly to this case"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches this switch statement, the value cannot be equal to the given case. The code at the case is not dead, because it can be reached by falling through from a previous case."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_case_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_case_in_switch",
      "code-language" : "python",
      "name" : {
        "en" : "Dead case in switch"
      },
      "description" : {
        "en" : "Switch never goes directly to this case"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches this switch statement, the value cannot be equal to the given case. The code at the case is not dead, because it can be reached by falling through from a previous case."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_case_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_case_in_switch",
      "code-language" : "ruby",
      "name" : {
        "en" : "Dead case in switch"
      },
      "description" : {
        "en" : "Switch never goes directly to this case"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches this switch statement, the value cannot be equal to the given case. The code at the case is not dead, because it can be reached by falling through from a previous case."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_case_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_case_in_switch",
      "code-language" : "swift",
      "name" : {
        "en" : "Dead case in switch"
      },
      "description" : {
        "en" : "Switch never goes directly to this case"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches this switch statement, the value cannot be equal to the given case. The code at the case is not dead, because it can be reached by falling through from a previous case."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_case_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_default_in_switch",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Dead default in switch"
      },
      "description" : {
        "en" : "Default in switch statement is dead code"
      },
      "local_effect" : {
        "en" : "The statements in the default case are never executed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_default_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_default_in_switch",
      "code-language" : "java",
      "name" : {
        "en" : "Dead default in switch"
      },
      "description" : {
        "en" : "Default in switch statement is dead code"
      },
      "local_effect" : {
        "en" : "The statements in the default case are never executed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_default_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_default_in_switch",
      "code-language" : "c#",
      "name" : {
        "en" : "Dead default in switch"
      },
      "description" : {
        "en" : "Default in switch statement is dead code"
      },
      "local_effect" : {
        "en" : "The statements in the default case are never executed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_default_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_default_in_switch",
      "code-language" : "javascript",
      "name" : {
        "en" : "Dead default in switch"
      },
      "description" : {
        "en" : "Default in switch statement is dead code"
      },
      "local_effect" : {
        "en" : "The statements in the default case are never executed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_default_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_default_in_switch",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Dead default in switch"
      },
      "description" : {
        "en" : "Default in switch statement is dead code"
      },
      "local_effect" : {
        "en" : "The statements in the default case are never executed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_default_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_default_in_switch",
      "code-language" : "php",
      "name" : {
        "en" : "Dead default in switch"
      },
      "description" : {
        "en" : "Default in switch statement is dead code"
      },
      "local_effect" : {
        "en" : "The statements in the default case are never executed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_default_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_default_in_switch",
      "code-language" : "python",
      "name" : {
        "en" : "Dead default in switch"
      },
      "description" : {
        "en" : "Default in switch statement is dead code"
      },
      "local_effect" : {
        "en" : "The statements in the default case are never executed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_default_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_default_in_switch",
      "code-language" : "ruby",
      "name" : {
        "en" : "Dead default in switch"
      },
      "description" : {
        "en" : "Default in switch statement is dead code"
      },
      "local_effect" : {
        "en" : "The statements in the default case are never executed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_default_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "dead_default_in_switch",
      "code-language" : "swift",
      "name" : {
        "en" : "Dead default in switch"
      },
      "description" : {
        "en" : "Default in switch statement is dead code"
      },
      "local_effect" : {
        "en" : "The statements in the default case are never executed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "dead_default_in_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "effectively_constant",
      "code-language" : "c/c++",
      "name" : {
        "en" : "'Constant' variable guards dead code"
      },
      "description" : {
        "en" : "Variable assigned once to a constant guards dead code."
      },
      "local_effect" : {
        "en" : "A variable being assigned only once may be intentionally guarding disabled code, or it may represent incomplete logic where a missing assignment would make the variable not be constant."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "effectively_constant",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "effectively_constant",
      "code-language" : "java",
      "name" : {
        "en" : "'Constant' variable guards dead code"
      },
      "description" : {
        "en" : "Variable assigned once to a constant guards dead code."
      },
      "local_effect" : {
        "en" : "A variable being assigned only once may be intentionally guarding disabled code, or it may represent incomplete logic where a missing assignment would make the variable not be constant."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "effectively_constant",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "effectively_constant",
      "code-language" : "c#",
      "name" : {
        "en" : "'Constant' variable guards dead code"
      },
      "description" : {
        "en" : "Variable assigned once to a constant guards dead code."
      },
      "local_effect" : {
        "en" : "A variable being assigned only once may be intentionally guarding disabled code, or it may represent incomplete logic where a missing assignment would make the variable not be constant."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "effectively_constant",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "effectively_constant",
      "code-language" : "javascript",
      "name" : {
        "en" : "'Constant' variable guards dead code"
      },
      "description" : {
        "en" : "Variable assigned once to a constant guards dead code."
      },
      "local_effect" : {
        "en" : "A variable being assigned only once may be intentionally guarding disabled code, or it may represent incomplete logic where a missing assignment would make the variable not be constant."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "effectively_constant",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "effectively_constant",
      "code-language" : "objective-c",
      "name" : {
        "en" : "'Constant' variable guards dead code"
      },
      "description" : {
        "en" : "Variable assigned once to a constant guards dead code."
      },
      "local_effect" : {
        "en" : "A variable being assigned only once may be intentionally guarding disabled code, or it may represent incomplete logic where a missing assignment would make the variable not be constant."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "effectively_constant",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "effectively_constant",
      "code-language" : "php",
      "name" : {
        "en" : "'Constant' variable guards dead code"
      },
      "description" : {
        "en" : "Variable assigned once to a constant guards dead code."
      },
      "local_effect" : {
        "en" : "A variable being assigned only once may be intentionally guarding disabled code, or it may represent incomplete logic where a missing assignment would make the variable not be constant."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "effectively_constant",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "effectively_constant",
      "code-language" : "python",
      "name" : {
        "en" : "'Constant' variable guards dead code"
      },
      "description" : {
        "en" : "Variable assigned once to a constant guards dead code."
      },
      "local_effect" : {
        "en" : "A variable being assigned only once may be intentionally guarding disabled code, or it may represent incomplete logic where a missing assignment would make the variable not be constant."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "effectively_constant",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "effectively_constant",
      "code-language" : "ruby",
      "name" : {
        "en" : "'Constant' variable guards dead code"
      },
      "description" : {
        "en" : "Variable assigned once to a constant guards dead code."
      },
      "local_effect" : {
        "en" : "A variable being assigned only once may be intentionally guarding disabled code, or it may represent incomplete logic where a missing assignment would make the variable not be constant."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "effectively_constant",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "effectively_constant",
      "code-language" : "swift",
      "name" : {
        "en" : "'Constant' variable guards dead code"
      },
      "description" : {
        "en" : "Variable assigned once to a constant guards dead code."
      },
      "local_effect" : {
        "en" : "A variable being assigned only once may be intentionally guarding disabled code, or it may represent incomplete logic where a missing assignment would make the variable not be constant."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "effectively_constant",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "logical_contradiction",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Logically dead code"
      },
      "description" : {
        "en" : "Code can never be reached because of a logical contradiction"
      },
      "local_effect" : {
        "en" : "The indicated dead code may have performed some action; that action will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "logical_contradiction",
      "code-language" : "java",
      "name" : {
        "en" : "Logically dead code"
      },
      "description" : {
        "en" : "Code can never be reached because of a logical contradiction"
      },
      "local_effect" : {
        "en" : "The indicated dead code may have performed some action; that action will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "logical_contradiction",
      "code-language" : "c#",
      "name" : {
        "en" : "Logically dead code"
      },
      "description" : {
        "en" : "Code can never be reached because of a logical contradiction"
      },
      "local_effect" : {
        "en" : "The indicated dead code may have performed some action; that action will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "logical_contradiction",
      "code-language" : "javascript",
      "name" : {
        "en" : "Logically dead code"
      },
      "description" : {
        "en" : "Code can never be reached because of a logical contradiction"
      },
      "local_effect" : {
        "en" : "The indicated dead code may have performed some action; that action will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "logical_contradiction",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Logically dead code"
      },
      "description" : {
        "en" : "Code can never be reached because of a logical contradiction"
      },
      "local_effect" : {
        "en" : "The indicated dead code may have performed some action; that action will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "logical_contradiction",
      "code-language" : "php",
      "name" : {
        "en" : "Logically dead code"
      },
      "description" : {
        "en" : "Code can never be reached because of a logical contradiction"
      },
      "local_effect" : {
        "en" : "The indicated dead code may have performed some action; that action will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "logical_contradiction",
      "code-language" : "python",
      "name" : {
        "en" : "Logically dead code"
      },
      "description" : {
        "en" : "Code can never be reached because of a logical contradiction"
      },
      "local_effect" : {
        "en" : "The indicated dead code may have performed some action; that action will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "logical_contradiction",
      "code-language" : "ruby",
      "name" : {
        "en" : "Logically dead code"
      },
      "description" : {
        "en" : "Code can never be reached because of a logical contradiction"
      },
      "local_effect" : {
        "en" : "The indicated dead code may have performed some action; that action will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "logical_contradiction",
      "code-language" : "swift",
      "name" : {
        "en" : "Logically dead code"
      },
      "description" : {
        "en" : "Code can never be reached because of a logical contradiction"
      },
      "local_effect" : {
        "en" : "The indicated dead code may have performed some action; that action will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "redundant_test",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Redundant test"
      },
      "description" : {
        "en" : "Test always evaluates the same"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches the test of this condition there is only one possible outcome for the test.  The code at the destination of this branch is not dead, either because this condition is always true or because there is at least one other branch that reaches it."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "redundant_test",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "redundant_test",
      "code-language" : "java",
      "name" : {
        "en" : "Redundant test"
      },
      "description" : {
        "en" : "Test always evaluates the same"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches the test of this condition there is only one possible outcome for the test.  The code at the destination of this branch is not dead, either because this condition is always true or because there is at least one other branch that reaches it."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "redundant_test",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "redundant_test",
      "code-language" : "c#",
      "name" : {
        "en" : "Redundant test"
      },
      "description" : {
        "en" : "Test always evaluates the same"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches the test of this condition there is only one possible outcome for the test.  The code at the destination of this branch is not dead, either because this condition is always true or because there is at least one other branch that reaches it."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "redundant_test",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "redundant_test",
      "code-language" : "javascript",
      "name" : {
        "en" : "Redundant test"
      },
      "description" : {
        "en" : "Test always evaluates the same"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches the test of this condition there is only one possible outcome for the test.  The code at the destination of this branch is not dead, either because this condition is always true or because there is at least one other branch that reaches it."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "redundant_test",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "redundant_test",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Redundant test"
      },
      "description" : {
        "en" : "Test always evaluates the same"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches the test of this condition there is only one possible outcome for the test.  The code at the destination of this branch is not dead, either because this condition is always true or because there is at least one other branch that reaches it."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "redundant_test",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "redundant_test",
      "code-language" : "php",
      "name" : {
        "en" : "Redundant test"
      },
      "description" : {
        "en" : "Test always evaluates the same"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches the test of this condition there is only one possible outcome for the test.  The code at the destination of this branch is not dead, either because this condition is always true or because there is at least one other branch that reaches it."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "redundant_test",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "redundant_test",
      "code-language" : "python",
      "name" : {
        "en" : "Redundant test"
      },
      "description" : {
        "en" : "Test always evaluates the same"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches the test of this condition there is only one possible outcome for the test.  The code at the destination of this branch is not dead, either because this condition is always true or because there is at least one other branch that reaches it."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "redundant_test",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "redundant_test",
      "code-language" : "ruby",
      "name" : {
        "en" : "Redundant test"
      },
      "description" : {
        "en" : "Test always evaluates the same"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches the test of this condition there is only one possible outcome for the test.  The code at the destination of this branch is not dead, either because this condition is always true or because there is at least one other branch that reaches it."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "redundant_test",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadcode",
      "subtype" : "redundant_test",
      "code-language" : "swift",
      "name" : {
        "en" : "Redundant test"
      },
      "description" : {
        "en" : "Test always evaluates the same"
      },
      "local_effect" : {
        "en" : "By the time the program execution reaches the test of this condition there is only one possible outcome for the test.  The code at the destination of this branch is not dead, either because this condition is always true or because there is at least one other branch that reaches it."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Possible Control flow issues",
        "cweCategory" : 561,
        "impact" : "Low",
        "subcategory" : "redundant_test",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "deadlock",
      "subtype" : "lock_inversion",
      "code-language" : "java",
      "name" : {
        "en" : "Thread deadlock"
      },
      "description" : {
        "en" : "Threads may try to acquire two locks in different orders, potentially causing deadlock"
      },
      "local_effect" : {
        "en" : "Two threads will be stuck waiting forever if each holds a lock the other needs to acquire."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : 833,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "deadlock",
      "subtype" : "lock_inversion",
      "code-language" : "c#",
      "name" : {
        "en" : "Thread deadlock"
      },
      "description" : {
        "en" : "Threads may try to acquire two locks in different orders, potentially causing deadlock"
      },
      "local_effect" : {
        "en" : "Two threads will be stuck waiting forever if each holds a lock the other needs to acquire."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : 833,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "delete_array",
      "subtype" : "array_delete_on_non_array",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Array delete misuse"
      },
      "description" : {
        "en" : "Using array delete on a non-array"
      },
      "local_effect" : {
        "en" : "Undefined behavior might result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 459,
        "impact" : "High",
        "subcategory" : "non_array_delete",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "delete_array",
      "subtype" : "array_delete_on_non_array",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Array delete misuse"
      },
      "description" : {
        "en" : "Using array delete on a non-array"
      },
      "local_effect" : {
        "en" : "Undefined behavior might result."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 459,
        "impact" : "High",
        "subcategory" : "non_array_delete",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "delete_array",
      "subtype" : "non_array_delete_on_array",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Incorrect delete operator"
      },
      "description" : {
        "en" : "Using non-array delete on an array of objects, scalars, or pointers allocated with new[]"
      },
      "local_effect" : {
        "en" : "Undefined behavior might result and destructors may not be called on objects in the array."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 459,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "delete_array",
      "subtype" : "non_array_delete_on_array",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Incorrect delete operator"
      },
      "description" : {
        "en" : "Using non-array delete on an array of objects, scalars, or pointers allocated with new[]"
      },
      "local_effect" : {
        "en" : "Undefined behavior might result and destructors may not be called on objects in the array."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 459,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "delete_array",
      "subtype" : "object",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Non-array delete for objects"
      },
      "description" : {
        "en" : "Using non-array delete on an array of objects; should be using delete[]"
      },
      "local_effect" : {
        "en" : "Destructors will not be called on the objects in the array, this may lead to resource leaks and unexpected behavior."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 459,
        "impact" : "High",
        "subcategory" : "object",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "delete_array",
      "subtype" : "object",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Non-array delete for objects"
      },
      "description" : {
        "en" : "Using non-array delete on an array of objects; should be using delete[]"
      },
      "local_effect" : {
        "en" : "Destructors will not be called on the objects in the array, this may lead to resource leaks and unexpected behavior."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 459,
        "impact" : "High",
        "subcategory" : "object",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "delete_array",
      "subtype" : "scalar",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Non-array delete for scalars"
      },
      "description" : {
        "en" : "Using non-array delete on an array of scalars or pointers allocated with new[]"
      },
      "local_effect" : {
        "en" : "Undefined behavior might result; however most implementations will work."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Compiler dependency",
        "cweCategory" : 459,
        "impact" : "Low",
        "subcategory" : "scalar",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "delete_array",
      "subtype" : "scalar",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Non-array delete for scalars"
      },
      "description" : {
        "en" : "Using non-array delete on an array of scalars or pointers allocated with new[]"
      },
      "local_effect" : {
        "en" : "Undefined behavior might result; however most implementations will work."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Compiler dependency",
        "cweCategory" : 459,
        "impact" : "Low",
        "subcategory" : "scalar",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "delete_void",
      "subtype" : "void_pointer",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Deleting void pointer"
      },
      "description" : {
        "en" : "Deleting a void pointer (void*)"
      },
      "local_effect" : {
        "en" : "Undefined behavior might result; in practice, the memory is typically freed, but the destructor is not run."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 758,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "delete_void",
      "subtype" : "void_pointer",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Deleting void pointer"
      },
      "description" : {
        "en" : "Deleting a void pointer (void*)"
      },
      "local_effect" : {
        "en" : "Undefined behavior might result; in practice, the memory is typically freed, but the destructor is not run."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 758,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "evaluation_order",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Evaluation order violation"
      },
      "description" : {
        "en" : "Statement contains multiple side-effects on the same value with an undefined evaluation order"
      },
      "local_effect" : {
        "en" : "With different compiler flags or different compilers or platforms, this code may behave differently."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 758,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "evaluation_order",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Evaluation order violation"
      },
      "description" : {
        "en" : "Statement contains multiple side-effects on the same value with an undefined evaluation order"
      },
      "local_effect" : {
        "en" : "With different compiler flags or different compilers or platforms, this code may behave differently."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 758,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "explicit_this_expected",
      "subtype" : null,
      "code-language" : "javascript",
      "name" : {
        "en" : "Explicit this expected"
      },
      "description" : {
        "en" : "The called function may expect an explicit this argument."
      },
      "local_effect" : {
        "en" : "The function call will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 628,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "case",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Identical code for different cases"
      },
      "description" : {
        "en" : "The same code is executed for two cases in the same switch statement"
      },
      "local_effect" : {
        "en" : "The case is redundant or can be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "case",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "case",
      "code-language" : "java",
      "name" : {
        "en" : "Identical code for different cases"
      },
      "description" : {
        "en" : "The same code is executed for two cases in the same switch statement"
      },
      "local_effect" : {
        "en" : "The case is redundant or can be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "case",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "case",
      "code-language" : "c#",
      "name" : {
        "en" : "Identical code for different cases"
      },
      "description" : {
        "en" : "The same code is executed for two cases in the same switch statement"
      },
      "local_effect" : {
        "en" : "The case is redundant or can be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "case",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "case",
      "code-language" : "javascript",
      "name" : {
        "en" : "Identical code for different cases"
      },
      "description" : {
        "en" : "The same code is executed for two cases in the same switch statement"
      },
      "local_effect" : {
        "en" : "The case is redundant or can be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "case",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "case",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Identical code for different cases"
      },
      "description" : {
        "en" : "The same code is executed for two cases in the same switch statement"
      },
      "local_effect" : {
        "en" : "The case is redundant or can be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "case",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "case",
      "code-language" : "php",
      "name" : {
        "en" : "Identical code for different cases"
      },
      "description" : {
        "en" : "The same code is executed for two cases in the same switch statement"
      },
      "local_effect" : {
        "en" : "The case is redundant or can be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "case",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "else_if_chain",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Identical code for different branches of an else-if chain"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The conditions could be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "chain",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "else_if_chain",
      "code-language" : "java",
      "name" : {
        "en" : "Identical code for different branches of an else-if chain"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The conditions could be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "chain",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "else_if_chain",
      "code-language" : "c#",
      "name" : {
        "en" : "Identical code for different branches of an else-if chain"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The conditions could be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "chain",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "else_if_chain",
      "code-language" : "javascript",
      "name" : {
        "en" : "Identical code for different branches of an else-if chain"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The conditions could be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "chain",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "else_if_chain",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Identical code for different branches of an else-if chain"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The conditions could be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "chain",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "else_if_chain",
      "code-language" : "php",
      "name" : {
        "en" : "Identical code for different branches of an else-if chain"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The conditions could be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "chain",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "else_if_chain",
      "code-language" : "python",
      "name" : {
        "en" : "Identical code for different branches of an else-if chain"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The conditions could be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "chain",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "else_if_chain",
      "code-language" : "ruby",
      "name" : {
        "en" : "Identical code for different branches of an else-if chain"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The conditions could be combined"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "chain",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "if",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "if",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "if",
      "code-language" : "java",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "if",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "if",
      "code-language" : "c#",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "if",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "if",
      "code-language" : "javascript",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "if",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "if",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "if",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "if",
      "code-language" : "php",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "if",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "if",
      "code-language" : "python",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "if",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "if",
      "code-language" : "ruby",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "if",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "ternary",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "ternary",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "ternary",
      "code-language" : "java",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "ternary",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "ternary",
      "code-language" : "c#",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "ternary",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "ternary",
      "code-language" : "javascript",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "ternary",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "ternary",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "ternary",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "ternary",
      "code-language" : "php",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "ternary",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "ternary",
      "code-language" : "python",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "ternary",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "identical_branches",
      "subtype" : "ternary",
      "code-language" : "ruby",
      "name" : {
        "en" : "Identical code for different branches"
      },
      "description" : {
        "en" : "The same code is executed regardless of the condition"
      },
      "local_effect" : {
        "en" : "The condition is redundant"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "ternary",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "improper_null_termination",
      "subtype" : "readlink",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Readlink used insecurely"
      },
      "description" : {
        "en" : "The readlink system call may return a value equal to the buffer size, which causes an access one past the end"
      },
      "local_effect" : {
        "en" : "The buffer will be written past the end looking for a null terminator, causing a buffer overrun."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 170,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "improper_null_termination",
      "subtype" : "readlink",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Readlink used insecurely"
      },
      "description" : {
        "en" : "The readlink system call may return a value equal to the buffer size, which causes an access one past the end"
      },
      "local_effect" : {
        "en" : "The buffer will be written past the end looking for a null terminator, causing a buffer overrun."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 170,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "incorrect_buffer_size",
      "subtype" : "strlen_off_by_one",
      "code-language" : "c/c++",
      "name" : {
        "en" : "String length miscalculation"
      },
      "description" : {
        "en" : "String length miscalculation"
      },
      "local_effect" : {
        "en" : "The string length computed may be one less than intended (or zero for the empty string).  A common mistake."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 131,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "incorrect_buffer_size",
      "subtype" : "strlen_off_by_one",
      "code-language" : "objective-c",
      "name" : {
        "en" : "String length miscalculation"
      },
      "description" : {
        "en" : "String length miscalculation"
      },
      "local_effect" : {
        "en" : "The string length computed may be one less than intended (or zero for the empty string).  A common mistake."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 131,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "infinite_loop",
      "subtype" : "no_escape",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Infinite loop with no exit"
      },
      "description" : {
        "en" : "Infinite loop with no exit condition"
      },
      "local_effect" : {
        "en" : "The loop will execute forever, or until system resources are exhausted or the system is otherwise stopped."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : 835,
        "impact" : "Medium",
        "subcategory" : "no_escape",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "infinite_loop",
      "subtype" : "no_escape",
      "code-language" : "java",
      "name" : {
        "en" : "Infinite loop"
      },
      "description" : {
        "en" : "Infinite loop with no exit condition"
      },
      "local_effect" : {
        "en" : "The loop will execute forever, or until system resources are exhausted or the system is otherwise stopped."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : 835,
        "impact" : "Medium",
        "subcategory" : "no_escape",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "infinite_loop",
      "subtype" : "no_escape",
      "code-language" : "c#",
      "name" : {
        "en" : "Infinite loop"
      },
      "description" : {
        "en" : "Infinite loop with no exit condition"
      },
      "local_effect" : {
        "en" : "The loop will execute forever, or until system resources are exhausted or the system is otherwise stopped."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : 835,
        "impact" : "Medium",
        "subcategory" : "no_escape",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "infinite_loop",
      "subtype" : "no_escape",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Infinite loop with no exit"
      },
      "description" : {
        "en" : "Infinite loop with no exit condition"
      },
      "local_effect" : {
        "en" : "The loop will execute forever, or until system resources are exhausted or the system is otherwise stopped."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : 835,
        "impact" : "Medium",
        "subcategory" : "no_escape",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "infinite_loop",
      "subtype" : "unsatisfiable_exit_condition",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Infinite loop"
      },
      "description" : {
        "en" : "Infinite loop with unsatisfiable exit condition"
      },
      "local_effect" : {
        "en" : "The loop does not have a normal termination condition, so will continue until an abnormal condition arises."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : 835,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "infinite_loop",
      "subtype" : "unsatisfiable_exit_condition",
      "code-language" : "java",
      "name" : {
        "en" : "Infinite loop"
      },
      "description" : {
        "en" : "Infinite loop with unsatisfiable exit condition"
      },
      "local_effect" : {
        "en" : "The loop does not have a normal termination condition, so will continue until an abnormal condition arises."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : 835,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "infinite_loop",
      "subtype" : "unsatisfiable_exit_condition",
      "code-language" : "c#",
      "name" : {
        "en" : "Infinite loop"
      },
      "description" : {
        "en" : "Infinite loop with unsatisfiable exit condition"
      },
      "local_effect" : {
        "en" : "The loop does not have a normal termination condition, so will continue until an abnormal condition arises."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : 835,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "infinite_loop",
      "subtype" : "unsatisfiable_exit_condition",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Infinite loop"
      },
      "description" : {
        "en" : "Infinite loop with unsatisfiable exit condition"
      },
      "local_effect" : {
        "en" : "The loop does not have a normal termination condition, so will continue until an abnormal condition arises."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : 835,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "invalidate_iterator",
      "subtype" : "invalid",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Using invalid iterator"
      },
      "description" : {
        "en" : "An invalid or past-the-end iterator is being used"
      },
      "local_effect" : {
        "en" : "Undefined behavior may result; the program may crash or subtly misbehave."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 119,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "invalidate_iterator",
      "subtype" : "invalid",
      "code-language" : "java",
      "name" : {
        "en" : "Using invalid iterator"
      },
      "description" : {
        "en" : "An iterator is being used after the source container of the iterator is modified"
      },
      "local_effect" : {
        "en" : "A concurrent modification exception may result, the container may be corrupted, or the iterator may return incorrect data."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 573,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "invalidate_iterator",
      "subtype" : "invalid",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Using invalid iterator"
      },
      "description" : {
        "en" : "An invalid or past-the-end iterator is being used"
      },
      "local_effect" : {
        "en" : "Undefined behavior may result; the program may crash or subtly misbehave."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 119,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "invalidate_iterator",
      "subtype" : "map_put",
      "code-language" : "java",
      "name" : {
        "en" : "Using invalid iterator"
      },
      "description" : {
        "en" : "A map was modified with Map.put while it was being iterated on"
      },
      "local_effect" : {
        "en" : "A map was modified with Map.put while it was being iterated on. If the key was not in the map, this will usually generate an error (ConcurrentModificationException). The most common case is iterating on the keySet(), and updating the value at the current key. In this case, the map's key set is not changed, so this doesn't generate an error. Doing things this way is inefficient however, as this requires doing a map lookup that can be avoided. Instead, iterate on the entrySet and use Map.Entry.setValue."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Performance inefficiencies",
        "cweCategory" : 573,
        "impact" : "Low",
        "subcategory" : "map_put",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "lock_evasion",
      "subtype" : null,
      "code-language" : "java",
      "name" : {
        "en" : "Check of thread-shared field evades lock acquisition"
      },
      "description" : {
        "en" : "Checking the value of a thread-shared field outside of a locked region to determine if a locked operation involving that thread shared field has completed."
      },
      "local_effect" : {
        "en" : "The data guarded by this critical section may be read while in an inconsistent state or modified by multiple racing threads."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Data race undermines locking",
        "cweCategory" : 543,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "lock_evasion",
      "subtype" : null,
      "code-language" : "c#",
      "name" : {
        "en" : "Check of thread-shared field evades lock acquisition"
      },
      "description" : {
        "en" : "Checking the value of a thread-shared field outside of a locked region to determine if a locked operation involving that thread shared field has completed."
      },
      "local_effect" : {
        "en" : "The data guarded by this critical section may be read while in an inconsistent state or modified by multiple racing threads."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Data race undermines locking",
        "cweCategory" : 543,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "memory_leak",
      "subtype" : "ctor_dtor_leak",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Resource leak in object"
      },
      "description" : {
        "en" : "Constructor allocates memory but destructor does not free it"
      },
      "local_effect" : {
        "en" : "The memory will not be reclaimed by the destructor, and it cannot be reused until the process terminates."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 401,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "memory_leak",
      "subtype" : "ctor_dtor_leak",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Resource leak in object"
      },
      "description" : {
        "en" : "Constructor allocates memory but destructor does not free it"
      },
      "local_effect" : {
        "en" : "The memory will not be reclaimed by the destructor, and it cannot be reused until the process terminates."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 401,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "memset_bad_fill_value",
      "subtype" : "no_effect",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Memset fill value of '0'"
      },
      "description" : {
        "en" : "A memset fill value of ASCII character '0' is likely intended to be 0"
      },
      "local_effect" : {
        "en" : "The buffer will be filled with ASCII character '0' instead of actual zero bytes."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 665,
        "impact" : "High",
        "subcategory" : "bad_memset_fill_value",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "memset_bad_fill_value",
      "subtype" : "no_effect",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Memset fill value of '0'"
      },
      "description" : {
        "en" : "A memset fill value of ASCII character '0' is likely intended to be 0"
      },
      "local_effect" : {
        "en" : "The buffer will be filled with ASCII character '0' instead of actual zero bytes."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 665,
        "impact" : "High",
        "subcategory" : "bad_memset_fill_value",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "memset_fill_value_truncated",
      "subtype" : "no_effect",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Memset fill truncated"
      },
      "description" : {
        "en" : "The memset fill value must be between -1 and 255, other values will be truncated"
      },
      "local_effect" : {
        "en" : "The buffer will not be filled with the apparent fill byte pattern, instead it will be filled with the truncated value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 197,
        "impact" : "High",
        "subcategory" : "bad_memset_truncated_fill",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "memset_fill_value_truncated",
      "subtype" : "no_effect",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Memset fill truncated"
      },
      "description" : {
        "en" : "The memset fill value must be between -1 and 255, other values will be truncated"
      },
      "local_effect" : {
        "en" : "The buffer will not be filled with the apparent fill byte pattern, instead it will be filled with the truncated value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 197,
        "impact" : "High",
        "subcategory" : "bad_memset_truncated_fill",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "missing_break",
      "subtype" : "logic_error",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Missing break in switch"
      },
      "description" : {
        "en" : "Missing break statement between cases in switch statement"
      },
      "local_effect" : {
        "en" : "Execution falls through to the next case statement or default; this might indicate a common typo."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 484,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "missing_break",
      "subtype" : "logic_error",
      "code-language" : "java",
      "name" : {
        "en" : "Missing break in switch"
      },
      "description" : {
        "en" : "Missing break statement between cases in switch statement"
      },
      "local_effect" : {
        "en" : "Execution falls through to the next case statement or default; this might indicate a common typo."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 484,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "missing_break",
      "subtype" : "logic_error",
      "code-language" : "javascript",
      "name" : {
        "en" : "Missing break in switch"
      },
      "description" : {
        "en" : "Missing break statement between cases in switch statement"
      },
      "local_effect" : {
        "en" : "Execution falls through to the next case statement or default; this might indicate a common typo."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 484,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "missing_break",
      "subtype" : "logic_error",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Missing break in switch"
      },
      "description" : {
        "en" : "Missing break statement between cases in switch statement"
      },
      "local_effect" : {
        "en" : "Execution falls through to the next case statement or default; this might indicate a common typo."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 484,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "missing_break",
      "subtype" : "logic_error",
      "code-language" : "php",
      "name" : {
        "en" : "Missing break in switch"
      },
      "description" : {
        "en" : "Missing break statement between cases in switch statement"
      },
      "local_effect" : {
        "en" : "Execution falls through to the next case statement or default; this might indicate a common typo."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 484,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "missing_return_statement",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Missing return statement"
      },
      "description" : {
        "en" : "Function that returns non-void is missing a return value"
      },
      "local_effect" : {
        "en" : "The return value will be taken from whatever happens to be on the stack, likely causing incorrect computation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Uninitialized variables",
        "cweCategory" : 710,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "missing_return_statement",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Missing return statement"
      },
      "description" : {
        "en" : "Function that returns non-void is missing a return value"
      },
      "local_effect" : {
        "en" : "The return value will be taken from whatever happens to be on the stack, likely causing incorrect computation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Uninitialized variables",
        "cweCategory" : 710,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "multiple_return_statements",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Multiple return statements"
      },
      "description" : {
        "en" : "Multiple return statements violates local coding standard"
      },
      "local_effect" : {
        "en" : "More than one function return site may make the function harder to maintain."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 710,
        "impact" : "Low",
        "subcategory" : "multiple_returns",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "multiple_return_statements",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Multiple return statements"
      },
      "description" : {
        "en" : "Multiple return statements violates local coding standard"
      },
      "local_effect" : {
        "en" : "More than one function return site may make the function harder to maintain."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 710,
        "impact" : "Low",
        "subcategory" : "multiple_returns",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "negative_returns",
      "subtype" : "array_index_read",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Negative array index read"
      },
      "description" : {
        "en" : "Negative value used to index an array in a read operation"
      },
      "local_effect" : {
        "en" : "A memory location at a negative offset from the beginning of the array will be read, resulting in incorrect values."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 129,
        "impact" : "High",
        "subcategory" : "array_index_read",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "negative_returns",
      "subtype" : "array_index_read",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Negative array index read"
      },
      "description" : {
        "en" : "Negative value used to index an array in a read operation"
      },
      "local_effect" : {
        "en" : "A memory location at a negative offset from the beginning of the array will be read, resulting in incorrect values."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 129,
        "impact" : "High",
        "subcategory" : "array_index_read",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "negative_returns",
      "subtype" : "array_index_write",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Negative array index write"
      },
      "description" : {
        "en" : "Negative value used to index an array in a write operation"
      },
      "local_effect" : {
        "en" : "A memory location at a negative offset from the beginning of the array will be written, likely causing a crash later."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 129,
        "impact" : "High",
        "subcategory" : "array_index_write",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "negative_returns",
      "subtype" : "array_index_write",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Negative array index write"
      },
      "description" : {
        "en" : "Negative value used to index an array in a write operation"
      },
      "local_effect" : {
        "en" : "A memory location at a negative offset from the beginning of the array will be written, likely causing a crash later."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 129,
        "impact" : "High",
        "subcategory" : "array_index_write",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "negative_returns",
      "subtype" : "critical_argument",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Argument cannot be negative"
      },
      "description" : {
        "en" : "Negative value used as  argument to a function expecting a positive value (for example, size of buffer or allocation)"
      },
      "local_effect" : {
        "en" : "The negative argument will be interpreted as a very large unsigned value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 687,
        "impact" : "Medium",
        "subcategory" : "critical_argument",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "negative_returns",
      "subtype" : "critical_argument",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Argument cannot be negative"
      },
      "description" : {
        "en" : "Negative value used as  argument to a function expecting a positive value (for example, size of buffer or allocation)"
      },
      "local_effect" : {
        "en" : "The negative argument will be interpreted as a very large unsigned value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 687,
        "impact" : "Medium",
        "subcategory" : "critical_argument",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "negative_returns",
      "subtype" : "loop_bound",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Negative loop bound"
      },
      "description" : {
        "en" : "Negative value used as a loop upper bound"
      },
      "local_effect" : {
        "en" : "Loop may run for a long time or not at all."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : 606,
        "impact" : "Medium",
        "subcategory" : "loop_bound",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "negative_returns",
      "subtype" : "loop_bound",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Negative loop bound"
      },
      "description" : {
        "en" : "Negative value used as a loop upper bound"
      },
      "local_effect" : {
        "en" : "Loop may run for a long time or not at all."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Program hangs",
        "cweCategory" : 606,
        "impact" : "Medium",
        "subcategory" : "loop_bound",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "negative_returns",
      "subtype" : "sensitive",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Improper use of negative value"
      },
      "description" : {
        "en" : "Negative value can be returned from function is not being checked before being used improperly"
      },
      "local_effect" : {
        "en" : "The negative value may be unexpected by later operations, causing incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 394,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "negative_returns",
      "subtype" : "sensitive",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Improper use of negative value"
      },
      "description" : {
        "en" : "Negative value can be returned from function is not being checked before being used improperly"
      },
      "local_effect" : {
        "en" : "The negative value may be unexpected by later operations, causing incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 394,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "nesting_indent_mismatch",
      "subtype" : "bad_indentation",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Indentation does not match nesting level"
      },
      "description" : {
        "en" : "The indentation of this code does not reflect its syntactic nesting level."
      },
      "local_effect" : {
        "en" : "Readers of this code might be misled as to its structure."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 483,
        "impact" : "Low",
        "subcategory" : "bad_indentation",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "nesting_indent_mismatch",
      "subtype" : "bad_indentation",
      "code-language" : "java",
      "name" : {
        "en" : "Indentation does not match nesting level"
      },
      "description" : {
        "en" : "The indentation of this code does not reflect its syntactic nesting level."
      },
      "local_effect" : {
        "en" : "Readers of this code might be misled as to its structure."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 483,
        "impact" : "Low",
        "subcategory" : "bad_indentation",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "nesting_indent_mismatch",
      "subtype" : "bad_indentation",
      "code-language" : "c#",
      "name" : {
        "en" : "Indentation does not match nesting level"
      },
      "description" : {
        "en" : "The indentation of this code does not reflect its syntactic nesting level."
      },
      "local_effect" : {
        "en" : "Readers of this code might be misled as to its structure."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "bad_indentation",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "nesting_indent_mismatch",
      "subtype" : "bad_indentation",
      "code-language" : "javascript",
      "name" : {
        "en" : "Indentation does not match nesting level"
      },
      "description" : {
        "en" : "The indentation of this code does not reflect its syntactic nesting level."
      },
      "local_effect" : {
        "en" : "Readers of this code might be misled as to its structure."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 483,
        "impact" : "Low",
        "subcategory" : "bad_indentation",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "nesting_indent_mismatch",
      "subtype" : "bad_indentation",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Indentation does not match nesting level"
      },
      "description" : {
        "en" : "The indentation of this code does not reflect its syntactic nesting level."
      },
      "local_effect" : {
        "en" : "Readers of this code might be misled as to its structure."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 483,
        "impact" : "Low",
        "subcategory" : "bad_indentation",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "nesting_indent_mismatch",
      "subtype" : "bad_indentation",
      "code-language" : "php",
      "name" : {
        "en" : "Indentation does not match nesting level"
      },
      "description" : {
        "en" : "The indentation of this code does not reflect its syntactic nesting level."
      },
      "local_effect" : {
        "en" : "Readers of this code might be misled as to its structure."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 483,
        "impact" : "Low",
        "subcategory" : "bad_indentation",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "nesting_indent_mismatch",
      "subtype" : "logic_error",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Nesting level does not match indentation"
      },
      "description" : {
        "en" : "The indentation of this code suggests it is nested when it is not."
      },
      "local_effect" : {
        "en" : "Code that is meant to be executed conditionally may be executed unconditionally"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 483,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "nesting_indent_mismatch",
      "subtype" : "logic_error",
      "code-language" : "java",
      "name" : {
        "en" : "Nesting level does not match indentation"
      },
      "description" : {
        "en" : "The indentation of this code suggests it is nested when it is not."
      },
      "local_effect" : {
        "en" : "Code that is meant to be executed conditionally may be executed unconditionally."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 483,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "nesting_indent_mismatch",
      "subtype" : "logic_error",
      "code-language" : "c#",
      "name" : {
        "en" : "Nesting level does not match indentation"
      },
      "description" : {
        "en" : "The indentation of this code suggests it is nested when it is not."
      },
      "local_effect" : {
        "en" : "Code that is meant to be executed conditionally may be executed unconditionally."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "nesting_indent_mismatch",
      "subtype" : "logic_error",
      "code-language" : "javascript",
      "name" : {
        "en" : "Nesting level does not match indentation"
      },
      "description" : {
        "en" : "The indentation of this code suggests it is nested when it is not."
      },
      "local_effect" : {
        "en" : "Code that is meant to be executed conditionally may be executed unconditionally."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 483,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "nesting_indent_mismatch",
      "subtype" : "logic_error",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Nesting level does not match indentation"
      },
      "description" : {
        "en" : "The indentation of this code suggests it is nested when it is not."
      },
      "local_effect" : {
        "en" : "Code that is meant to be executed conditionally may be executed unconditionally"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 483,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "nesting_indent_mismatch",
      "subtype" : "logic_error",
      "code-language" : "php",
      "name" : {
        "en" : "Nesting level does not match indentation"
      },
      "description" : {
        "en" : "The indentation of this code suggests it is nested when it is not."
      },
      "local_effect" : {
        "en" : "Code that is meant to be executed conditionally may be executed unconditionally."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 483,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : null,
      "code-language" : "javascript",
      "name" : {
        "en" : "Expression with no effect"
      },
      "description" : {
        "en" : "An expression is useless because it has no side effects and its result is ignored."
      },
      "local_effect" : {
        "en" : "Perhaps the code was intended to affect the behavior of the program, but it does not."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : null,
      "code-language" : "php",
      "name" : {
        "en" : "Expression with no effect"
      },
      "description" : {
        "en" : "An expression is useless because it has no side effects and its result is ignored."
      },
      "local_effect" : {
        "en" : "Perhaps the code was intended to affect the behavior of the program, but it does not."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : null,
      "code-language" : "ruby",
      "name" : {
        "en" : "Expression with no effect"
      },
      "description" : {
        "en" : "An expression is useless because it has no side effects and its result is ignored."
      },
      "local_effect" : {
        "en" : "Perhaps the code was intended to affect the behavior of the program, but it does not."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "bad_memset_zero_size",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Memset buffer size of 0"
      },
      "description" : {
        "en" : "A memset buffer size of 0 may indicate confusing the size and fill parameters"
      },
      "local_effect" : {
        "en" : "The buffer will not be modified; no part of the buffer will be cleared or assigned the fill byte value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 456,
        "impact" : "High",
        "subcategory" : "bad_memset_zero_size",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "bad_memset_zero_size",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Memset buffer size of 0"
      },
      "description" : {
        "en" : "A memset buffer size of 0 may indicate confusing the size and fill parameters"
      },
      "local_effect" : {
        "en" : "The buffer will not be modified; no part of the buffer will be cleared or assigned the fill byte value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 456,
        "impact" : "High",
        "subcategory" : "bad_memset_zero_size",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "extra_comma",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Misused comma operator"
      },
      "description" : {
        "en" : "Comma operator has a left sub-expression with no side-effects"
      },
      "local_effect" : {
        "en" : "The left hand side of the comma will be evaluated and then the value discarded."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "extra_comma",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "extra_comma",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Misused comma operator"
      },
      "description" : {
        "en" : "Comma operator has a left sub-expression with no side-effects"
      },
      "local_effect" : {
        "en" : "The left hand side of the comma will be evaluated and then the value discarded."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 480,
        "impact" : "Medium",
        "subcategory" : "extra_comma",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "incomplete_delete",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Incomplete delete"
      },
      "description" : {
        "en" : "Delete operator only applies to one argument in a comma expression, may cause memory leak"
      },
      "local_effect" : {
        "en" : "The right hand side of the comma expression will not be deleted, resulting in a memory leak."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 401,
        "impact" : "High",
        "subcategory" : "incomplete_delete",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "incomplete_delete",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Incomplete delete"
      },
      "description" : {
        "en" : "Delete operator only applies to one argument in a comma expression, may cause memory leak"
      },
      "local_effect" : {
        "en" : "The right hand side of the comma expression will not be deleted, resulting in a memory leak."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 401,
        "impact" : "High",
        "subcategory" : "incomplete_delete",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "no_effect_deref",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Incorrect pointer increment"
      },
      "description" : {
        "en" : "Increment (or decrement) of pointer value, not the value pointed-to"
      },
      "local_effect" : {
        "en" : "The pointer may end up pointing outside the current memory buffer, while the value pointed-to will be unchanged."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 465,
        "impact" : "Medium",
        "subcategory" : "no_effect_deref",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "no_effect_deref",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Incorrect pointer increment"
      },
      "description" : {
        "en" : "Increment (or decrement) of pointer value, not the value pointed-to"
      },
      "local_effect" : {
        "en" : "The pointer may end up pointing outside the current memory buffer, while the value pointed-to will be unchanged."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 465,
        "impact" : "Medium",
        "subcategory" : "no_effect_deref",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "no_effect_test",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Test should be assignment"
      },
      "description" : {
        "en" : "A test that is an isolated statement with no effect is likely an intended assignment"
      },
      "local_effect" : {
        "en" : "The test will be executed and then discarded; no assignment will be performed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 482,
        "impact" : "Medium",
        "subcategory" : "no_effect_test",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "no_effect_test",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Test should be assignment"
      },
      "description" : {
        "en" : "A test that is an isolated statement with no effect is likely an intended assignment"
      },
      "local_effect" : {
        "en" : "The test will be executed and then discarded; no assignment will be performed."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 482,
        "impact" : "Medium",
        "subcategory" : "no_effect_test",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "self_assign",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Self assignment"
      },
      "description" : {
        "en" : "Assignment of a variable or expression to itself has no effect"
      },
      "local_effect" : {
        "en" : "The variable's value will not change, so the assignment has no effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 665,
        "impact" : "Medium",
        "subcategory" : "self_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "self_assign",
      "code-language" : "javascript",
      "name" : {
        "en" : "Self assignment"
      },
      "description" : {
        "en" : "Assignment of a variable or expression to itself has no effect"
      },
      "local_effect" : {
        "en" : "The variable's value will not change, so the assignment has no effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 665,
        "impact" : "Medium",
        "subcategory" : "self_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "self_assign",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Self assignment"
      },
      "description" : {
        "en" : "Assignment of a variable or expression to itself has no effect"
      },
      "local_effect" : {
        "en" : "The variable's value will not change, so the assignment has no effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 665,
        "impact" : "Medium",
        "subcategory" : "self_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "self_assign",
      "code-language" : "php",
      "name" : {
        "en" : "Self assignment"
      },
      "description" : {
        "en" : "Assignment of a variable or expression to itself has no effect"
      },
      "local_effect" : {
        "en" : "The variable's value will not change, so the assignment has no effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 665,
        "impact" : "Medium",
        "subcategory" : "self_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "self_assign",
      "code-language" : "ruby",
      "name" : {
        "en" : "Self assignment"
      },
      "description" : {
        "en" : "Assignment of a variable or expression to itself has no effect"
      },
      "local_effect" : {
        "en" : "The variable's value will not change, so the assignment has no effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 665,
        "impact" : "Medium",
        "subcategory" : "self_assign",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "static_through_instance",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unnecessary instance object usage"
      },
      "description" : {
        "en" : "A static field or method is accessed using an instance object"
      },
      "local_effect" : {
        "en" : "An instance object is used to access a static field or method, which is unnecessary."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "static_through_instance",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "static_through_instance",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unnecessary instance object usage"
      },
      "description" : {
        "en" : "A static field or method is accessed using an instance object"
      },
      "local_effect" : {
        "en" : "An instance object is used to access a static field or method, which is unnecessary."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Miscellaneous",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "static_through_instance",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "unsigned_compare",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unsigned compared against 0"
      },
      "description" : {
        "en" : "An unsigned value can never be less than 0"
      },
      "local_effect" : {
        "en" : "An unsigned value can never be negative, so this test will always evaluate the same way."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 570,
        "impact" : "Medium",
        "subcategory" : "unsigned_compare",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "unsigned_compare",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unsigned compared against 0"
      },
      "description" : {
        "en" : "An unsigned value can never be less than 0"
      },
      "local_effect" : {
        "en" : "An unsigned value can never be negative, so this test will always evaluate the same way."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 570,
        "impact" : "Medium",
        "subcategory" : "unsigned_compare",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "unsigned_compare_macros",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Macro compares unsigned to 0"
      },
      "description" : {
        "en" : "An unsigned value can never be less than 0"
      },
      "local_effect" : {
        "en" : "An unsigned value can never be negative, so this test will always evaluate the same way."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 570,
        "impact" : "Medium",
        "subcategory" : "unsigned_compare_macros",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "unsigned_compare_macros",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Macro compares unsigned to 0"
      },
      "description" : {
        "en" : "An unsigned value can never be less than 0"
      },
      "local_effect" : {
        "en" : "An unsigned value can never be negative, so this test will always evaluate the same way."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 570,
        "impact" : "Medium",
        "subcategory" : "unsigned_compare_macros",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "unsigned_enums",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Enum compared against 0"
      },
      "description" : {
        "en" : "An enumeration value is usually not less than 0"
      },
      "local_effect" : {
        "en" : "No enumeration values are negative, so this test will always evaluate the same way."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 570,
        "impact" : "Medium",
        "subcategory" : "unsigned_enums",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_effect",
      "subtype" : "unsigned_enums",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Enum compared against 0"
      },
      "description" : {
        "en" : "An enumeration value is usually not less than 0"
      },
      "local_effect" : {
        "en" : "No enumeration values are negative, so this test will always evaluate the same way."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 570,
        "impact" : "Medium",
        "subcategory" : "unsigned_enums",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "no_recheck_of_wait_condition_on_spurious_wake_up",
      "subtype" : "bad_check_of_wait_condition",
      "code-language" : "java",
      "name" : {
        "en" : "Data race condition"
      },
      "description" : {
        "en" : "A thread does not re-check its wait condition after waking up from a wait."
      },
      "local_effect" : {
        "en" : "This thread does not re-check the wait condition upon wakeup, which may cause it to continue prematurely."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "spurious_wakeup",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_crash",
      "subtype" : "before_null_check",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Dereference before null check"
      },
      "description" : {
        "en" : "All paths that lead to this null pointer comparison already dereference the pointer earlier"
      },
      "local_effect" : {
        "en" : "There may be a null pointer dereference, or else the comparison against null is unnecessary."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_crash",
      "subtype" : "before_null_check",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Dereference before null check"
      },
      "description" : {
        "en" : "All paths that lead to this null pointer comparison already dereference the pointer earlier"
      },
      "local_effect" : {
        "en" : "There may be a null pointer dereference, or else the comparison against null is unnecessary."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_crash",
      "subtype" : "check_then_dereference",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Dereference after null check"
      },
      "description" : {
        "en" : "Pointer is checked against null but then dereferenced anyway"
      },
      "local_effect" : {
        "en" : "Either the check against null is unnecessary, or there may be a null pointer dereference."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_crash",
      "subtype" : "check_then_dereference",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Dereference after null check"
      },
      "description" : {
        "en" : "Pointer is checked against null but then dereferenced anyway"
      },
      "local_effect" : {
        "en" : "Either the check against null is unnecessary, or there may be a null pointer dereference."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_crash",
      "subtype" : "constant",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Explicit null dereferenced"
      },
      "description" : {
        "en" : "Dereference of an explicit null value"
      },
      "local_effect" : {
        "en" : "A null pointer dereference will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "deref_constant_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_crash",
      "subtype" : "constant",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Explicit null dereferenced"
      },
      "description" : {
        "en" : "Dereference of an explicit null value"
      },
      "local_effect" : {
        "en" : "A null pointer dereference will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "deref_constant_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_crash",
      "subtype" : "dynamic_cast",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unchecked dynamic_cast"
      },
      "description" : {
        "en" : "Dynamic_cast may fail and return null if the type cast is incompatible"
      },
      "local_effect" : {
        "en" : "If the dynamic_cast fails, a null pointer dereference will occur; if the dynamic_cast cannot fail, using static_cast instead offers better performance."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "dynamic_cast",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_crash",
      "subtype" : "dynamic_cast",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unchecked dynamic_cast"
      },
      "description" : {
        "en" : "Dynamic_cast may fail and return null if the type cast is incompatible"
      },
      "local_effect" : {
        "en" : "If the dynamic_cast fails, a null pointer dereference will occur; if the dynamic_cast cannot fail, using static_cast instead offers better performance."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "dynamic_cast",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_crash",
      "subtype" : "inferred_null_return_value",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Dereference null return (stat)"
      },
      "description" : {
        "en" : "Return value of function, which is statistically inferred to return null, but with no source code available, is dereferenced"
      },
      "local_effect" : {
        "en" : "If the function can actually return null, then a null pointer dereference would occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "unimpl",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_crash",
      "subtype" : "inferred_null_return_value",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Dereference null return (stat)"
      },
      "description" : {
        "en" : "Return value of function, which is statistically inferred to return null, but with no source code available, is dereferenced"
      },
      "local_effect" : {
        "en" : "If the function can actually return null, then a null pointer dereference would occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "unimpl",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_crash",
      "subtype" : "return_value",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Dereference null return value"
      },
      "description" : {
        "en" : "Return value of function which returns null is dereferenced without checking"
      },
      "local_effect" : {
        "en" : "If the function actually returns a null value, a null pointer dereference will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_crash",
      "subtype" : "return_value",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Dereference null return value"
      },
      "description" : {
        "en" : "Return value of function which returns null is dereferenced without checking"
      },
      "local_effect" : {
        "en" : "If the function actually returns a null value, a null pointer dereference will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "before_null_check",
      "code-language" : "java",
      "name" : {
        "en" : "Dereference before null check"
      },
      "description" : {
        "en" : "All paths that lead to this null pointer comparison already dereference the pointer earlier"
      },
      "local_effect" : {
        "en" : "There may be a null pointer exception, or else the comparison against null is unnecessary."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "before_null_check",
      "code-language" : "c#",
      "name" : {
        "en" : "Dereference before null check"
      },
      "description" : {
        "en" : "All paths that lead to this null pointer comparison already dereference the pointer earlier"
      },
      "local_effect" : {
        "en" : "There may be a null reference exception, or else the comparison against null is unnecessary."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "before_null_check",
      "code-language" : "javascript",
      "name" : {
        "en" : "Property access or function call before check for null or undefined"
      },
      "description" : {
        "en" : "All paths that lead to this comparison against null or undefined already use the value earlier for accessing a property or as a function call"
      },
      "local_effect" : {
        "en" : "There may be an exception, or else the comparison against null is unnecessary."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "before_null_check",
      "code-language" : "python",
      "name" : {
        "en" : "Attribute/item access or function call before check for None or undefined"
      },
      "description" : {
        "en" : "All paths that lead to this comparison against None or undefined already use the value earlier for accessing an attribute/item or as a function call"
      },
      "local_effect" : {
        "en" : "There may be an exception, or else the comparison against None is unnecessary."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "before_null_check",
      "code-language" : "ruby",
      "name" : {
        "en" : "Instance variable access or function call before check for nil or undefined"
      },
      "description" : {
        "en" : "All paths that lead to this comparison against nil or the defined? predicate use the value earlier for accessing an instance variable or as a function call"
      },
      "local_effect" : {
        "en" : "There may be a NameError exception, or else the nil? or defined? test is unnecessary."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "before_null_check",
      "code-language" : "swift",
      "name" : {
        "en" : "Unwrapping or downcasting optionals before check against nil"
      },
      "description" : {
        "en" : "All paths that lead to this comparison against nil already unwrap or downcast the value earlier"
      },
      "local_effect" : {
        "en" : "There may be a fatal runtime error, or else the comparison against nil is unnecessary."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "check_then_dereference",
      "code-language" : "java",
      "name" : {
        "en" : "Dereference after null check"
      },
      "description" : {
        "en" : "Reference is checked against null but then dereferenced anyway"
      },
      "local_effect" : {
        "en" : "Either the check against null is unnecessary, or there may be a null pointer exception."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "check_then_dereference",
      "code-language" : "c#",
      "name" : {
        "en" : "Dereference after null check"
      },
      "description" : {
        "en" : "Reference is checked against null but then dereferenced anyway"
      },
      "local_effect" : {
        "en" : "Either the check against null is unnecessary, or there may be a null reference exception."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "check_then_dereference",
      "code-language" : "javascript",
      "name" : {
        "en" : "Dereference after null check"
      },
      "description" : {
        "en" : "Reference is checked against null but then dereferenced anyway"
      },
      "local_effect" : {
        "en" : "Either the check against null is unnecessary, or there may be a null pointer exception."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "check_then_dereference",
      "code-language" : "php",
      "name" : {
        "en" : "Dereference after null check"
      },
      "description" : {
        "en" : "Reference is checked against null but then dereferenced anyway"
      },
      "local_effect" : {
        "en" : "Either the check against null is unnecessary, or there may be a null pointer exception."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "check_then_dereference",
      "code-language" : "python",
      "name" : {
        "en" : "Dereference after null check"
      },
      "description" : {
        "en" : "Reference is checked against null but then dereferenced anyway"
      },
      "local_effect" : {
        "en" : "Either the check against null is unnecessary, or there may be a null pointer exception."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "check_then_dereference",
      "code-language" : "ruby",
      "name" : {
        "en" : "Dereference after null check"
      },
      "description" : {
        "en" : "Reference is checked against null but then dereferenced anyway"
      },
      "local_effect" : {
        "en" : "Either the check against null is unnecessary, or there may be a null pointer exception."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "check_then_dereference",
      "code-language" : "swift",
      "name" : {
        "en" : "Unwrapping or downcasting after nil check"
      },
      "description" : {
        "en" : "Value is checked for nil but then unwrapped or downcast anyway"
      },
      "local_effect" : {
        "en" : "Either the nil check is unnecessary, or a runtime error may occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant",
      "code-language" : "javascript",
      "name" : {
        "en" : "Bad use of null-like value"
      },
      "description" : {
        "en" : "Performing an operation that would be invalid on a null or undefined value."
      },
      "local_effect" : {
        "en" : "If the value is null or undefined, this code will cause an exception such as a TypeError."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "bad_null_value_use",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant",
      "code-language" : "php",
      "name" : {
        "en" : "Bad use of null-like value"
      },
      "description" : {
        "en" : "Performing an operation that would be invalid on a null or undefined value."
      },
      "local_effect" : {
        "en" : "If the value is null or undefined, this code will cause an exception such as a TypeError."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "bad_null_value_use",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant",
      "code-language" : "python",
      "name" : {
        "en" : "Bad use of null-like value"
      },
      "description" : {
        "en" : "Performing an operation that would be invalid on a null or undefined value."
      },
      "local_effect" : {
        "en" : "If the value is null or undefined, this code will cause an exception such as a TypeError."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "bad_null_value_use",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant",
      "code-language" : "ruby",
      "name" : {
        "en" : "Bad use of null-like value"
      },
      "description" : {
        "en" : "Performing an operation that would be invalid on a null or undefined value."
      },
      "local_effect" : {
        "en" : "If the value is null or undefined, this code will cause an exception such as a TypeError."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "bad_null_value_use",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant_null",
      "code-language" : "java",
      "name" : {
        "en" : "Explicit null dereferenced"
      },
      "description" : {
        "en" : "Dereference of an explicit null value"
      },
      "local_effect" : {
        "en" : "A null pointer exception will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "deref_constant_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant_null",
      "code-language" : "c#",
      "name" : {
        "en" : "Explicit null dereferenced"
      },
      "description" : {
        "en" : "Dereference of an explicit null value"
      },
      "local_effect" : {
        "en" : "A null pointer exception will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "deref_constant_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant_null",
      "code-language" : "javascript",
      "name" : {
        "en" : "Explicit null dereferenced"
      },
      "description" : {
        "en" : "Dereference of an explicit null value"
      },
      "local_effect" : {
        "en" : "A null pointer exception will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "deref_constant_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant_null",
      "code-language" : "php",
      "name" : {
        "en" : "Explicit null dereferenced"
      },
      "description" : {
        "en" : "Dereference of an explicit null value"
      },
      "local_effect" : {
        "en" : "A null pointer exception will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "deref_constant_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant_null",
      "code-language" : "python",
      "name" : {
        "en" : "Explicit null dereferenced"
      },
      "description" : {
        "en" : "Dereference of an explicit null value"
      },
      "local_effect" : {
        "en" : "A null pointer exception will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "deref_constant_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant_null",
      "code-language" : "ruby",
      "name" : {
        "en" : "Explicit null dereferenced"
      },
      "description" : {
        "en" : "Dereference of an explicit null value"
      },
      "local_effect" : {
        "en" : "A null pointer exception will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "deref_constant_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant_null",
      "code-language" : "swift",
      "name" : {
        "en" : "Unwrapping or downcasting nil"
      },
      "description" : {
        "en" : "Forced unwrapping or downcasting a nil value"
      },
      "local_effect" : {
        "en" : "A runtime error will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "deref_constant_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant_zero",
      "code-language" : "java",
      "name" : {
        "en" : "Explicit null dereferenced"
      },
      "description" : {
        "en" : "Dereference of an explicit null value"
      },
      "local_effect" : {
        "en" : "A null pointer exception will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "deref_constant_zero",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "constant_zero",
      "code-language" : "c#",
      "name" : {
        "en" : "Explicit null dereferenced"
      },
      "description" : {
        "en" : "Dereference of an explicit null value"
      },
      "local_effect" : {
        "en" : "A null reference exception will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "deref_constant_zero",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "dynamic_cast",
      "code-language" : "c#",
      "name" : {
        "en" : "Unchecked dynamic_cast"
      },
      "description" : {
        "en" : "Dynamic_cast may fail and return null if the type cast is incompatible"
      },
      "local_effect" : {
        "en" : "If the dynamic_cast fails, a null pointer dereference will occur; if the dynamic_cast cannot fail, using static_cast instead offers better performance."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "dynamic_cast",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "inferred_null_return_value",
      "code-language" : "java",
      "name" : {
        "en" : "Dereference null return (stat)"
      },
      "description" : {
        "en" : "Return value of function, which is statistically inferred to return null, but with no source code available, is dereferenced"
      },
      "local_effect" : {
        "en" : "If the function can actually return null, then a NullPointerException will be thrown."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "unimpl",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "inferred_null_return_value",
      "code-language" : "c#",
      "name" : {
        "en" : "Dereference null return (stat)"
      },
      "description" : {
        "en" : "Return value of function, which is statistically inferred to return null, but with no source code available, is dereferenced"
      },
      "local_effect" : {
        "en" : "If the function can actually return null, then a null pointer dereference would occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "unimpl",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "null_from_as",
      "code-language" : "c#",
      "name" : {
        "en" : "Unchecked \"as\" conversion"
      },
      "description" : {
        "en" : "The \"as\" conversion may fail and return null if the type cast is incompatible"
      },
      "local_effect" : {
        "en" : "If the \"as\" conversion fails, a null pointer exception will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "null_from_as",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "nullable_parameter",
      "code-language" : "java",
      "name" : {
        "en" : "Dereference null argument"
      },
      "description" : {
        "en" : "A method parameter that is allowed to be null is dereferenced without a check"
      },
      "local_effect" : {
        "en" : "If the method is passed a null value, a NullPointerException will be thrown."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "needs_null_check",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "nullable_parameter",
      "code-language" : "javascript",
      "name" : {
        "en" : "Dereference null argument"
      },
      "description" : {
        "en" : "A method parameter that is allowed to be null is dereferenced without a check"
      },
      "local_effect" : {
        "en" : "If the method is passed a null value, a NullPointerException will be thrown."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "needs_null_check",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "nullable_parameter",
      "code-language" : "php",
      "name" : {
        "en" : "Dereference null argument"
      },
      "description" : {
        "en" : "A method parameter that is allowed to be null is dereferenced without a check"
      },
      "local_effect" : {
        "en" : "If the method is passed a null value, a NullPointerException will be thrown."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "needs_null_check",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "nullable_parameter",
      "code-language" : "python",
      "name" : {
        "en" : "Dereference null argument"
      },
      "description" : {
        "en" : "A method parameter that is allowed to be null is dereferenced without a check"
      },
      "local_effect" : {
        "en" : "If the method is passed a null value, a NullPointerException will be thrown."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "needs_null_check",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "nullable_parameter",
      "code-language" : "ruby",
      "name" : {
        "en" : "Dereference null argument"
      },
      "description" : {
        "en" : "A method parameter that is allowed to be null is dereferenced without a check"
      },
      "local_effect" : {
        "en" : "If the method is passed a null value, a NullPointerException will be thrown."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "needs_null_check",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "return_value",
      "code-language" : "java",
      "name" : {
        "en" : "Dereference null return value"
      },
      "description" : {
        "en" : "Return value of function which returns null is dereferenced without checking"
      },
      "local_effect" : {
        "en" : "If the function actually returns a null value, a NullPointerException will be thrown."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "return_value",
      "code-language" : "c#",
      "name" : {
        "en" : "Dereference null return value"
      },
      "description" : {
        "en" : "Return value of function which returns null is dereferenced without checking"
      },
      "local_effect" : {
        "en" : "If the function actually returns a null reference, a null reference exception will occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "return_value",
      "code-language" : "javascript",
      "name" : {
        "en" : "Bad use of null-like value"
      },
      "description" : {
        "en" : "Using the return value of a function that can return null or undefined without checking it for null or undefined."
      },
      "local_effect" : {
        "en" : "If the function returns a null or undefined value, this code will cause an exception such as a TypeError."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "throws_on_null",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Null value leads to thrown exception"
      },
      "description" : {
        "en" : "A null value is passed to a function that throws an exception in that case"
      },
      "local_effect" : {
        "en" : "An exception is thrown due to a null value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "throws_on_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "throws_on_null",
      "code-language" : "c#",
      "name" : {
        "en" : "Null value leads to thrown exception"
      },
      "description" : {
        "en" : "A null value is passed to a function that throws an exception in that case"
      },
      "local_effect" : {
        "en" : "An exception is thrown due to a null value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "throws_on_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "null_pointer_dereference_exception",
      "subtype" : "throws_on_null",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Null value leads to thrown exception"
      },
      "description" : {
        "en" : "A null value is passed to a function that throws an exception in that case"
      },
      "local_effect" : {
        "en" : "An exception is thrown due to a null value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Null pointer dereferences",
        "cweCategory" : 476,
        "impact" : "Medium",
        "subcategory" : "throws_on_null",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "overflow_before_widen",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unintentional integer overflow"
      },
      "description" : {
        "en" : "An integer overflow occurs, with the result converted to a wider integer type"
      },
      "local_effect" : {
        "en" : "The expression's value may not be what the programmer intended, because the expression is evaluated using a narrow (i.e. few bits) integer type."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 190,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "overflow_before_widen",
      "subtype" : null,
      "code-language" : "java",
      "name" : {
        "en" : "Unintentional integer overflow"
      },
      "description" : {
        "en" : "An integer overflow occurs, with the result converted to a wider integer type"
      },
      "local_effect" : {
        "en" : "The expression's value may not be what the programmer intended, because the expression is evaluated using a narrow (i.e. few bits) integer type."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 190,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "overflow_before_widen",
      "subtype" : null,
      "code-language" : "c#",
      "name" : {
        "en" : "Unintentional integer overflow"
      },
      "description" : {
        "en" : "An integer overflow occurs, with the result converted to a wider integer type"
      },
      "local_effect" : {
        "en" : "The expression's value may not be what the programmer intended, because the expression is evaluated using a narrow (i.e. few bits) integer type."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 190,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "overflow_before_widen",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unintentional integer overflow"
      },
      "description" : {
        "en" : "An integer overflow occurs, with the result converted to a wider integer type"
      },
      "local_effect" : {
        "en" : "The expression's value may not be what the programmer intended, because the expression is evaluated using a narrow (i.e. few bits) integer type."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 190,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "array_vs_singleton",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Out-of-bounds access"
      },
      "description" : {
        "en" : "Access of memory past the end of a memory buffer"
      },
      "local_effect" : {
        "en" : "Memory not owned by this buffer will be accessed, causing memory corruption or incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "array_vs_singleton",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Out-of-bounds access"
      },
      "description" : {
        "en" : "Access of memory past the end of a memory buffer"
      },
      "local_effect" : {
        "en" : "Memory not owned by this buffer will be accessed, causing memory corruption or incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "bad_alloc_arithmetic",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Stray pointer arithmetic"
      },
      "description" : {
        "en" : "Pointer arithmetic performed on freshly allocated memory"
      },
      "local_effect" : {
        "en" : "The pointer value returned from the allocator may be lost, making it difficult to deallocate later."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "bad_alloc_arithmetic",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Stray pointer arithmetic"
      },
      "description" : {
        "en" : "Pointer arithmetic performed on freshly allocated memory"
      },
      "local_effect" : {
        "en" : "The pointer value returned from the allocator may be lost, making it difficult to deallocate later."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "illegal_address",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Illegal address computation"
      },
      "description" : {
        "en" : "An illegal address is computed, which either precedes a buffer or is more than just-past its end"
      },
      "local_effect" : {
        "en" : "If this address is later used for bounds checking another pointer before dereferencing, an overrun may occur due to the weak guard."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "illegal_address",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "illegal_address",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Illegal address computation"
      },
      "description" : {
        "en" : "An illegal address is computed, which either precedes a buffer or is more than just-past its end"
      },
      "local_effect" : {
        "en" : "If this address is later used for bounds checking another pointer before dereferencing, an overrun may occur due to the weak guard."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "illegal_address",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "logic_error",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Out-of-bounds access"
      },
      "description" : {
        "en" : "Out-of-bounds access to a buffer"
      },
      "local_effect" : {
        "en" : "Access of memory not owned by this buffer may cause crashes or incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "logic_error",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Out-of-bounds access"
      },
      "description" : {
        "en" : "Out-of-bounds access to a buffer"
      },
      "local_effect" : {
        "en" : "Access of memory not owned by this buffer may cause crashes or incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "read",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Out-of-bounds read"
      },
      "description" : {
        "en" : "Out-of-bounds read from a buffer"
      },
      "local_effect" : {
        "en" : "Incorrect values read from a different memory region will cause incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 125,
        "impact" : "High",
        "subcategory" : "read",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "read",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Out-of-bounds read"
      },
      "description" : {
        "en" : "Out-of-bounds read from a buffer"
      },
      "local_effect" : {
        "en" : "Incorrect values read from a different memory region will cause incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 125,
        "impact" : "High",
        "subcategory" : "read",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "strlen",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Allocation size error"
      },
      "description" : {
        "en" : "Allocation size does not include space for the null-terminator needed for a string"
      },
      "local_effect" : {
        "en" : "A buffer overrun may occur if the string is copied into the buffer."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "strlen",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "strlen",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Allocation size error"
      },
      "description" : {
        "en" : "Allocation size does not include space for the null-terminator needed for a string"
      },
      "local_effect" : {
        "en" : "A buffer overrun may occur if the string is copied into the buffer."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "strlen",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "write",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Out-of-bounds write"
      },
      "description" : {
        "en" : "Out-of-bounds write to a buffer"
      },
      "local_effect" : {
        "en" : "This could cause an immediate crash or incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "write",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "overrun",
      "subtype" : "write",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Out-of-bounds write"
      },
      "description" : {
        "en" : "Out-of-bounds write to a buffer"
      },
      "local_effect" : {
        "en" : "This could cause an immediate crash or incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "write",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "overwrite_of_lock_field_during_critical_section",
      "subtype" : null,
      "code-language" : "java",
      "name" : {
        "en" : "Bad choice of lock object"
      },
      "description" : {
        "en" : "The field used as a lock can be assigned a different value while the critical section is operating. This can cause multiple threads to enter the critical section at the same time, which may cause nondeterministic behavior."
      },
      "local_effect" : {
        "en" : "Nondeterministic locking behavior"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Unreliable locking behavior",
        "cweCategory" : 543,
        "impact" : "High",
        "subcategory" : "unsafe_assign_to_locked_field",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "overwrite_of_lock_field_during_critical_section",
      "subtype" : null,
      "code-language" : "c#",
      "name" : {
        "en" : "Bad choice of lock object"
      },
      "description" : {
        "en" : "The field used as a lock can be assigned a different value while the critical section is operating. This can cause multiple threads to enter the critical section at the same time, which may cause nondeterministic behavior."
      },
      "local_effect" : {
        "en" : "Nondeterministic locking behavior"
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Unreliable locking behavior",
        "cweCategory" : 543,
        "impact" : "High",
        "subcategory" : "unsafe_assign_to_locked_field",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "pass_by_value",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Big parameter passed by value"
      },
      "description" : {
        "en" : "A large function call parameter or exception catch statement is passed by value"
      },
      "local_effect" : {
        "en" : "Copying large values is inefficient, consider passing by reference; size thresholds for detection can be adjusted."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Performance inefficiencies",
        "cweCategory" : 398,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "pass_by_value",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Big parameter passed by value"
      },
      "description" : {
        "en" : "A large function call parameter or exception catch statement is passed by value"
      },
      "local_effect" : {
        "en" : "Copying large values is inefficient, consider passing by reference; size thresholds for detection can be adjusted."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Performance inefficiencies",
        "cweCategory" : 398,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "race_condition",
      "subtype" : "missing_lock",
      "code-language" : "java",
      "name" : {
        "en" : "Data race condition"
      },
      "description" : {
        "en" : "Thread shared data is accessed without holding an appropriate lock, possibly causing a race condition"
      },
      "local_effect" : {
        "en" : "The value of the shared data will be determined by the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "race_condition",
      "subtype" : "missing_lock",
      "code-language" : "c#",
      "name" : {
        "en" : "Data race condition"
      },
      "description" : {
        "en" : "Thread shared data is accessed without holding an appropriate lock, possibly causing a race condition"
      },
      "local_effect" : {
        "en" : "The value of the shared data will be determined by the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "race_condition",
      "subtype" : "missing_lock_on_read",
      "code-language" : "java",
      "name" : {
        "en" : "Unguarded read"
      },
      "description" : {
        "en" : "Thread shared data is accessed without holding an appropriate lock, possibly causing a race condition"
      },
      "local_effect" : {
        "en" : "The value of the shared data will be determined by the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "Medium",
        "subcategory" : "unlocked_read",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "race_condition",
      "subtype" : "missing_lock_on_write",
      "code-language" : "java",
      "name" : {
        "en" : "Unguarded write"
      },
      "description" : {
        "en" : "Thread shared data is accessed without holding an appropriate lock, possibly causing a race condition"
      },
      "local_effect" : {
        "en" : "The value of the shared data will be determined by the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "Medium",
        "subcategory" : "unlocked_write",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "race_condition",
      "subtype" : "non_static_guarding_static",
      "code-language" : "java",
      "name" : {
        "en" : "Data race condition"
      },
      "description" : {
        "en" : "Static field is protected by a per-instance lock"
      },
      "local_effect" : {
        "en" : "No single lock protects the static data, so the value of the data will be determined by the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "race_condition",
      "subtype" : "non_static_guarding_static",
      "code-language" : "c#",
      "name" : {
        "en" : "Data race condition"
      },
      "description" : {
        "en" : "Static field is protected by a per-instance lock"
      },
      "local_effect" : {
        "en" : "No single lock protects the static data, so the value will be determined by the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : null,
      "code-language" : "java",
      "name" : {
        "en" : "Resource leak"
      },
      "description" : {
        "en" : "Leak of a system resource"
      },
      "local_effect" : {
        "en" : "The system resource will not be reclaimed and reused, reducing the future availability of the resource."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 404,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : null,
      "code-language" : "c#",
      "name" : {
        "en" : "Resource leak"
      },
      "description" : {
        "en" : "Leak of a system resource such as streams, channels, or other resources"
      },
      "local_effect" : {
        "en" : "The system resource will not be reclaimed and reused, reducing the future availability of the resource."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 404,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "channel",
      "code-language" : "c#",
      "name" : {
        "en" : "Channel leak"
      },
      "description" : {
        "en" : "Leak of a channel object"
      },
      "local_effect" : {
        "en" : "The resource underlying the channel will remain open and unused, reducing the future availability of channels."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 404,
        "impact" : "High",
        "subcategory" : "channel",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "database",
      "code-language" : "c#",
      "name" : {
        "en" : "Database connection leak"
      },
      "description" : {
        "en" : "Leak of a database connection"
      },
      "local_effect" : {
        "en" : "The database connection will remain open and unused, reducing the future availability of other connections."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 404,
        "impact" : "High",
        "subcategory" : "database",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "exceptional_path",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Resource leak on an exceptional path"
      },
      "description" : {
        "en" : "Leak of a system resource on an exception path (probably error handling)"
      },
      "local_effect" : {
        "en" : "The system resource will not be reclaimed and reused, reducing the future availability of the resource."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Exceptional resource leaks",
        "cweCategory" : 404,
        "impact" : "Low",
        "subcategory" : "exceptional_path",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "exceptional_path",
      "code-language" : "java",
      "name" : {
        "en" : "Resource leak on an exceptional path"
      },
      "description" : {
        "en" : "Leak of a system resource on an exception path (probably error handling)"
      },
      "local_effect" : {
        "en" : "The system resource will not be reclaimed and reused, reducing the future availability of the resource."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Exceptional resource leaks",
        "cweCategory" : 404,
        "impact" : "Low",
        "subcategory" : "exceptional_path",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "exceptional_path",
      "code-language" : "c#",
      "name" : {
        "en" : "Resource leak on an exceptional path"
      },
      "description" : {
        "en" : "Leak of a system resource such as streams, channels, or other resources on an exception path (probably error handling)"
      },
      "local_effect" : {
        "en" : "The system resource will not be reclaimed and reused, reducing the future availability of the resource."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Exceptional resource leaks",
        "cweCategory" : 404,
        "impact" : "Low",
        "subcategory" : "exceptional_path",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "exceptional_path",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Resource leak on an exceptional path"
      },
      "description" : {
        "en" : "Leak of a system resource on an exception path (probably error handling)"
      },
      "local_effect" : {
        "en" : "The system resource will not be reclaimed and reused, reducing the future availability of the resource."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Exceptional resource leaks",
        "cweCategory" : 404,
        "impact" : "Low",
        "subcategory" : "exceptional_path",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "fds_handles",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Integer handle or fd leak"
      },
      "description" : {
        "en" : "Leak of a system resource with an integer descriptor such as a file descriptor or a handle in Windows"
      },
      "local_effect" : {
        "en" : "The system resource will not be reclaimed and reused, reducing the future availability of the resource."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 775,
        "impact" : "High",
        "subcategory" : "fds_handles",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "fds_handles",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Integer handle or fd leak"
      },
      "description" : {
        "en" : "Leak of a system resource with an integer descriptor such as a file descriptor or a handle in Windows"
      },
      "local_effect" : {
        "en" : "The system resource will not be reclaimed and reused, reducing the future availability of the resource."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 775,
        "impact" : "High",
        "subcategory" : "fds_handles",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "memory",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Resource leak"
      },
      "description" : {
        "en" : "Leak of memory or pointers to system resources"
      },
      "local_effect" : {
        "en" : "The system resource will not be reclaimed and reused, reducing the future availability of the resource."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 404,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "memory",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Resource leak"
      },
      "description" : {
        "en" : "Leak of memory or pointers to system resources"
      },
      "local_effect" : {
        "en" : "The system resource will not be reclaimed and reused, reducing the future availability of the resource."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 404,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "socket",
      "code-language" : "java",
      "name" : {
        "en" : "Socket leak"
      },
      "description" : {
        "en" : "Leak of a socket resource"
      },
      "local_effect" : {
        "en" : "The system socket will remain open and unused, reducing the future availability of sockets for other purposes."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 403,
        "impact" : "High",
        "subcategory" : "socket",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "socket",
      "code-language" : "c#",
      "name" : {
        "en" : "Socket leak"
      },
      "description" : {
        "en" : "Leak of a socket resource"
      },
      "local_effect" : {
        "en" : "The system socket will remain open and unused, reducing the future availability of sockets for other purposes."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 403,
        "impact" : "High",
        "subcategory" : "socket",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "stream",
      "code-language" : "java",
      "name" : {
        "en" : "Stream leak"
      },
      "description" : {
        "en" : "Leak of a stream representing a file or other resource"
      },
      "local_effect" : {
        "en" : "The stream's underlying resource will not be reclaimed and reused, reducing the future availability of the resource."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 404,
        "impact" : "High",
        "subcategory" : "stream",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "resource_leak",
      "subtype" : "stream",
      "code-language" : "c#",
      "name" : {
        "en" : "Stream leak"
      },
      "description" : {
        "en" : "Leak of a stream representing a file or other resource"
      },
      "local_effect" : {
        "en" : "The stream's underlying resource will not be reclaimed and reused, reducing the future availability of the resource."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Resource leaks",
        "cweCategory" : 404,
        "impact" : "High",
        "subcategory" : "stream",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "return_local",
      "subtype" : "return",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Pointer to local outside scope"
      },
      "description" : {
        "en" : "Pointer to a local stack variable returned or used outside scope"
      },
      "local_effect" : {
        "en" : "Dereferencing the returned or out-of-scope stack pointer will access an invalid location on the stack after its scope or after the function returns."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 562,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "return_local",
      "subtype" : "return",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Pointer to local outside scope"
      },
      "description" : {
        "en" : "Pointer to a local stack variable returned or used outside scope"
      },
      "local_effect" : {
        "en" : "Dereferencing the returned or out-of-scope stack pointer will access an invalid location on the stack after its scope or after the function returns."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 562,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "return_local",
      "subtype" : "store",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Pointer to local outside scope"
      },
      "description" : {
        "en" : "Pointer to a local stack variable stored in a field or global variable"
      },
      "local_effect" : {
        "en" : "Later dereferencing of the saved stack pointer will access an invalid location on the stack outside its scope or after the function returns."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 562,
        "impact" : "High",
        "subcategory" : "escape_local_addr_to_fields_or_globals",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "return_local",
      "subtype" : "store",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Pointer to local outside scope"
      },
      "description" : {
        "en" : "Pointer to a local stack variable stored in a field or global variable"
      },
      "local_effect" : {
        "en" : "Later dereferencing of the saved stack pointer will access an invalid location on the stack outside its scope or after the function returns."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 562,
        "impact" : "High",
        "subcategory" : "escape_local_addr_to_fields_or_globals",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "reverse_negative",
      "subtype" : "array_index_read",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Negative array index read"
      },
      "description" : {
        "en" : "Read from array at negative index"
      },
      "local_effect" : {
        "en" : "A memory location at a negative offset from the beginning of the array will be read, resulting in incorrect values."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 129,
        "impact" : "High",
        "subcategory" : "array_index_read",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "reverse_negative",
      "subtype" : "array_index_read",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Negative array index read"
      },
      "description" : {
        "en" : "Read from array at negative index"
      },
      "local_effect" : {
        "en" : "A memory location at a negative offset from the beginning of the array will be read, resulting in incorrect values."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 129,
        "impact" : "High",
        "subcategory" : "array_index_read",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "reverse_negative",
      "subtype" : "array_index_write",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Negative array index write"
      },
      "description" : {
        "en" : "Write to array at negative index"
      },
      "local_effect" : {
        "en" : "A memory location at a negative offset from the beginning of the array will be written, likely causing a crash later."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 129,
        "impact" : "High",
        "subcategory" : "array_index_write",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "reverse_negative",
      "subtype" : "array_index_write",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Negative array index write"
      },
      "description" : {
        "en" : "Write to array at negative index"
      },
      "local_effect" : {
        "en" : "A memory location at a negative offset from the beginning of the array will be written, likely causing a crash later."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 129,
        "impact" : "High",
        "subcategory" : "array_index_write",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "reverse_negative",
      "subtype" : "critical_argument",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Argument cannot be negative"
      },
      "description" : {
        "en" : "Negative value used as argument to a function expecting a positive value (for example, size of buffer or allocation)"
      },
      "local_effect" : {
        "en" : "The negative  argument will be interpreted as a very large unsigned value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "critical_argument",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "reverse_negative",
      "subtype" : "critical_argument",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Argument cannot be negative"
      },
      "description" : {
        "en" : "Negative value used as argument to a function expecting a positive value (for example, size of buffer or allocation)"
      },
      "local_effect" : {
        "en" : "The negative  argument will be interpreted as a very large unsigned value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 119,
        "impact" : "High",
        "subcategory" : "critical_argument",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "reverse_negative",
      "subtype" : "unsigned",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Improper use of negative value"
      },
      "description" : {
        "en" : "Negative value used incorrectly where positive value is expected"
      },
      "local_effect" : {
        "en" : "The negative value may be interpreted as an unsigned value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 394,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "reverse_negative",
      "subtype" : "unsigned",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Improper use of negative value"
      },
      "description" : {
        "en" : "Negative value used incorrectly where positive value is expected"
      },
      "local_effect" : {
        "en" : "The negative value may be interpreted as an unsigned value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 394,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "side_effect_in_assert",
      "subtype" : "definite",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Side effect in assertion"
      },
      "description" : {
        "en" : "Assertion contains an operation with a side effect"
      },
      "local_effect" : {
        "en" : "If the assertion is turned off, the side-effect may be lost."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "side_effect_in_assert",
      "subtype" : "definite",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Side effect in assertion"
      },
      "description" : {
        "en" : "Assertion contains an operation with a side effect"
      },
      "local_effect" : {
        "en" : "If the assertion is turned off, the side-effect may be lost."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "side_effect_in_assert",
      "subtype" : "function_call",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Function in assertion"
      },
      "description" : {
        "en" : "Assertion contains a function call which may have a side effect"
      },
      "local_effect" : {
        "en" : "If the assertion is turned off, the function call could be skipped and any side-effects lost."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "side_effect_is_function",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "side_effect_in_assert",
      "subtype" : "function_call",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Function in assertion"
      },
      "description" : {
        "en" : "Assertion contains a function call which may have a side effect"
      },
      "local_effect" : {
        "en" : "If the assertion is turned off, the function call could be skipped and any side-effects lost."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "side_effect_is_function",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sign_extension",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unintended sign extension"
      },
      "description" : {
        "en" : "Value may be sign extended unintentionally"
      },
      "local_effect" : {
        "en" : "The sign-extended value may be interpreted as a very large number."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 194,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sign_extension",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unintended sign extension"
      },
      "description" : {
        "en" : "Value may be sign extended unintentionally"
      },
      "local_effect" : {
        "en" : "The sign-extended value may be interpreted as a very large number."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Integer handling issues",
        "cweCategory" : 194,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sizeof_mismatch",
      "subtype" : "extra_sizeof",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Extra sizeof expression"
      },
      "description" : {
        "en" : "The sizeof operator is not required in the expression"
      },
      "local_effect" : {
        "en" : "The extraneous sizeof may cause an incorrect expression. Pointer arithmetic increments or decrements the pointer by multiples of the number of bytes in the target of the pointer."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "extra_sizeof",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sizeof_mismatch",
      "subtype" : "extra_sizeof",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Extra sizeof expression"
      },
      "description" : {
        "en" : "The sizeof operator is not required in the expression"
      },
      "local_effect" : {
        "en" : "The extraneous sizeof may cause an incorrect expression. Pointer arithmetic increments or decrements the pointer by multiples of the number of bytes in the target of the pointer."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "extra_sizeof",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sizeof_mismatch",
      "subtype" : "logic_error",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Misused sizeof"
      },
      "description" : {
        "en" : "The sizeof operator is used erroneously in an expression or is invoked on the wrong argument"
      },
      "local_effect" : {
        "en" : "The misuse of the sizeof operator is caused by invoking sizeof on a pointer instead of its target, operator precedence issues, or incorrect pointer arithmetic. The result is an incorrectly computed expression that may cause unexpected program behavior."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sizeof_mismatch",
      "subtype" : "logic_error",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Misused sizeof"
      },
      "description" : {
        "en" : "The sizeof operator is used erroneously in an expression or is invoked on the wrong argument"
      },
      "local_effect" : {
        "en" : "The misuse of the sizeof operator is caused by invoking sizeof on a pointer instead of its target, operator precedence issues, or incorrect pointer arithmetic. The result is an incorrectly computed expression that may cause unexpected program behavior."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sizeof_mismatch",
      "subtype" : "missing_parentheses",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Missing parentheses"
      },
      "description" : {
        "en" : "Missing parentheses caused unintended operator precedence of casting before the pointer arithmetic"
      },
      "local_effect" : {
        "en" : "This is a result of a common misunderstanding of operator precedence; the incorrect expression can result in a pointer pointing to illegal memory locations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 783,
        "impact" : "High",
        "subcategory" : "missing_parentheses",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sizeof_mismatch",
      "subtype" : "missing_parentheses",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Missing parentheses"
      },
      "description" : {
        "en" : "Missing parentheses caused unintended operator precedence of casting before the pointer arithmetic"
      },
      "local_effect" : {
        "en" : "This is a result of a common misunderstanding of operator precedence; the incorrect expression can result in a pointer pointing to illegal memory locations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 783,
        "impact" : "High",
        "subcategory" : "missing_parentheses",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sizeof_mismatch",
      "subtype" : "sizeof_punning",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Sizeof not portable"
      },
      "description" : {
        "en" : "The sizeof operator is used on a wrong argument that incidentally has the same size"
      },
      "local_effect" : {
        "en" : "While the program behaves correctly on the current processor architecture, it relies on potentially non-portable assumptions about type sizes."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 467,
        "impact" : "Low",
        "subcategory" : "sizeof_punning",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sizeof_mismatch",
      "subtype" : "sizeof_punning",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Sizeof not portable"
      },
      "description" : {
        "en" : "The sizeof operator is used on a wrong argument that incidentally has the same size"
      },
      "local_effect" : {
        "en" : "While the program behaves correctly on the current processor architecture, it relies on potentially non-portable assumptions about type sizes."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 467,
        "impact" : "Low",
        "subcategory" : "sizeof_punning",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sizeof_mismatch",
      "subtype" : "wrong_size_value",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Wrong size argument"
      },
      "description" : {
        "en" : "The wrong size value is passed to a function"
      },
      "local_effect" : {
        "en" : "The wrong size value is used as an argument to a function. This may cause unexpected program behaviors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "wrong_size_value",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sizeof_mismatch",
      "subtype" : "wrong_size_value",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Wrong size argument"
      },
      "description" : {
        "en" : "The wrong size value is passed to a function"
      },
      "local_effect" : {
        "en" : "The wrong size value is used as an argument to a function. This may cause unexpected program behaviors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "wrong_size_value",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sizeof_mismatch",
      "subtype" : "wrong_sizeof",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Wrong sizeof argument"
      },
      "description" : {
        "en" : "The sizeof operator is invoked on the wrong argument"
      },
      "local_effect" : {
        "en" : "The wrong sizeof value is used in an expression or as argument to a function. The result is an incorrect value that may cause unexpected program behaviors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "wrong_sizeof",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "sizeof_mismatch",
      "subtype" : "wrong_sizeof",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Wrong sizeof argument"
      },
      "description" : {
        "en" : "The sizeof operator is invoked on the wrong argument"
      },
      "local_effect" : {
        "en" : "The wrong sizeof value is used in an expression or as argument to a function. The result is an incorrect value that may cause unexpected program behaviors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 569,
        "impact" : "Medium",
        "subcategory" : "wrong_sizeof",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "stray_semicolon",
      "subtype" : "logic_error",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Stray semicolon"
      },
      "description" : {
        "en" : "The code contains a semicolon where it is probably not intended, such as between a 'for', 'while', or 'if' and a code block."
      },
      "local_effect" : {
        "en" : "A misplaced semicolon is a common typo that can cause unexpected changes to the flow of control in the program that results in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 670,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "stray_semicolon",
      "subtype" : "logic_error",
      "code-language" : "java",
      "name" : {
        "en" : "Stray semicolon"
      },
      "description" : {
        "en" : "The code contains a semicolon where it is probably not intended, such as between a 'for', 'while', or 'if' and a code block."
      },
      "local_effect" : {
        "en" : "A misplaced semicolon is a common typo that can cause unexpected changes to the flow of control in the program that results in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 670,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "stray_semicolon",
      "subtype" : "logic_error",
      "code-language" : "c#",
      "name" : {
        "en" : "Stray semicolon"
      },
      "description" : {
        "en" : "The code contains a semicolon where it is probably not intended, such as between a 'for', 'while', 'if', or 'lock' and a code block."
      },
      "local_effect" : {
        "en" : "A misplaced semicolon is a common typo that can cause unexpected changes to the flow of control in the program that results in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 670,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "stray_semicolon",
      "subtype" : "logic_error",
      "code-language" : "javascript",
      "name" : {
        "en" : "Stray semicolon"
      },
      "description" : {
        "en" : "The code contains a semicolon where it is probably not intended, such as between a 'for', 'while', or 'if' and a code block."
      },
      "local_effect" : {
        "en" : "A misplaced semicolon is a common typo that can cause unexpected changes to the flow of control in the program that results in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 670,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "stray_semicolon",
      "subtype" : "logic_error",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Stray semicolon"
      },
      "description" : {
        "en" : "The code contains a semicolon where it is probably not intended, such as between a 'for', 'while', or 'if' and a code block."
      },
      "local_effect" : {
        "en" : "A misplaced semicolon is a common typo that can cause unexpected changes to the flow of control in the program that results in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 670,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "stray_semicolon",
      "subtype" : "logic_error",
      "code-language" : "php",
      "name" : {
        "en" : "Stray semicolon"
      },
      "description" : {
        "en" : "The code contains a semicolon where it is probably not intended, such as between a 'for', 'while', or 'if' and a code block."
      },
      "local_effect" : {
        "en" : "A misplaced semicolon is a common typo that can cause unexpected changes to the flow of control in the program that results in logical errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 670,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "stream_format_state",
      "subtype" : "not_restored",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Not restoring ostream format"
      },
      "description" : {
        "en" : "Not restoring the stream format state of an ostream"
      },
      "local_effect" : {
        "en" : "The next output operation may not expect the stream format state being altered, resulting in incorrectly formatted output."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "stream_format_state",
      "subtype" : "not_restored",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Not restoring ostream format"
      },
      "description" : {
        "en" : "Not restoring the stream format state of an ostream"
      },
      "local_effect" : {
        "en" : "The next output operation may not expect the stream format state being altered, resulting in incorrectly formatted output."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "stream_format_state",
      "subtype" : "suspicious_setf_mask",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unknown mask in setf"
      },
      "description" : {
        "en" : "setf (or a similar) was called, but the argument was not recognized as being composed of valid format state bits"
      },
      "local_effect" : {
        "en" : "Usually this error is caused by an analysis imprecision, but a true bug may indicate an incorrect mask."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "suspicious_setf_mask",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "stream_format_state",
      "subtype" : "suspicious_setf_mask",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unknown mask in setf"
      },
      "description" : {
        "en" : "setf (or a similar) was called, but the argument was not recognized as being composed of valid format state bits"
      },
      "local_effect" : {
        "en" : "Usually this error is caused by an analysis imprecision, but a true bug may indicate an incorrect mask."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "suspicious_setf_mask",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "swapped_arguments",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Arguments in wrong order"
      },
      "description" : {
        "en" : "The arguments to a function call are provided in the wrong order."
      },
      "local_effect" : {
        "en" : "The function call will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 683,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "swapped_arguments",
      "subtype" : null,
      "code-language" : "java",
      "name" : {
        "en" : "Arguments in wrong order"
      },
      "description" : {
        "en" : "The arguments to a function call are provided in the wrong order."
      },
      "local_effect" : {
        "en" : "The function call will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 683,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "swapped_arguments",
      "subtype" : null,
      "code-language" : "c#",
      "name" : {
        "en" : "Arguments in wrong order"
      },
      "description" : {
        "en" : "The arguments to a function call are provided in the wrong order."
      },
      "local_effect" : {
        "en" : "The function call will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 683,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "swapped_arguments",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Arguments in wrong order"
      },
      "description" : {
        "en" : "The arguments to a function call are provided in the wrong order."
      },
      "local_effect" : {
        "en" : "The function call will not have its intended effect."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 683,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "switch_on_boolean_result_of_equality_check",
      "subtype" : "no_effect",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Switch test assignment"
      },
      "description" : {
        "en" : "A boolean test within a switch condition is likely an intended assignment"
      },
      "local_effect" : {
        "en" : "The switch condition will evaluate to either 0 or 1, which is more easily written with an if statement."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 482,
        "impact" : "Medium",
        "subcategory" : "bool_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "switch_on_boolean_result_of_equality_check",
      "subtype" : "no_effect",
      "code-language" : "javascript",
      "name" : {
        "en" : "Switch test assignment"
      },
      "description" : {
        "en" : "A boolean test within a switch condition is likely an intended assignment"
      },
      "local_effect" : {
        "en" : "The switch condition will evaluate to either 0 or 1, which is more easily written with an if statement."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 482,
        "impact" : "Medium",
        "subcategory" : "bool_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "switch_on_boolean_result_of_equality_check",
      "subtype" : "no_effect",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Switch test assignment"
      },
      "description" : {
        "en" : "A boolean test within a switch condition is likely an intended assignment"
      },
      "local_effect" : {
        "en" : "The switch condition will evaluate to either 0 or 1, which is more easily written with an if statement."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 482,
        "impact" : "Medium",
        "subcategory" : "bool_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "switch_on_boolean_result_of_equality_check",
      "subtype" : "no_effect",
      "code-language" : "php",
      "name" : {
        "en" : "Switch test assignment"
      },
      "description" : {
        "en" : "A boolean test within a switch condition is likely an intended assignment"
      },
      "local_effect" : {
        "en" : "The switch condition will evaluate to either 0 or 1, which is more easily written with an if statement."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 482,
        "impact" : "Medium",
        "subcategory" : "bool_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "switch_on_boolean_result_of_equality_check",
      "subtype" : "no_effect",
      "code-language" : "ruby",
      "name" : {
        "en" : "Switch test assignment"
      },
      "description" : {
        "en" : "A boolean test within a switch condition is likely an intended assignment"
      },
      "local_effect" : {
        "en" : "The switch condition will evaluate to either 0 or 1, which is more easily written with an if statement."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 482,
        "impact" : "Medium",
        "subcategory" : "bool_switch",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "uncaught_exception",
      "subtype" : "policy",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Uncaught exception"
      },
      "description" : {
        "en" : "A C++ exception is thrown but never caught"
      },
      "local_effect" : {
        "en" : "If the exception is ever thrown, the program will crash."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 248,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "uncaught_exception",
      "subtype" : "policy",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Uncaught exception"
      },
      "description" : {
        "en" : "A C++ exception is thrown but never caught"
      },
      "local_effect" : {
        "en" : "If the exception is ever thrown, the program will crash."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 248,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "argument",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unchecked return value as arg"
      },
      "description" : {
        "en" : "Value returned from a function is not checked for errors, and passed directly to another function as an argument"
      },
      "local_effect" : {
        "en" : "If the function returns an error value, it may be assumed to be a non-error value by the outer function call."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "unchecked_arg",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "argument",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unchecked return value as arg"
      },
      "description" : {
        "en" : "Value returned from a function is not checked for errors, and passed directly to another function as an argument"
      },
      "local_effect" : {
        "en" : "If the function returns an error value, it may be assumed to be a non-error value by the outer function call."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "unchecked_arg",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "inferred",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unchecked return value"
      },
      "description" : {
        "en" : "Value returned from a function is not checked for errors before being used"
      },
      "local_effect" : {
        "en" : "If the function returns an error value, the error value may be mistaken for a normal value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "inferred",
      "code-language" : "java",
      "name" : {
        "en" : "Unchecked return value"
      },
      "description" : {
        "en" : "Value returned from a function is not checked for errors before being used"
      },
      "local_effect" : {
        "en" : "If the function returns an error value, the error value may be mistaken for a normal value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "inferred",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unchecked return value"
      },
      "description" : {
        "en" : "Value returned from a function is not checked for errors before being used"
      },
      "local_effect" : {
        "en" : "If the function returns an error value, the error value may be mistaken for a normal value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "library_function",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unchecked return value from library"
      },
      "description" : {
        "en" : "Value returned from a library function is not checked for errors before being used.  This value may indicate an error condition."
      },
      "local_effect" : {
        "en" : "The function returns a value that indicates an error condition.  If this is not checked, the error condition may not be handled correctly."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "library_function",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "library_function",
      "code-language" : "java",
      "name" : {
        "en" : "Unchecked return value from library"
      },
      "description" : {
        "en" : "Value returned from a library function is not checked for errors before being used.  This value may indicate an error condition."
      },
      "local_effect" : {
        "en" : "The function returns a value that indicates an error condition.  If this is not checked, the error condition may not be handled correctly."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "library_function",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "library_function",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unchecked return value from library"
      },
      "description" : {
        "en" : "Value returned from a library function is not checked for errors before being used.  This value may indicate an error condition."
      },
      "local_effect" : {
        "en" : "The function returns a value that indicates an error condition.  If this is not checked, the error condition may not be handled correctly."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "library_function",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "returns_error_info",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unchecked error in return value"
      },
      "description" : {
        "en" : "Function may return error code, but value returned from this function is not checked for error condition."
      },
      "local_effect" : {
        "en" : "If the function returns an error value, the error value may be mistaken for a normal value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "returns_error_info",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "short_read",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Ignoring number of bytes read"
      },
      "description" : {
        "en" : "Value returned from a function and indicating the number of bytes read is ignored."
      },
      "local_effect" : {
        "en" : "The number of bytes copied into the buffer can be smaller than the requested number and the buffer can potentially be accessed out of range."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "short_read",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "short_read",
      "code-language" : "java",
      "name" : {
        "en" : "Ignoring number of bytes read"
      },
      "description" : {
        "en" : "Value returned from a function and indicating the number of bytes read is ignored."
      },
      "local_effect" : {
        "en" : "The number of bytes copied into the buffer can be smaller than the requested number and the buffer can potentially be accessed out of range."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "short_read",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "short_read",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Ignoring number of bytes read"
      },
      "description" : {
        "en" : "Value returned from a function and indicating the number of bytes read is ignored."
      },
      "local_effect" : {
        "en" : "The number of bytes copied into the buffer can be smaller than the requested number and the buffer can potentially be accessed out of range."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "short_read",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "user_required",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unchecked return value from user code"
      },
      "description" : {
        "en" : "Value returned from a program function is not checked before being used.  It has been marked that its return value should always be checked."
      },
      "local_effect" : {
        "en" : "If the function returns an error value, the error value may be mistaken for a normal value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "user_required",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "user_required",
      "code-language" : "java",
      "name" : {
        "en" : "Unchecked return value from user code"
      },
      "description" : {
        "en" : "Value returned from a program function is not checked before being used.  It has been marked that its return value should always be checked."
      },
      "local_effect" : {
        "en" : "If the function returns an error value, the error value may be mistaken for a normal value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "user_required",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unchecked_return_value",
      "subtype" : "user_required",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unchecked return value from user code"
      },
      "description" : {
        "en" : "Value returned from a program function is not checked before being used.  It has been marked that its return value should always be checked."
      },
      "local_effect" : {
        "en" : "If the function returns an error value, the error value may be mistaken for a normal value."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 252,
        "impact" : "Medium",
        "subcategory" : "user_required",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unclassified_parse_warning",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Parse warning"
      },
      "description" : {
        "en" : "A parse warning from the Coverity parser may indicate a bug, or poor coding practice"
      },
      "local_effect" : {
        "en" : "A parse warning may reduce maintainability of the code, or it may indicate a serious error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Parse warnings",
        "cweCategory" : 398,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unclassified_parse_warning",
      "subtype" : null,
      "code-language" : "swift",
      "name" : {
        "en" : "Parse warning"
      },
      "description" : {
        "en" : "A parse warning from the Coverity parser may indicate a bug, or poor coding practice"
      },
      "local_effect" : {
        "en" : "A parse warning may reduce maintainability of the code, or it may indicate a serious error."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Parse warnings",
        "cweCategory" : 398,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unclassified_recovery_warning",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Parse recovery warning"
      },
      "description" : {
        "en" : "A parse error caused a function to be skipped by Coverity Static Analysis"
      },
      "local_effect" : {
        "en" : "The function will not be analyzed for other defects; any callers of the function will not have access to its function summary."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Parse warnings",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unclassified_recovery_warning",
      "subtype" : null,
      "code-language" : "swift",
      "name" : {
        "en" : "Parse recovery warning"
      },
      "description" : {
        "en" : "A parse error caused a function to be skipped by Coverity Static Analysis"
      },
      "local_effect" : {
        "en" : "The function will not be analyzed for other defects; any callers of the function will not have access to its function summary."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Parse warnings",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unclassified_semantic_warning",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Parse semantic warning"
      },
      "description" : {
        "en" : "The function contains a non-portable or non-standard construct forcing the Coverity parser to guess the meaning"
      },
      "local_effect" : {
        "en" : "There may be a loss of precision if the Coverity parser misinterpreted the code in the function."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Parse warnings",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unclassified_semantic_warning",
      "subtype" : null,
      "code-language" : "swift",
      "name" : {
        "en" : "Parse semantic warning"
      },
      "description" : {
        "en" : "The function contains a non-portable or non-standard construct forcing the Coverity parser to guess the meaning"
      },
      "local_effect" : {
        "en" : "There may be a loss of precision if the Coverity parser misinterpreted the code in the function."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Parse warnings",
        "cweCategory" : null,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unexpected_control_flow",
      "subtype" : "continue_in_do_while_false",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unexpected control flow"
      },
      "description" : {
        "en" : "Loop body does not re-execute on 'continue' statement"
      },
      "local_effect" : {
        "en" : "Execution jumps out of the loop rather than continuing."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "continue_in_do_while_false",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unexpected_control_flow",
      "subtype" : "continue_in_do_while_false",
      "code-language" : "java",
      "name" : {
        "en" : "Unexpected control flow"
      },
      "description" : {
        "en" : "Loop body does not re-execute on 'continue' statement"
      },
      "local_effect" : {
        "en" : "Execution jumps out of the loop rather than continuing."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "continue_in_do_while_false",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unexpected_control_flow",
      "subtype" : "continue_in_do_while_false",
      "code-language" : "c#",
      "name" : {
        "en" : "Unexpected control flow"
      },
      "description" : {
        "en" : "Loop body does not re-execute on 'continue' statement"
      },
      "local_effect" : {
        "en" : "Execution jumps out of the loop rather than continuing."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "continue_in_do_while_false",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unexpected_control_flow",
      "subtype" : "continue_in_do_while_false",
      "code-language" : "javascript",
      "name" : {
        "en" : "Unexpected control flow"
      },
      "description" : {
        "en" : "Loop body does not re-execute on 'continue' statement"
      },
      "local_effect" : {
        "en" : "Execution jumps out of the loop rather than continuing."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "continue_in_do_while_false",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unexpected_control_flow",
      "subtype" : "continue_in_do_while_false",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unexpected control flow"
      },
      "description" : {
        "en" : "Loop body does not re-execute on 'continue' statement"
      },
      "local_effect" : {
        "en" : "Execution jumps out of the loop rather than continuing."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "continue_in_do_while_false",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unexpected_control_flow",
      "subtype" : "continue_in_do_while_false",
      "code-language" : "php",
      "name" : {
        "en" : "Unexpected control flow"
      },
      "description" : {
        "en" : "Loop body does not re-execute on 'continue' statement"
      },
      "local_effect" : {
        "en" : "Execution jumps out of the loop rather than continuing."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "continue_in_do_while_false",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unexpected_control_flow",
      "subtype" : "continue_in_do_while_false",
      "code-language" : "ruby",
      "name" : {
        "en" : "Unexpected control flow"
      },
      "description" : {
        "en" : "Loop body does not re-execute on 'continue' statement"
      },
      "local_effect" : {
        "en" : "Execution jumps out of the loop rather than continuing."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "continue_in_do_while_false",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unexpected_control_flow",
      "subtype" : "continue_in_do_while_false",
      "code-language" : "swift",
      "name" : {
        "en" : "Unexpected control flow"
      },
      "description" : {
        "en" : "Loop body does not re-execute on 'continue' statement"
      },
      "local_effect" : {
        "en" : "Execution jumps out of the loop rather than continuing."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "continue_in_do_while_false",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unexpected_control_flow",
      "subtype" : "ignored_exception_to_optional",
      "code-language" : "swift",
      "name" : {
        "en" : "Unexpected control flow"
      },
      "description" : {
        "en" : "Creating an optional from a possible exception and discarding the result"
      },
      "local_effect" : {
        "en" : "Any exception thrown by the expression will be quietly ignored."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Error handling issues",
        "cweCategory" : 391,
        "impact" : "Medium",
        "subcategory" : "ignored_exception_to_optional",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unexpected_control_flow",
      "subtype" : "useless_defer",
      "code-language" : "swift",
      "name" : {
        "en" : "Unexpected control flow"
      },
      "description" : {
        "en" : "Defer statement occurs at the end of its scope"
      },
      "local_effect" : {
        "en" : "Statements will be executed immediately rather than at a later time."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 398,
        "impact" : "Medium",
        "subcategory" : "useless_defer",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "array_index_read",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Uninitialized array index read"
      },
      "description" : {
        "en" : "Read from array at uninitialized index"
      },
      "local_effect" : {
        "en" : "Incorrect values will be read from an arbitrary memory location, causing incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 457,
        "impact" : "High",
        "subcategory" : "array_index_read",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "array_index_read",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Uninitialized array index read"
      },
      "description" : {
        "en" : "Read from array at uninitialized index"
      },
      "local_effect" : {
        "en" : "Incorrect values will be read from an arbitrary memory location, causing incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 457,
        "impact" : "High",
        "subcategory" : "array_index_read",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "array_index_write",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Uninitialized array index write"
      },
      "description" : {
        "en" : "Write to array at uninitialized index"
      },
      "local_effect" : {
        "en" : "Some arbitrary memory location is overwritten. Incorrect values may subsequently be read."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 457,
        "impact" : "High",
        "subcategory" : "array_index_write",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "array_index_write",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Uninitialized array index write"
      },
      "description" : {
        "en" : "Write to array at uninitialized index"
      },
      "local_effect" : {
        "en" : "Some arbitrary memory location is overwritten. Incorrect values may subsequently be read."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 457,
        "impact" : "High",
        "subcategory" : "array_index_write",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "pointer_deref_read",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Uninitialized pointer read"
      },
      "description" : {
        "en" : "Reads an uninitialized pointer or its target"
      },
      "local_effect" : {
        "en" : "Incorrect values could be read from, or even written to, an arbitrary memory location, causing incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 457,
        "impact" : "High",
        "subcategory" : "pointer_deref_read",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "pointer_deref_read",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Uninitialized pointer read"
      },
      "description" : {
        "en" : "Reads an uninitialized pointer or its target"
      },
      "local_effect" : {
        "en" : "Incorrect values could be read from, or even written to, an arbitrary memory location, causing incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 457,
        "impact" : "High",
        "subcategory" : "pointer_deref_read",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "pointer_deref_write",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Uninitialized pointer write"
      },
      "description" : {
        "en" : "Write to target of an uninitialized pointer"
      },
      "local_effect" : {
        "en" : "This could cause an immediate crash or incorrect values might be read subsequently resulting in incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 457,
        "impact" : "High",
        "subcategory" : "pointer_deref_write",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "pointer_deref_write",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Uninitialized pointer write"
      },
      "description" : {
        "en" : "Write to target of an uninitialized pointer"
      },
      "local_effect" : {
        "en" : "This could cause an immediate crash or incorrect values might be read subsequently resulting in incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 457,
        "impact" : "High",
        "subcategory" : "pointer_deref_write",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "pointer_field",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Uninitialized pointer field"
      },
      "description" : {
        "en" : "A pointer field is not initialized in the constructor"
      },
      "local_effect" : {
        "en" : "The pointer field will point to an arbitrary memory location, any attempt to write may cause corruption."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Uninitialized members",
        "cweCategory" : 457,
        "impact" : "Medium",
        "subcategory" : "pointer",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "pointer_field",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Uninitialized pointer field"
      },
      "description" : {
        "en" : "A pointer field is not initialized in the constructor"
      },
      "local_effect" : {
        "en" : "The pointer field will point to an arbitrary memory location, any attempt to write may cause corruption."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Uninitialized members",
        "cweCategory" : 457,
        "impact" : "Medium",
        "subcategory" : "pointer",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "scalar",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Uninitialized scalar variable"
      },
      "description" : {
        "en" : "Use of an uninitialized variable"
      },
      "local_effect" : {
        "en" : "The variable will contain an arbitrary value left from earlier computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Uninitialized variables",
        "cweCategory" : 457,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "scalar",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Uninitialized scalar variable"
      },
      "description" : {
        "en" : "Use of an uninitialized variable"
      },
      "local_effect" : {
        "en" : "The variable will contain an arbitrary value left from earlier computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Uninitialized variables",
        "cweCategory" : 457,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "scalar_field",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Uninitialized scalar field"
      },
      "description" : {
        "en" : "A scalar field is not initialized by the constructor"
      },
      "local_effect" : {
        "en" : "The field will contain an arbitrary value left over from earlier computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Uninitialized members",
        "cweCategory" : 457,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "uninit",
      "subtype" : "scalar_field",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Uninitialized scalar field"
      },
      "description" : {
        "en" : "A scalar field is not initialized by the constructor"
      },
      "local_effect" : {
        "en" : "The field will contain an arbitrary value left over from earlier computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Uninitialized members",
        "cweCategory" : 457,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unintended_global",
      "subtype" : null,
      "code-language" : "javascript",
      "name" : {
        "en" : "Unintended assign to global"
      },
      "description" : {
        "en" : "An implicitly created global is assigned a value, but it looks like a new local declaration was meant instead."
      },
      "local_effect" : {
        "en" : "The assignment will implicitly create a global variable."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unintended_integer_division",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Result is not floating-point"
      },
      "description" : {
        "en" : "When dividing two values of integer types, integer division is used, which ignores any remainder. When such a result is used in a context expecting a floating-point number, it is likely that floating-point division was intended."
      },
      "local_effect" : {
        "en" : "The result of the division is truncated to an integer (a whole number), which is usually a loss of precision in a calculation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unintended_integer_division",
      "subtype" : null,
      "code-language" : "java",
      "name" : {
        "en" : "Result is not floating-point"
      },
      "description" : {
        "en" : "When dividing two values of integer types, integer division is used, which ignores any remainder. When such a result is used in a context expecting a floating-point number, it is likely that floating-point division was intended."
      },
      "local_effect" : {
        "en" : "The result of the division is truncated to an integer (a whole number), which is usually a loss of precision in a calculation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unintended_integer_division",
      "subtype" : null,
      "code-language" : "c#",
      "name" : {
        "en" : "Result is not floating-point"
      },
      "description" : {
        "en" : "When dividing two values of integer types, integer division is used, which ignores any remainder. When such a result is used in a context expecting a floating-point number, it is likely that floating-point division was intended."
      },
      "local_effect" : {
        "en" : "The result of the division is truncated to an integer (a whole number), which is usually a loss of precision in a calculation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unintended_integer_division",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Result is not floating-point"
      },
      "description" : {
        "en" : "When dividing two values of integer types, integer division is used, which ignores any remainder. When such a result is used in a context expecting a floating-point number, it is likely that floating-point division was intended."
      },
      "local_effect" : {
        "en" : "The result of the division is truncated to an integer (a whole number), which is usually a loss of precision in a calculation."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : null,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unreachable",
      "subtype" : "logic_error",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Structurally dead code"
      },
      "description" : {
        "en" : "Code block is unreachable because of the syntactic structure of the code"
      },
      "local_effect" : {
        "en" : "Actions intended to be performed by the unreachable code will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unreachable",
      "subtype" : "logic_error",
      "code-language" : "java",
      "name" : {
        "en" : "Structurally dead code"
      },
      "description" : {
        "en" : "Code block is unreachable because of the syntactic structure of the code"
      },
      "local_effect" : {
        "en" : "Actions intended to be performed by the unreachable code will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unreachable",
      "subtype" : "logic_error",
      "code-language" : "c#",
      "name" : {
        "en" : "Structurally dead code"
      },
      "description" : {
        "en" : "Code block is unreachable because of the syntactic structure of the code"
      },
      "local_effect" : {
        "en" : "Actions intended to be performed by the unreachable code will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unreachable",
      "subtype" : "logic_error",
      "code-language" : "javascript",
      "name" : {
        "en" : "Structurally dead code"
      },
      "description" : {
        "en" : "Code block is unreachable because of the syntactic structure of the code"
      },
      "local_effect" : {
        "en" : "Actions intended to be performed by the unreachable code will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unreachable",
      "subtype" : "logic_error",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Structurally dead code"
      },
      "description" : {
        "en" : "Code block is unreachable because of the syntactic structure of the code"
      },
      "local_effect" : {
        "en" : "Actions intended to be performed by the unreachable code will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unreachable",
      "subtype" : "logic_error",
      "code-language" : "php",
      "name" : {
        "en" : "Structurally dead code"
      },
      "description" : {
        "en" : "Code block is unreachable because of the syntactic structure of the code"
      },
      "local_effect" : {
        "en" : "Actions intended to be performed by the unreachable code will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unreachable",
      "subtype" : "logic_error",
      "code-language" : "python",
      "name" : {
        "en" : "Structurally dead code"
      },
      "description" : {
        "en" : "Code block is unreachable because of the syntactic structure of the code"
      },
      "local_effect" : {
        "en" : "Actions intended to be performed by the unreachable code will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unreachable",
      "subtype" : "logic_error",
      "code-language" : "ruby",
      "name" : {
        "en" : "Structurally dead code"
      },
      "description" : {
        "en" : "Code block is unreachable because of the syntactic structure of the code"
      },
      "local_effect" : {
        "en" : "Actions intended to be performed by the unreachable code will never occur."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Control flow issues",
        "cweCategory" : 561,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unused_value",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unused value"
      },
      "description" : {
        "en" : "A value assigned to a variable is never used."
      },
      "local_effect" : {
        "en" : "An assigned value that is never used may represent unnecessary computation, an incorrect algorithm, or possibly the need for cleanup or refactoring."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 563,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unused_value",
      "subtype" : null,
      "code-language" : "java",
      "name" : {
        "en" : "Unused value"
      },
      "description" : {
        "en" : "A value assigned to a variable is never used."
      },
      "local_effect" : {
        "en" : "An assigned value that is never used may represent unnecessary computation, an incorrect algorithm, or possibly the need for cleanup or refactoring."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 563,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unused_value",
      "subtype" : null,
      "code-language" : "c#",
      "name" : {
        "en" : "Unused value"
      },
      "description" : {
        "en" : "A value assigned to a variable is never used."
      },
      "local_effect" : {
        "en" : "An assigned value that is never used may represent unnecessary computation, an incorrect algorithm, or possibly the need for cleanup or refactoring."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 563,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unused_value",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unused value"
      },
      "description" : {
        "en" : "A value assigned to a variable is never used."
      },
      "local_effect" : {
        "en" : "An assigned value that is never used may represent unnecessary computation, an incorrect algorithm, or possibly the need for cleanup or refactoring."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Code maintainability issues",
        "cweCategory" : 563,
        "impact" : "Low",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unused_value",
      "subtype" : "adjacent",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Unused value"
      },
      "description" : {
        "en" : "A value assigned to a variable is never used."
      },
      "local_effect" : {
        "en" : "An assigned value that is never used may represent unnecessary computation, an incorrect algorithm, or possibly the need for cleanup or refactoring."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 563,
        "impact" : "Medium",
        "subcategory" : "adjacent",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unused_value",
      "subtype" : "adjacent",
      "code-language" : "java",
      "name" : {
        "en" : "Unused value"
      },
      "description" : {
        "en" : "A value assigned to a variable is never used."
      },
      "local_effect" : {
        "en" : "An assigned value that is never used may represent unnecessary computation, an incorrect algorithm, or possibly the need for cleanup or refactoring."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 563,
        "impact" : "Medium",
        "subcategory" : "adjacent",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unused_value",
      "subtype" : "adjacent",
      "code-language" : "c#",
      "name" : {
        "en" : "Unused value"
      },
      "description" : {
        "en" : "A value assigned to a variable is never used."
      },
      "local_effect" : {
        "en" : "An assigned value that is never used may represent unnecessary computation, an incorrect algorithm, or possibly the need for cleanup or refactoring."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 563,
        "impact" : "Medium",
        "subcategory" : "adjacent",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "unused_value",
      "subtype" : "adjacent",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Unused value"
      },
      "description" : {
        "en" : "A value assigned to a variable is never used."
      },
      "local_effect" : {
        "en" : "An assigned value that is never used may represent unnecessary computation, an incorrect algorithm, or possibly the need for cleanup or refactoring."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Incorrect expression",
        "cweCategory" : 563,
        "impact" : "Medium",
        "subcategory" : "adjacent",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "api",
      "code-language" : "java",
      "name" : {
        "en" : "Use of freed resources"
      },
      "description" : {
        "en" : "Use of an object after its resources have been released"
      },
      "local_effect" : {
        "en" : "Attempting to use previously freed resources might result in data corruption, nonsensical results, or runtime exceptions."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 672,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "deref_read_after_free",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Read from pointer after free"
      },
      "description" : {
        "en" : "Reads target of a freed pointer"
      },
      "local_effect" : {
        "en" : "Incorrect values may be read from freed memory, causing incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "deref_read_after_free",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "deref_read_after_free",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Read from pointer after free"
      },
      "description" : {
        "en" : "Reads target of a freed pointer"
      },
      "local_effect" : {
        "en" : "Incorrect values may be read from freed memory, causing incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "deref_read_after_free",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "deref_write_after_free",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Write to pointer after free"
      },
      "description" : {
        "en" : "Write to target of a freed pointer"
      },
      "local_effect" : {
        "en" : "This could cause an immediate crash or incorrect values might be read subsequently; the allocator's own data structures may also be corrupted."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "deref_write_after_free",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "deref_write_after_free",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Write to pointer after free"
      },
      "description" : {
        "en" : "Write to target of a freed pointer"
      },
      "local_effect" : {
        "en" : "This could cause an immediate crash or incorrect values might be read subsequently; the allocator's own data structures may also be corrupted."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "deref_write_after_free",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "double_close",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Double close"
      },
      "description" : {
        "en" : "A resource handle or descriptor is closed more than once"
      },
      "local_effect" : {
        "en" : "The second close operation will fail.  This may also be indicative of other earlier failed operations on the same handle."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 672,
        "impact" : "Medium",
        "subcategory" : "double_close",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "double_close",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Double close"
      },
      "description" : {
        "en" : "A resource handle or descriptor is closed more than once"
      },
      "local_effect" : {
        "en" : "The second close operation will fail.  This may also be indicative of other earlier failed operations on the same handle."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 672,
        "impact" : "Medium",
        "subcategory" : "double_close",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "double_free",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Double free"
      },
      "description" : {
        "en" : "Memory is deallocated more than once"
      },
      "local_effect" : {
        "en" : "Depending on the implementation of the deallocator function, the memory may by placed on the free list more than once."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 415,
        "impact" : "High",
        "subcategory" : "double_free",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "double_free",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Double free"
      },
      "description" : {
        "en" : "Memory is deallocated more than once"
      },
      "local_effect" : {
        "en" : "Depending on the implementation of the deallocator function, the memory may by placed on the free list more than once."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 415,
        "impact" : "High",
        "subcategory" : "double_free",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "pointer",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Use after free"
      },
      "description" : {
        "en" : "A pointer to freed memory is  dereferenced, used as a function argument, or otherwise used"
      },
      "local_effect" : {
        "en" : "This could cause an immediate crash or incorrect values might be read subsequently resulting in incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "pointer",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Use after free"
      },
      "description" : {
        "en" : "A pointer to freed memory is  dereferenced, used as a function argument, or otherwise used"
      },
      "local_effect" : {
        "en" : "This could cause an immediate crash or incorrect values might be read subsequently resulting in incorrect computations."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "use_after_close",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Use after close"
      },
      "description" : {
        "en" : "A resource handle or descriptor is used after being closed"
      },
      "local_effect" : {
        "en" : "Operations on closed handles will fail."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 672,
        "impact" : "Medium",
        "subcategory" : "use_after_close",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "use_after_free",
      "subtype" : "use_after_close",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Use after close"
      },
      "description" : {
        "en" : "A resource handle or descriptor is used after being closed"
      },
      "local_effect" : {
        "en" : "Operations on closed handles will fail."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 672,
        "impact" : "Medium",
        "subcategory" : "use_after_close",
        "qualityKind" : true,
        "securityKind" : true,
        "testKind" : false
      }
    },
    {
      "type" : "varargs",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Missing varargs init or cleanup"
      },
      "description" : {
        "en" : "Incorrect usage of variable argument macros; use va_start or va_copy to begin processing and va_end to finish"
      },
      "local_effect" : {
        "en" : "Memory may be corrupted by forgetting to begin and end variable argument processing."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 573,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "varargs",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Missing varargs init or cleanup"
      },
      "description" : {
        "en" : "Incorrect usage of variable argument macros; use va_start or va_copy to begin processing and va_end to finish"
      },
      "local_effect" : {
        "en" : "Memory may be corrupted by forgetting to begin and end variable argument processing."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "API usage errors",
        "cweCategory" : 573,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "volatile_atomicity",
      "subtype" : null,
      "code-language" : "java",
      "name" : {
        "en" : "Volatile not atomically updated"
      },
      "description" : {
        "en" : "A volatile variable is updated in a non-atomic manner"
      },
      "local_effect" : {
        "en" : "Some updates to the volatile variable may be lost, depending on the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "volatile_atomicity",
      "subtype" : null,
      "code-language" : "c#",
      "name" : {
        "en" : "Volatile not atomically updated"
      },
      "description" : {
        "en" : "A volatile variable is updated in a non-atomic manner"
      },
      "local_effect" : {
        "en" : "Some updates to the volatile variable may be lost, depending on the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "Medium",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "volatile_atomicity",
      "subtype" : "compare",
      "code-language" : "java",
      "name" : {
        "en" : "Volatile not atomically updated"
      },
      "description" : {
        "en" : "A volatile variable is updated in a non-atomic manner"
      },
      "local_effect" : {
        "en" : "Some updates to the volatile variable may be lost, depending on the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "Medium",
        "subcategory" : "compare",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "volatile_atomicity",
      "subtype" : "compare",
      "code-language" : "c#",
      "name" : {
        "en" : "Volatile not atomically updated"
      },
      "description" : {
        "en" : "A volatile variable is updated in a non-atomic manner"
      },
      "local_effect" : {
        "en" : "Some updates to the volatile variable may be lost, depending on the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "Medium",
        "subcategory" : "compare",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "volatile_atomicity",
      "subtype" : "semantic",
      "code-language" : "java",
      "name" : {
        "en" : "Volatile not atomically updated"
      },
      "description" : {
        "en" : "A volatile variable is updated in a non-atomic manner"
      },
      "local_effect" : {
        "en" : "Some updates to the volatile variable may be lost, depending on the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "High",
        "subcategory" : "semantic",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "volatile_atomicity",
      "subtype" : "semantic",
      "code-language" : "c#",
      "name" : {
        "en" : "Volatile not atomically updated"
      },
      "description" : {
        "en" : "A volatile variable is updated in a non-atomic manner"
      },
      "local_effect" : {
        "en" : "Some updates to the volatile variable may be lost, depending on the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "High",
        "subcategory" : "semantic",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "volatile_atomicity",
      "subtype" : "threshold",
      "code-language" : "java",
      "name" : {
        "en" : "Volatile not atomically updated"
      },
      "description" : {
        "en" : "A volatile variable is updated in a non-atomic manner"
      },
      "local_effect" : {
        "en" : "Some updates to the volatile variable may be lost, depending on the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "Low",
        "subcategory" : "threshold",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "volatile_atomicity",
      "subtype" : "threshold",
      "code-language" : "c#",
      "name" : {
        "en" : "Volatile not atomically updated"
      },
      "description" : {
        "en" : "A volatile variable is updated in a non-atomic manner"
      },
      "local_effect" : {
        "en" : "Some updates to the volatile variable may be lost, depending on the interleaving of thread execution."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Concurrent data access violations",
        "cweCategory" : 366,
        "impact" : "Low",
        "subcategory" : "threshold",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrapper_escape",
      "subtype" : null,
      "code-language" : "c/c++",
      "name" : {
        "en" : "Wrapper object use after free"
      },
      "description" : {
        "en" : "An internal pointer of a wrapper object remains available after the object is freed"
      },
      "local_effect" : {
        "en" : "A use after free bug would occur if the internal pointer is used."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrapper_escape",
      "subtype" : null,
      "code-language" : "objective-c",
      "name" : {
        "en" : "Wrapper object use after free"
      },
      "description" : {
        "en" : "An internal pointer of a wrapper object remains available after the object is freed"
      },
      "local_effect" : {
        "en" : "A use after free bug would occur if the internal pointer is used."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrapper_escape",
      "subtype" : "com_deref_read_after_free",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Freed COM internal read"
      },
      "description" : {
        "en" : "Reads target of a freed internal pointer of a COM object"
      },
      "local_effect" : {
        "en" : "Reading from freed memory can cause wrong values to be read and crashes due to illegal memory accesses."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "COM_deref_read_after_free",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrapper_escape",
      "subtype" : "com_deref_read_after_free",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Freed COM internal read"
      },
      "description" : {
        "en" : "Reads target of a freed internal pointer of a COM object"
      },
      "local_effect" : {
        "en" : "Reading from freed memory can cause wrong values to be read and crashes due to illegal memory accesses."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "COM_deref_read_after_free",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrapper_escape",
      "subtype" : "com_deref_write_after_free",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Freed COM internal write"
      },
      "description" : {
        "en" : "Write to target of a freed internal pointer of a COM object"
      },
      "local_effect" : {
        "en" : "Writing to freed memory can cause memory corruption and crashes."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "COM_deref_write_after_free",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrapper_escape",
      "subtype" : "com_deref_write_after_free",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Freed COM internal write"
      },
      "description" : {
        "en" : "Write to target of a freed internal pointer of a COM object"
      },
      "local_effect" : {
        "en" : "Writing to freed memory can cause memory corruption and crashes."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "COM_deref_write_after_free",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrapper_escape",
      "subtype" : "com_use_after_free",
      "code-language" : "c/c++",
      "name" : {
        "en" : "COM object use after free"
      },
      "description" : {
        "en" : "An internal pointer of a COM string object remains available after the object is freed"
      },
      "local_effect" : {
        "en" : "A use after free bug would occur if the internal pointer is used."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "COM_use_after_free",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrapper_escape",
      "subtype" : "com_use_after_free",
      "code-language" : "objective-c",
      "name" : {
        "en" : "COM object use after free"
      },
      "description" : {
        "en" : "An internal pointer of a COM string object remains available after the object is freed"
      },
      "local_effect" : {
        "en" : "A use after free bug would occur if the internal pointer is used."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "COM_use_after_free",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrapper_escape",
      "subtype" : "deref_read_after_free",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Freed internal location read"
      },
      "description" : {
        "en" : "Reads target of a freed internal pointer"
      },
      "local_effect" : {
        "en" : "Reading from freed memory can cause wrong values to be read and crashes due to illegal memory accesses."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "deref_read_after_free",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrapper_escape",
      "subtype" : "deref_read_after_free",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Freed internal location read"
      },
      "description" : {
        "en" : "Reads target of a freed internal pointer"
      },
      "local_effect" : {
        "en" : "Reading from freed memory can cause wrong values to be read and crashes due to illegal memory accesses."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "deref_read_after_free",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrapper_escape",
      "subtype" : "deref_write_after_free",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Freed internal location write"
      },
      "description" : {
        "en" : "Write to target of a freed internal pointer"
      },
      "local_effect" : {
        "en" : "Writing to freed memory can cause memory corruption and crashes."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "deref_write_after_free",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrapper_escape",
      "subtype" : "deref_write_after_free",
      "code-language" : "objective-c",
      "name" : {
        "en" : "Freed internal location write"
      },
      "description" : {
        "en" : "Write to target of a freed internal pointer"
      },
      "local_effect" : {
        "en" : "Writing to freed memory can cause memory corruption and crashes."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - corruptions",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "deref_write_after_free",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    },
    {
      "type" : "wrong_deallocator",
      "subtype" : "com.bad_free",
      "code-language" : "c/c++",
      "name" : {
        "en" : "Explicit free of COM interface"
      },
      "description" : {
        "en" : "A COM interface is explicitly freed instead of using the recommended Release method"
      },
      "local_effect" : {
        "en" : "Other owners of the interface may be left with dangling pointers, ultimately resulting in use after free errors."
      },
      "origin" : "Coverity",
      "cim_checker_properties" : {
        "category" : "Memory - illegal accesses",
        "cweCategory" : 416,
        "impact" : "High",
        "subcategory" : "none",
        "qualityKind" : true,
        "securityKind" : false,
        "testKind" : false
      }
    }
  ]
}
